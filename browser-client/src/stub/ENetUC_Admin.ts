// [PrintTSCodeOne]
// [PrintTSComments]
/*
 * ENetUC_Admin.ts
 * "UC-Server-Access-Protocol-Admin" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
/**
 * Administration interface (workstation setup)
 * ## Module description
 * This module defines structures and functions for administration the UCServer.
 * These structures are used by the administrative console (UCServer Administration) and the ClnInst.exe (Workstation settings) on the client.
 * These operations need an administrative login on the UCServer.
 */
// [PrintTSImports]
import * as asn1ts from "@estos/asn1ts";
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_AsnContact from "./ENetUC_Common_AsnContact";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_Admin";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminLoginResultEnum {
	success = 0,
	failed = 1
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminGetUserProfileErrorEnum {
	success = 0,
	usernotfound = 1,
	accessdenied = 2
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminUserOnlineStateFilter {
	eNOSTATEFILTER = 0,
	eISONLINEONLY = 1,
	eISOFFLINEONLY = 2
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminGetUserProfilesErrorEnum {
	success = 0,
	nouserfound = 1,
	accessdenied = 2
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminSetUserProfileErrorEnum {
	success = 0,
	accessdenied = 1,
	usernotfound = 2,
	sipurialreadyoccupied = 3,
	sipurimalformed = 4
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminRemoveUserProfileErrorEnum {
	success = 0,
	unknown = 1,
	accessdenied = 2,
	invalidusername = 3
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminAddUserProfileErrorEnum {
	success = 0,
	accessdenied = 1,
	useralreadyexists = 2
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminGetComputerProfileErrorEnum {
	success = 0,
	accessdenied = 1,
	computernotfound = 2
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminSetComputerProfileErrorEnum {
	success = 0,
	accessdenied = 1,
	computernotfound = 2
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminAddComputerProfileErrorEnum {
	success = 0,
	accessdenied = 1,
	computeralreadyexists = 2
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminFindUserErrorEnum {
	success = 0,
	invalidparameters = 1,
	accessdenied = 2
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminFindGroupProfilesFilter {
	/** Alle im Usermanagement aktivierten Gruppen */
	allEnabledGroups = 0,
	/** Alle Gruppen */
	allGroups = 1,
	/** Spezifischer DN Pfad einer Gruppe (wird im String-Parameter angegeben) */
	dnPath = 2,
	/** Spezifischer Gruppenname (wird im String Parameter angegeben) */
	groupName = 3,
	/** Spezifische  ObjectGUID (wird im String Parameter angegeben) */
	objectGUID = 4
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminFindGroupProfilesErrorEnum {
	success = 0,
	accessdenied = 1,
	nosearchparameter = 2
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminSetGroupProfileErrorEnum {
	success = 0,
	accessdenied = 1,
	groupnotfound = 2,
	wrongprofileversion = 3,
	errorsavingprofile = 4
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminAddGroupProfileErrorEnum {
	success = 0,
	accessdenied = 1,
	groupalreadyexists = 2,
	errorsavingprofile = 3,
	cantaddgroupinactivedirectory = 4
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminRemoveGroupProfileErrorEnum {
	success = 0,
	accessdenied = 1,
	groupdoesnotexist = 2
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnGetDatabaseManagerSettingsErrorEnum {
	/** Wird in AsnRequestError als Error-Nummer verwendet */
	success = 0,
	accessdenied = 1
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnGetAvailableLinesErrorEnum {
	success = 0,
	accessdenied = 1
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnGetUserManagerSettingsErrorEnum {
	success = 0,
	accessdenied = 1
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminPhoneJournalUnansweredEnum {
	never = 0,
	all = 1,
	first = 2,
	last = 3
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAdminGetPhoneJournalSettingsErrorEnum {
	success = 0,
	accessdenied = 1
}

// [PrintTSTypeDefCode]
// [PrintTSChoiceDefCode]
export class AsnAdminFindUserArgumentChoice {
	public constructor(that?: AsnAdminFindUserArgumentChoice) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminFindUserArgumentChoice {
		return new AsnAdminFindUserArgumentChoice();
	}

	public static type = "AsnAdminFindUserArgumentChoice";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Choice {
		return new asn1ts.Choice({
			name: "AsnAdminFindUserArgumentChoice",
			...params,
			value: [
				new asn1ts.Null({ name: "all", idBlock: { optionalID: 0 } }),
				new asn1ts.Utf8String({ name: "u8sPhoneNumber", idBlock: { optionalID: 1 } })
			]
		});
	}

	public all?: null;
	public u8sPhoneNumber?: string;
}

// [PrintTSTypeDefCode]
// [PrintTSChoiceDefCode]
export class AsnAdminGetUserProfileArgumentChoice {
	public constructor(that?: AsnAdminGetUserProfileArgumentChoice) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminGetUserProfileArgumentChoice {
		return new AsnAdminGetUserProfileArgumentChoice();
	}

	public static type = "AsnAdminGetUserProfileArgumentChoice";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Choice {
		return new asn1ts.Choice({
			name: "AsnAdminGetUserProfileArgumentChoice",
			...params,
			value: [
				new asn1ts.Null({ name: "defaultprofile", idBlock: { optionalID: 0 } }),
				new asn1ts.Utf8String({ name: "u8sClientUsername", idBlock: { optionalID: 1 } })
			]
		});
	}

	public defaultprofile?: null;
	public u8sClientUsername?: string;
}

// [PrintTSTypeDefCode]
// [PrintTSChoiceDefCode]
export class AsnAdminLoginArgumentChoice {
	public constructor(that?: AsnAdminLoginArgumentChoice) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminLoginArgumentChoice {
		return new AsnAdminLoginArgumentChoice();
	}

	public static type = "AsnAdminLoginArgumentChoice";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Choice {
		return new asn1ts.Choice({
			name: "AsnAdminLoginArgumentChoice",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sAdminPassword", idBlock: { optionalID: 0 } }),
				new asn1ts.Utf8String({ name: "u8sAdminPasswordCrypted", idBlock: { optionalID: 1 } })
			]
		});
	}

	public u8sAdminPassword?: string;
	public u8sAdminPasswordCrypted?: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnUserMonitorLine {
	public constructor(that: AsnUserMonitorLine) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnUserMonitorLine {
		return new AsnUserMonitorLine({
			u8sPhoneNumber: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sPhoneNumber"
		];
		return p;
	}

	public static type = "AsnUserMonitorLine";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnUserMonitorLine",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sPhoneNumber" }),
				new asn1ts.Extension()
			]
		});
	}

	public u8sPhoneNumber!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnSetUserProfilesErrorListItem {
	public constructor(that: AsnSetUserProfilesErrorListItem) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnSetUserProfilesErrorListItem {
		return new AsnSetUserProfilesErrorListItem({
			u8sUserName: "",
			iErrorDetail: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sUserName",
			"iErrorDetail"
		];
		return p;
	}

	public static type = "AsnSetUserProfilesErrorListItem";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnSetUserProfilesErrorListItem",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sUserName" }),
				new asn1ts.Integer({ name: "iErrorDetail" }),
				new asn1ts.Extension()
			]
		});
	}

	public u8sUserName!: string;
	/** A number representing the error for the User with Name \"u8sUserName\" */
	public iErrorDetail!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * User Profile laden
 */
export class AsnAdminGetUserProfilesArgument {
	public constructor(that: AsnAdminGetUserProfilesArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminGetUserProfilesArgument {
		return new AsnAdminGetUserProfilesArgument({
			iActiveUsersOnly: 0,
			iFilterOnlineState: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iActiveUsersOnly",
			"iFilterOnlineState"
		];
		return p;
	}

	public static type = "AsnAdminGetUserProfilesArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminGetUserProfilesArgument",
			...params,
			value: [
				new asn1ts.Integer({ name: "iActiveUsersOnly" }),
				new asn1ts.Integer({ name: "iFilterOnlineState" }),
				new asn1ts.Extension()
			]
		});
	}

	/** CTI-Enabled users only */
	public iActiveUsersOnly!: number;
	/** Filter with actual onlinestate -&gt; AsnAdminUserOnlineStateFilter */
	public iFilterOnlineState!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminSetUserProfileResult {
	public constructor(that: AsnAdminSetUserProfileResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetUserProfileResult {
		return new AsnAdminSetUserProfileResult({
			bSuccess: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"bSuccess"
		];
		return p;
	}

	public static type = "AsnAdminSetUserProfileResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetUserProfileResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "bSuccess" }),
				new asn1ts.Extension()
			]
		});
	}

	public bSuccess!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminRemoveUserProfileResult {
	public constructor(that: AsnAdminRemoveUserProfileResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminRemoveUserProfileResult {
		return new AsnAdminRemoveUserProfileResult({
			bSuccess: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"bSuccess"
		];
		return p;
	}

	public static type = "AsnAdminRemoveUserProfileResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminRemoveUserProfileResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "bSuccess" }),
				new asn1ts.Extension()
			]
		});
	}

	public bSuccess!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminAddUserProfileResult {
	public constructor(that: AsnAdminAddUserProfileResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminAddUserProfileResult {
		return new AsnAdminAddUserProfileResult({
			bSuccess: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"bSuccess"
		];
		return p;
	}

	public static type = "AsnAdminAddUserProfileResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminAddUserProfileResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "bSuccess" }),
				new asn1ts.Extension()
			]
		});
	}

	public bSuccess!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Computer Profile laden
 */
export class AsnAdminGetComputerProfileArgument {
	public constructor(that: AsnAdminGetComputerProfileArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminGetComputerProfileArgument {
		return new AsnAdminGetComputerProfileArgument({
			u8sClientComputerName: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sClientComputerName"
		];
		return p;
	}

	public static type = "AsnAdminGetComputerProfileArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminGetComputerProfileArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sClientComputerName" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Computer login daten wenn Computername leer, dann leeres default profile liefern */
	public u8sClientComputerName!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminSetComputerProfileResult {
	public constructor(that: AsnAdminSetComputerProfileResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetComputerProfileResult {
		return new AsnAdminSetComputerProfileResult({
			bSuccess: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"bSuccess"
		];
		return p;
	}

	public static type = "AsnAdminSetComputerProfileResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetComputerProfileResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "bSuccess" }),
				new asn1ts.Extension()
			]
		});
	}

	public bSuccess!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminAddComputerProfileResult {
	public constructor(that: AsnAdminAddComputerProfileResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminAddComputerProfileResult {
		return new AsnAdminAddComputerProfileResult({
			bSuccess: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"bSuccess"
		];
		return p;
	}

	public static type = "AsnAdminAddComputerProfileResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminAddComputerProfileResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "bSuccess" }),
				new asn1ts.Extension()
			]
		});
	}

	public bSuccess!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminFindUserProfile {
	public constructor(that: AsnAdminFindUserProfile) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminFindUserProfile {
		return new AsnAdminFindUserProfile({
			u8sDNPath: "",
			u8sUserName: "",
			u8sFirstName: "",
			u8sLastName: "",
			u8sDisplayName: "",
			u8sPhonePrimary: "",
			u8sPhoneSecondary: "",
			iCtiEnabled: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sDNPath",
			"u8sUserName",
			"u8sFirstName",
			"u8sLastName",
			"u8sDisplayName",
			"u8sPhonePrimary",
			"u8sPhoneSecondary",
			"iCtiEnabled"
		];
		return p;
	}

	public static type = "AsnAdminFindUserProfile";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminFindUserProfile",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sDNPath" }),
				new asn1ts.Utf8String({ name: "u8sUserName" }),
				new asn1ts.Utf8String({ name: "u8sFirstName" }),
				new asn1ts.Utf8String({ name: "u8sLastName" }),
				new asn1ts.Utf8String({ name: "u8sDisplayName" }),
				new asn1ts.Utf8String({ name: "u8sPhonePrimary" }),
				new asn1ts.Utf8String({ name: "u8sPhoneSecondary" }),
				new asn1ts.Integer({ name: "iCtiEnabled" }),
				new asn1ts.Extension()
			]
		});
	}

	/** DN Pfad AD (cn=stefan Eckabuer,cn=users,dc=estos,dc=de) */
	public u8sDNPath!: string;
	/** Benutzerlogin name (ste\@estos.de) */
	public u8sUserName!: string;
	/** Vorname */
	public u8sFirstName!: string;
	/** Nachname */
	public u8sLastName!: string;
	/** Angezeigter Name */
	public u8sDisplayName!: string;
	/** Eigene Rufnummer aus Konfig (+49815136856110) */
	public u8sPhonePrimary!: string;
	/** Zweite Rufnummer aus Konfig (+49815136856185) */
	public u8sPhoneSecondary!: string;
	/** CtiEnabled ja\/nein */
	public iCtiEnabled!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Gruppen-Konfigurationen
 */
export class AsnGroupProfile {
	public constructor(that: AsnGroupProfile) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnGroupProfile {
		return new AsnGroupProfile({
			iEnabled: 0,
			u8sDNPath: "",
			u8sGroupName: "",
			u8sobjectGUID: "",
			u8sPhoneNumber: "",
			u8sPhoneSecondary: "",
			u8sGroupLeaderDN: "",
			u8sGroupCoLeaderDN: "",
			iGroupStaticRights: 0,
			asnGroupRightDetails: ENetUC_Common_AsnContact.AsnUserDynamicRights["initEmpty"].call(0),
			asnGroupLeaderRightDetails: ENetUC_Common_AsnContact.AsnUserDynamicRights["initEmpty"].call(0),
			listUserDNs: new ENetUC_Common.UTF8StringList(),
			u8sObjectSid: "",
			iGroupProfileVersion: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iEnabled",
			"u8sDNPath",
			"u8sGroupName",
			"u8sobjectGUID",
			"u8sPhoneNumber",
			"u8sPhoneSecondary",
			"u8sGroupLeaderDN",
			"u8sGroupCoLeaderDN",
			"iGroupStaticRights",
			"asnGroupRightDetails",
			"asnGroupLeaderRightDetails",
			"listUserDNs",
			"u8sObjectSid",
			"iGroupProfileVersion"
		];
		if (bIncludeOptionals) {
			p.push(
				"iGroupStaticRights2",
				"asnUserPropertyBag",
				"u8sSIPURI",
				"u8sMailAddress",
				"optionalParams"
			);
		}
		return p;
	}

	public static type = "AsnGroupProfile";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnGroupProfile",
			...params,
			value: [
				new asn1ts.Integer({ name: "iEnabled" }),
				new asn1ts.Utf8String({ name: "u8sDNPath" }),
				new asn1ts.Utf8String({ name: "u8sGroupName" }),
				new asn1ts.Utf8String({ name: "u8sobjectGUID" }),
				new asn1ts.Utf8String({ name: "u8sPhoneNumber" }),
				new asn1ts.Utf8String({ name: "u8sPhoneSecondary" }),
				new asn1ts.Utf8String({ name: "u8sGroupLeaderDN" }),
				new asn1ts.Utf8String({ name: "u8sGroupCoLeaderDN" }),
				new asn1ts.Integer({ name: "iGroupStaticRights" }),
				new asn1ts.Integer({ name: "iGroupStaticRights2", idBlock: { optionalID: 0 } }),
				ENetUC_Common_AsnContact.AsnUserDynamicRights.getASN1Schema({ name: "asnGroupRightDetails" }),
				ENetUC_Common_AsnContact.AsnUserDynamicRights.getASN1Schema({ name: "asnGroupLeaderRightDetails" }),
				ENetUC_Common.UTF8StringList.getASN1Schema({ name: "listUserDNs" }),
				new asn1ts.Utf8String({ name: "u8sObjectSid" }),
				new asn1ts.Integer({ name: "iGroupProfileVersion" }),
				ENetUC_Common.AsnUserPropertyBag.getASN1Schema({ name: "asnUserPropertyBag", idBlock: { optionalID: 1 } }),
				new asn1ts.Utf8String({ name: "u8sSIPURI", idBlock: { optionalID: 2 } }),
				new asn1ts.Utf8String({ name: "u8sMailAddress", idBlock: { optionalID: 3 } }),
				ENetUC_Common.AsnOptionalParameters.getASN1Schema({ name: "optionalParams", idBlock: { optionalID: 4 } }),
				new asn1ts.Extension()
			]
		});
	}

	/** Member vom Baseprofile */
	public iEnabled!: number;
	public u8sDNPath!: string;
	public u8sGroupName!: string;
	public u8sobjectGUID!: string;
	/** Not used, reserved */
	public u8sPhoneNumber!: string;
	/** Not used, reserved */
	public u8sPhoneSecondary!: string;
	public u8sGroupLeaderDN!: string;
	public u8sGroupCoLeaderDN!: string;
	public iGroupStaticRights!: number;
	/** added in UCServer 6 */
	public iGroupStaticRights2?: number;
	public asnGroupRightDetails!: ENetUC_Common_AsnContact.AsnUserDynamicRights;
	public asnGroupLeaderRightDetails!: ENetUC_Common_AsnContact.AsnUserDynamicRights;
	public listUserDNs!: ENetUC_Common.UTF8StringList;
	/** Active Directory objectSid - SID der Gruppe - Wird benötigt um die primären Guppen der User zuzuordnen */
	public u8sObjectSid!: string;
	/** Version dieses Gruppenprofils */
	public iGroupProfileVersion!: number;
	/** added in UCServer 6 */
	public asnUserPropertyBag?: ENetUC_Common.AsnUserPropertyBag;
	/** added in UCServer 6 */
	public u8sSIPURI?: string;
	/** added in UCServer 6 */
	public u8sMailAddress?: string;
	/**
	 * optionalParams Name \"SourceDB\" Value string
	 * optionalParams Name \"SourceDBID\" Value string
	 * optionalParams Name \"SourceDBStore\" Value string
	 */
	public optionalParams?: ENetUC_Common.AsnOptionalParameters;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Gruppenprofil abfragen; Je nach SearchFilter wird dann am Server nach Gruppe(n) gesucht
 * Attention: referenced by ENetUC_Mgmt.asn1
 */
export class AsnAdminFindGroupProfilesArgument {
	public constructor(that: AsnAdminFindGroupProfilesArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminFindGroupProfilesArgument {
		return new AsnAdminFindGroupProfilesArgument({
			iSearchFilter: 0,
			u8sStringParameter: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iSearchFilter",
			"u8sStringParameter"
		];
		return p;
	}

	public static type = "AsnAdminFindGroupProfilesArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminFindGroupProfilesArgument",
			...params,
			value: [
				new asn1ts.Integer({ name: "iSearchFilter" }),
				new asn1ts.Utf8String({ name: "u8sStringParameter" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Searchfilter-Wert, siehe dazu AsnAdminFindGroupProfilesFilter Enumeration */
	public iSearchFilter!: number;
	/** Stringparameter für verschiedene Searchfilter */
	public u8sStringParameter!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminSetGroupProfileResult {
	public constructor(that: AsnAdminSetGroupProfileResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetGroupProfileResult {
		return new AsnAdminSetGroupProfileResult({
			bSuccess: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"bSuccess"
		];
		return p;
	}

	public static type = "AsnAdminSetGroupProfileResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetGroupProfileResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "bSuccess" }),
				new asn1ts.Extension()
			]
		});
	}

	public bSuccess!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminAddGroupProfileResult {
	public constructor(that: AsnAdminAddGroupProfileResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminAddGroupProfileResult {
		return new AsnAdminAddGroupProfileResult({
			bSuccess: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"bSuccess"
		];
		return p;
	}

	public static type = "AsnAdminAddGroupProfileResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminAddGroupProfileResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "bSuccess" }),
				new asn1ts.Extension()
			]
		});
	}

	public bSuccess!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminRemoveGroupProfileResult {
	public constructor(that: AsnAdminRemoveGroupProfileResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminRemoveGroupProfileResult {
		return new AsnAdminRemoveGroupProfileResult({
			bSuccess: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"bSuccess"
		];
		return p;
	}

	public static type = "AsnAdminRemoveGroupProfileResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminRemoveGroupProfileResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "bSuccess" }),
				new asn1ts.Extension()
			]
		});
	}

	/** AD Implementierung lässt das Löschen von Gruppen nicht zu, aber es wird TRUE zurückgeliefert */
	public bSuccess!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * DatabaseManager Settings
 */
export class AsnGetDatabaseManagerSettingsArgument {
	public constructor(that?: AsnGetDatabaseManagerSettingsArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnGetDatabaseManagerSettingsArgument {
		return new AsnGetDatabaseManagerSettingsArgument();
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p: string[] = [];
		return p;
	}

	public static type = "AsnGetDatabaseManagerSettingsArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnGetDatabaseManagerSettingsArgument",
			...params,
			value: [
				new asn1ts.Extension()
			]
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnGetDatabaseManagerSettingsResult {
	public constructor(that: AsnGetDatabaseManagerSettingsResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnGetDatabaseManagerSettingsResult {
		return new AsnGetDatabaseManagerSettingsResult({
			u8sEngine: "",
			u8sServer: "",
			u8sFilePath: "",
			u8sLoginName: "",
			u8sPassword: "",
			u8sDatabaseName: "",
			u8sOfflineTable: "",
			u8sJournalTable: "",
			u8sTrackerTable: "",
			u8sConversationTable: "",
			u8sAppointmentTable: "",
			u8sTaskTable: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sEngine",
			"u8sServer",
			"u8sFilePath",
			"u8sLoginName",
			"u8sPassword",
			"u8sDatabaseName",
			"u8sOfflineTable",
			"u8sJournalTable",
			"u8sTrackerTable",
			"u8sConversationTable",
			"u8sAppointmentTable",
			"u8sTaskTable"
		];
		return p;
	}

	public static type = "AsnGetDatabaseManagerSettingsResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnGetDatabaseManagerSettingsResult",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sEngine" }),
				new asn1ts.Utf8String({ name: "u8sServer" }),
				new asn1ts.Utf8String({ name: "u8sFilePath" }),
				new asn1ts.Utf8String({ name: "u8sLoginName" }),
				new asn1ts.Utf8String({ name: "u8sPassword" }),
				new asn1ts.Utf8String({ name: "u8sDatabaseName" }),
				new asn1ts.Utf8String({ name: "u8sOfflineTable" }),
				new asn1ts.Utf8String({ name: "u8sJournalTable" }),
				new asn1ts.Utf8String({ name: "u8sTrackerTable" }),
				new asn1ts.Utf8String({ name: "u8sConversationTable" }),
				new asn1ts.Utf8String({ name: "u8sAppointmentTable" }),
				new asn1ts.Utf8String({ name: "u8sTaskTable" }),
				new asn1ts.Extension()
			]
		});
	}

	/** mssql_mdac, jet */
	public u8sEngine!: string;
	/** SQL-Server Name */
	public u8sServer!: string;
	/** Filepath zur Datenbank im jet\/MSAccess Fall */
	public u8sFilePath!: string;
	/** Loginname bei SQL-Server Fall; Ist der Name leer, wird der SQL-Server mit Windows-Anmeldung verwendet. Enthält der Name etwas, wird SQL-Server internes Benutzerverwaltung verwendet. */
	public u8sLoginName!: string;
	/** Passwort für den Loginname; wird nur benötigt, wenn SQL-Server Benutzerkennwörter verlangt */
	public u8sPassword!: string;
	/** Datenbanknamen-Prefix für jet-Datenbanken */
	public u8sDatabaseName!: string;
	/** Name der Offline-Journal Datenbank\/Tabelle */
	public u8sOfflineTable!: string;
	/** Name der Journal Datenbank\/Tablle */
	public u8sJournalTable!: string;
	/** Name der Call-Tracker Datenbank\/Tablle */
	public u8sTrackerTable!: string;
	/** Name der Conversation Datenbank\/Tablle (Chat) */
	public u8sConversationTable!: string;
	/** Name der Termin Datenbank\/Tabelle */
	public u8sAppointmentTable!: string;
	/** Name der Aufgaben\/geplante Anrufe Datenbank\/Tabelle */
	public u8sTaskTable!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Alle verfügbaren TCP Ports und BindIP Adressen abfragen
 */
export class AsnGetNetworkInterfacePortsArgument {
	public constructor(that?: AsnGetNetworkInterfacePortsArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnGetNetworkInterfacePortsArgument {
		return new AsnGetNetworkInterfacePortsArgument();
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p: string[] = [];
		return p;
	}

	public static type = "AsnGetNetworkInterfacePortsArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnGetNetworkInterfacePortsArgument",
			...params,
			value: [
				new asn1ts.Extension()
			]
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnGetNetworkInterfacePortsResult {
	public constructor(that: AsnGetNetworkInterfacePortsResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnGetNetworkInterfacePortsResult {
		return new AsnGetNetworkInterfacePortsResult({
			iAdminPort: 0,
			u8sAdminBindAddress: "",
			iNetCtiPort: 0,
			u8sNetCtiBindAddress: "",
			iNetTSPPort: 0,
			u8sNetTSPBindAddress: "",
			iLDAPServerPort: 0,
			u8sLDAPServerBindAddress: "",
			iHTTPServerPort: 0,
			u8sHTTPServerBindAddress: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iAdminPort",
			"u8sAdminBindAddress",
			"iNetCtiPort",
			"u8sNetCtiBindAddress",
			"iNetTSPPort",
			"u8sNetTSPBindAddress",
			"iLDAPServerPort",
			"u8sLDAPServerBindAddress",
			"iHTTPServerPort",
			"u8sHTTPServerBindAddress"
		];
		return p;
	}

	public static type = "AsnGetNetworkInterfacePortsResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnGetNetworkInterfacePortsResult",
			...params,
			value: [
				new asn1ts.Integer({ name: "iAdminPort" }),
				new asn1ts.Utf8String({ name: "u8sAdminBindAddress" }),
				new asn1ts.Integer({ name: "iNetCtiPort" }),
				new asn1ts.Utf8String({ name: "u8sNetCtiBindAddress" }),
				new asn1ts.Integer({ name: "iNetTSPPort" }),
				new asn1ts.Utf8String({ name: "u8sNetTSPBindAddress" }),
				new asn1ts.Integer({ name: "iLDAPServerPort" }),
				new asn1ts.Utf8String({ name: "u8sLDAPServerBindAddress" }),
				new asn1ts.Integer({ name: "iHTTPServerPort" }),
				new asn1ts.Utf8String({ name: "u8sHTTPServerBindAddress" }),
				new asn1ts.Extension()
			]
		});
	}

	public iAdminPort!: number;
	public u8sAdminBindAddress!: string;
	public iNetCtiPort!: number;
	public u8sNetCtiBindAddress!: string;
	public iNetTSPPort!: number;
	public u8sNetTSPBindAddress!: string;
	public iLDAPServerPort!: number;
	public u8sLDAPServerBindAddress!: string;
	public iHTTPServerPort!: number;
	public u8sHTTPServerBindAddress!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Alle verfügbaren Leitungen zur Auswahl im ClnInst abfragen
 */
export class AsnGetAvailableLinesArgument {
	public constructor(that?: AsnGetAvailableLinesArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnGetAvailableLinesArgument {
		return new AsnGetAvailableLinesArgument();
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p: string[] = [];
		if (bIncludeOptionals)
			p.push("optionalParams");
		return p;
	}

	public static type = "AsnGetAvailableLinesArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnGetAvailableLinesArgument",
			...params,
			value: [
				ENetUC_Common.AsnOptionalParameters.getASN1Schema({ name: "optionalParams", optional: true }),
				new asn1ts.Extension()
			]
		});
	}

	/**
	 * - Key \"MobileLines\" Value boolean - Add mobile lines to the result, defaults to not adding these lines
	 * - Key \"SIPLines\" Value boolean - Add SIP lines to the result, defaults to not adding these lines
	 * - Key \"AVLines\" Value boolean - Add ProCall AV lines to the result, defaults to not adding these lines
	 */
	public optionalParams?: ENetUC_Common.AsnOptionalParameters;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAvailableLineDetails {
	public constructor(that: AsnAvailableLineDetails) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAvailableLineDetails {
		return new AsnAvailableLineDetails({
			u8sLineURI: "",
			u8sLineName: "",
			u8sCurrentLineOwner: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sLineURI",
			"u8sLineName",
			"u8sCurrentLineOwner"
		];
		return p;
	}

	public static type = "AsnAvailableLineDetails";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAvailableLineDetails",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sLineURI" }),
				new asn1ts.Utf8String({ name: "u8sLineName" }),
				new asn1ts.Utf8String({ name: "u8sCurrentLineOwner" }),
				new asn1ts.Extension()
			]
		});
	}

	public u8sLineURI!: string;
	public u8sLineName!: string;
	public u8sCurrentLineOwner!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * UserManager Settings und aktiver UserManager
 * Attention: referenced by ENetUC_Mgmt.asn1
 */
export class AsnGetUserManagerSettingsArgument {
	public constructor(that?: AsnGetUserManagerSettingsArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnGetUserManagerSettingsArgument {
		return new AsnGetUserManagerSettingsArgument();
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p: string[] = [];
		return p;
	}

	public static type = "AsnGetUserManagerSettingsArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnGetUserManagerSettingsArgument",
			...params,
			value: [
				new asn1ts.Extension()
			]
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Attention: referenced by ENetUC_Mgmt.asn1
 */
export class AsnGetUserManagerSettingsResult {
	public constructor(that: AsnGetUserManagerSettingsResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnGetUserManagerSettingsResult {
		return new AsnGetUserManagerSettingsResult({
			iSelectedUMMode: 0,
			iUMSecurity: 0,
			iUMSelfInstall: 0,
			bAutoBindFirstLine: false,
			bAutoBindSecondLine: false,
			iPhoneNumberPreformatFormat: 0,
			bLDAPBaseAttributeWriteBackEnabled: false,
			u8slistPresenceDomain: new ENetUC_Common.UTF8StringList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iSelectedUMMode",
			"iUMSecurity",
			"iUMSelfInstall",
			"bAutoBindFirstLine",
			"bAutoBindSecondLine",
			"iPhoneNumberPreformatFormat",
			"bLDAPBaseAttributeWriteBackEnabled",
			"u8slistPresenceDomain"
		];
		if (bIncludeOptionals)
			p.push("optionalParams");
		return p;
	}

	public static type = "AsnGetUserManagerSettingsResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnGetUserManagerSettingsResult",
			...params,
			value: [
				new asn1ts.Integer({ name: "iSelectedUMMode" }),
				new asn1ts.Integer({ name: "iUMSecurity" }),
				new asn1ts.Integer({ name: "iUMSelfInstall" }),
				new asn1ts.Boolean({ name: "bAutoBindFirstLine" }),
				new asn1ts.Boolean({ name: "bAutoBindSecondLine" }),
				new asn1ts.Integer({ name: "iPhoneNumberPreformatFormat" }),
				new asn1ts.Boolean({ name: "bLDAPBaseAttributeWriteBackEnabled" }),
				ENetUC_Common.UTF8StringList.getASN1Schema({ name: "u8slistPresenceDomain" }),
				ENetUC_Common.AsnOptionalParameters.getASN1Schema({ name: "optionalParams", optional: true }),
				new asn1ts.Extension()
			]
		});
	}

	public iSelectedUMMode!: number;
	public iUMSecurity!: number;
	public iUMSelfInstall!: number;
	public bAutoBindFirstLine!: boolean;
	public bAutoBindSecondLine!: boolean;
	public iPhoneNumberPreformatFormat!: number;
	public bLDAPBaseAttributeWriteBackEnabled!: boolean;
	public u8slistPresenceDomain!: ENetUC_Common.UTF8StringList;
	/**
	 * Optional Params:
	 * Wenn das Usermanagement auf AD gestellt ist, weerden folgende Informationen noch ergänzt:
	 * ActiveDirectoryDomain			[UTF8String]		Die Domäne, in der der UCServer steht
	 * ActiveDirectoryBaseDNUsers		[UTF8String]		BaseDN der Benutzer (kann eine ';' getrennte Liste sein!)
	 * ActiveDirectoryHostName			[UTF8String]		Rechnername des AD
	 * ActiveDirectoryHostPort			[INTEGER]			Portnummer des AD
	 * ActiveDirectoryDisabledFields	[UTF8StringList]	Liste der UCServer Felder die in der Benutzerverwaltung optional und deaktiviert sind. (HomePhone sowie Pager sind z.B. beides optionale Felder)
	 */
	public optionalParams?: ENetUC_Common.AsnOptionalParameters;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Unbeantwortete Anrufe, Einstellungen abholen
 */
export class AsnAdminGetPhoneJournalSettingsArgument {
	public constructor(that?: AsnAdminGetPhoneJournalSettingsArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminGetPhoneJournalSettingsArgument {
		return new AsnAdminGetPhoneJournalSettingsArgument();
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p: string[] = [];
		return p;
	}

	public static type = "AsnAdminGetPhoneJournalSettingsArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminGetPhoneJournalSettingsArgument",
			...params,
			value: [
				new asn1ts.Extension()
			]
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminGetPhoneJournalSettingsResult {
	public constructor(that: AsnAdminGetPhoneJournalSettingsResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminGetPhoneJournalSettingsResult {
		return new AsnAdminGetPhoneJournalSettingsResult({
			iUnansweredCallJournalOption: 0,
			iAnsweredRedirectedCallJournalOption: 0,
			bAutoMarkReadGroupCallsOnCallback: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iUnansweredCallJournalOption",
			"iAnsweredRedirectedCallJournalOption",
			"bAutoMarkReadGroupCallsOnCallback"
		];
		return p;
	}

	public static type = "AsnAdminGetPhoneJournalSettingsResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminGetPhoneJournalSettingsResult",
			...params,
			value: [
				new asn1ts.Integer({ name: "iUnansweredCallJournalOption" }),
				new asn1ts.Integer({ name: "iAnsweredRedirectedCallJournalOption" }),
				new asn1ts.Boolean({ name: "bAutoMarkReadGroupCallsOnCallback" }),
				new asn1ts.Extension()
			]
		});
	}

	/** see AsnAdminPhoneJournalUnansweredEnum */
	public iUnansweredCallJournalOption!: number;
	/** see AsnAdminPhoneJournalUnansweredEnum */
	public iAnsweredRedirectedCallJournalOption!: number;
	/** Automatically mark journal entries as read, if one member of the group answered the call */
	public bAutoMarkReadGroupCallsOnCallback!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminSetAnonymousUserAccessTokenArgument {
	public constructor(that: AsnAdminSetAnonymousUserAccessTokenArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetAnonymousUserAccessTokenArgument {
		return new AsnAdminSetAnonymousUserAccessTokenArgument({
			u8sAnonymousHintData: "",
			u8sAnonymousNewAccessToken: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sAnonymousHintData",
			"u8sAnonymousNewAccessToken"
		];
		return p;
	}

	public static type = "AsnAdminSetAnonymousUserAccessTokenArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetAnonymousUserAccessTokenArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sAnonymousHintData" }),
				new asn1ts.Utf8String({ name: "u8sAnonymousNewAccessToken" }),
				new asn1ts.Extension()
			]
		});
	}

	/** contact identifier */
	public u8sAnonymousHintData!: string;
	/** new access token */
	public u8sAnonymousNewAccessToken!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminSetAnonymousUserAccessTokenResult {
	public constructor(that: AsnAdminSetAnonymousUserAccessTokenResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetAnonymousUserAccessTokenResult {
		return new AsnAdminSetAnonymousUserAccessTokenResult({
			success: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"success"
		];
		return p;
	}

	public static type = "AsnAdminSetAnonymousUserAccessTokenResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetAnonymousUserAccessTokenResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "success" }),
				new asn1ts.Extension()
			]
		});
	}

	public success!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminSetAnonymousUserContactDataArgument {
	public constructor(that: AsnAdminSetAnonymousUserContactDataArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetAnonymousUserContactDataArgument {
		return new AsnAdminSetAnonymousUserContactDataArgument({
			contactData: ENetUC_Common.AsnNetDatabaseContact["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"contactData"
		];
		return p;
	}

	public static type = "AsnAdminSetAnonymousUserContactDataArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetAnonymousUserContactDataArgument",
			...params,
			value: [
				ENetUC_Common.AsnNetDatabaseContact.getASN1Schema({ name: "contactData" }),
				new asn1ts.Extension()
			]
		});
	}

	/** updated contactdata information */
	public contactData!: ENetUC_Common.AsnNetDatabaseContact;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminSetAnonymousUserContactDataResult {
	public constructor(that: AsnAdminSetAnonymousUserContactDataResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetAnonymousUserContactDataResult {
		return new AsnAdminSetAnonymousUserContactDataResult({
			success: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"success"
		];
		return p;
	}

	public static type = "AsnAdminSetAnonymousUserContactDataResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetAnonymousUserContactDataResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "success" }),
				new asn1ts.Extension()
			]
		});
	}

	public success!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminRemoveAnonymousUserArgument {
	public constructor(that: AsnAdminRemoveAnonymousUserArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminRemoveAnonymousUserArgument {
		return new AsnAdminRemoveAnonymousUserArgument({
			u8sAnonymousHintData: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sAnonymousHintData"
		];
		return p;
	}

	public static type = "AsnAdminRemoveAnonymousUserArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminRemoveAnonymousUserArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sAnonymousHintData" }),
				new asn1ts.Extension()
			]
		});
	}

	/** contact identifier */
	public u8sAnonymousHintData!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminRemoveAnonymousUserResult {
	public constructor(that: AsnAdminRemoveAnonymousUserResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminRemoveAnonymousUserResult {
		return new AsnAdminRemoveAnonymousUserResult({
			success: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"success"
		];
		return p;
	}

	public static type = "AsnAdminRemoveAnonymousUserResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminRemoveAnonymousUserResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "success" }),
				new asn1ts.Extension()
			]
		});
	}

	public success!: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * UserManager Settings und aktiver UserManager
 * CtiServer Administrator login
 */
export class AsnAdminLoginArgument {
	public constructor(that: AsnAdminLoginArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminLoginArgument {
		return new AsnAdminLoginArgument({
			u8sAdminUsername: "",
			adminPassword: AsnAdminLoginArgumentChoice["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sAdminUsername",
			"adminPassword"
		];
		return p;
	}

	public static type = "AsnAdminLoginArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminLoginArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sAdminUsername" }),
				AsnAdminLoginArgumentChoice.getASN1Schema({ name: "adminPassword" }),
				new asn1ts.Extension()
			]
		});
	}

	/** user login daten */
	public u8sAdminUsername!: string;
	public adminPassword!: AsnAdminLoginArgumentChoice;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminLoginResult {
	public constructor(that: AsnAdminLoginResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminLoginResult {
		return new AsnAdminLoginResult({
			result: AsnAdminLoginResultEnum.success
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"result"
		];
		return p;
	}

	public static type = "AsnAdminLoginResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminLoginResult",
			...params,
			value: [
				new asn1ts.Enumerated({ name: "result" }),
				new asn1ts.Extension()
			]
		});
	}

	public result!: AsnAdminLoginResultEnum;
}

// [PrintTSTypeDefCode]
// [PrintTSSetOfDefCode]
// [PrintTSListClass]
export class AsnUserMonitorLineList extends Array<AsnUserMonitorLine> {
	public static getASN1Schema(params?: asn1ts.SequenceOfParams): asn1ts.SequenceOf {
		return new asn1ts.SequenceOf({
			...params,
			value: AsnUserMonitorLine.getASN1Schema()
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnUserProfile {
	public constructor(that: AsnUserProfile) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnUserProfile {
		return new AsnUserProfile({
			iEnabled: 0,
			u8sDNPath: "",
			u8sUserName: "",
			u8sSIPURI: "",
			u8sobjectGUID: "",
			u8sPhoneNumber: "",
			u8sPhoneSecondary: "",
			userMonitorLineList: new AsnUserMonitorLineList(),
			iMonitorLineRights: 0,
			u8sSAMAccountName: "",
			u8sPassword: "",
			u8sCallRecordingNumber: "",
			u8sMailboxNumber: "",
			u8sHomeServer: "",
			iUserStaticRights: 0,
			userDynamicRights: new ENetUC_Common_AsnContact.AsnUserDynamicRightsList(),
			asnUserContact: ENetUC_Common.AsnNetDatabaseContact["initEmpty"].call(0),
			asnUserPropertyBag: ENetUC_Common.AsnUserPropertyBag["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iEnabled",
			"u8sDNPath",
			"u8sUserName",
			"u8sSIPURI",
			"u8sobjectGUID",
			"u8sPhoneNumber",
			"u8sPhoneSecondary",
			"userMonitorLineList",
			"iMonitorLineRights",
			"u8sSAMAccountName",
			"u8sPassword",
			"u8sCallRecordingNumber",
			"u8sMailboxNumber",
			"u8sHomeServer",
			"iUserStaticRights",
			"userDynamicRights",
			"asnUserContact",
			"asnUserPropertyBag"
		];
		if (bIncludeOptionals) {
			p.push(
				"iUserStaticRights2",
				"optionalParams",
				"bWritePicture"
			);
		}
		return p;
	}

	public static type = "AsnUserProfile";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnUserProfile",
			...params,
			value: [
				new asn1ts.Integer({ name: "iEnabled" }),
				new asn1ts.Utf8String({ name: "u8sDNPath" }),
				new asn1ts.Utf8String({ name: "u8sUserName" }),
				new asn1ts.Utf8String({ name: "u8sSIPURI" }),
				new asn1ts.Utf8String({ name: "u8sobjectGUID" }),
				new asn1ts.Utf8String({ name: "u8sPhoneNumber" }),
				new asn1ts.Utf8String({ name: "u8sPhoneSecondary" }),
				AsnUserMonitorLineList.getASN1Schema({ name: "userMonitorLineList" }),
				new asn1ts.Integer({ name: "iMonitorLineRights" }),
				new asn1ts.Utf8String({ name: "u8sSAMAccountName" }),
				new asn1ts.Utf8String({ name: "u8sPassword" }),
				new asn1ts.Utf8String({ name: "u8sCallRecordingNumber" }),
				new asn1ts.Utf8String({ name: "u8sMailboxNumber" }),
				new asn1ts.Utf8String({ name: "u8sHomeServer" }),
				new asn1ts.Integer({ name: "iUserStaticRights" }),
				new asn1ts.Integer({ name: "iUserStaticRights2", idBlock: { optionalID: 0 } }),
				ENetUC_Common_AsnContact.AsnUserDynamicRightsList.getASN1Schema({ name: "userDynamicRights" }),
				ENetUC_Common.AsnNetDatabaseContact.getASN1Schema({ name: "asnUserContact" }),
				ENetUC_Common.AsnUserPropertyBag.getASN1Schema({ name: "asnUserPropertyBag" }),
				ENetUC_Common.AsnOptionalParameters.getASN1Schema({ name: "optionalParams", optional: true }),
				new asn1ts.Boolean({ name: "bWritePicture", idBlock: { optionalID: 1 } }),
				new asn1ts.Extension()
			]
		});
	}

	public iEnabled!: number;
	public u8sDNPath!: string;
	public u8sUserName!: string;
	public u8sSIPURI!: string;
	public u8sobjectGUID!: string;
	public u8sPhoneNumber!: string;
	public u8sPhoneSecondary!: string;
	public userMonitorLineList!: AsnUserMonitorLineList;
	public iMonitorLineRights!: number;
	public u8sSAMAccountName!: string;
	public u8sPassword!: string;
	public u8sCallRecordingNumber!: string;
	public u8sMailboxNumber!: string;
	public u8sHomeServer!: string;
	public iUserStaticRights!: number;
	/** added in UCServer 6 */
	public iUserStaticRights2?: number;
	public userDynamicRights!: ENetUC_Common_AsnContact.AsnUserDynamicRightsList;
	public asnUserContact!: ENetUC_Common.AsnNetDatabaseContact;
	public asnUserPropertyBag!: ENetUC_Common.AsnUserPropertyBag;
	/**
	 * Additional information which were added later (for backward compatibility):
	 * - Key \"ADDisabled\" Value boolean - User profile is disabled in the Active Directory
	 * - Key \"SourceDB\" Value AsnString - User profile is replicated from DB (name)
	 * - Key \"SourceDBID\" Value AsnString - User profile is replicated from DB (ID)
	 * - Key \"SourceDBStore\" Value AsnString - User profile is replicated from DB (StoreID inside the DB)
	 * - Key \"primaryGroupID\" Value int - ID of the primary group of a Active Directiry user
	 * - Key \"objectSID\" Value AsnString - ObjectSID of the user Object in the Active Directory
	 */
	public optionalParams?: ENetUC_Common.AsnOptionalParameters;
	public bWritePicture?: boolean;
}

// [PrintTSTypeDefCode]
// [PrintTSSetOfDefCode]
// [PrintTSListClass]
export class AsnUserProfileList extends Array<AsnUserProfile> {
	public static getASN1Schema(params?: asn1ts.SequenceOfParams): asn1ts.SequenceOf {
		return new asn1ts.SequenceOf({
			...params,
			value: AsnUserProfile.getASN1Schema()
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSetOfDefCode]
// [PrintTSListClass]
export class AsnSetUserProfilesErrorList extends Array<AsnSetUserProfilesErrorListItem> {
	public static getASN1Schema(params?: asn1ts.SequenceOfParams): asn1ts.SequenceOf {
		return new asn1ts.SequenceOf({
			...params,
			value: AsnSetUserProfilesErrorListItem.getASN1Schema()
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * User Profile laden
 */
export class AsnAdminGetUserProfileArgument {
	public constructor(that: AsnAdminGetUserProfileArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminGetUserProfileArgument {
		return new AsnAdminGetUserProfileArgument({
			identifier: AsnAdminGetUserProfileArgumentChoice["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"identifier"
		];
		return p;
	}

	public static type = "AsnAdminGetUserProfileArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminGetUserProfileArgument",
			...params,
			value: [
				AsnAdminGetUserProfileArgumentChoice.getASN1Schema({ name: "identifier" }),
				new asn1ts.Extension()
			]
		});
	}

	public identifier!: AsnAdminGetUserProfileArgumentChoice;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminGetUserProfileResult {
	public constructor(that: AsnAdminGetUserProfileResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminGetUserProfileResult {
		return new AsnAdminGetUserProfileResult({
			userProfile: AsnUserProfile["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"userProfile"
		];
		return p;
	}

	public static type = "AsnAdminGetUserProfileResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminGetUserProfileResult",
			...params,
			value: [
				AsnUserProfile.getASN1Schema({ name: "userProfile" }),
				new asn1ts.Extension()
			]
		});
	}

	public userProfile!: AsnUserProfile;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminGetUserProfilesResult {
	public constructor(that: AsnAdminGetUserProfilesResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminGetUserProfilesResult {
		return new AsnAdminGetUserProfilesResult({
			userProfiles: new AsnUserProfileList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"userProfiles"
		];
		return p;
	}

	public static type = "AsnAdminGetUserProfilesResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminGetUserProfilesResult",
			...params,
			value: [
				AsnUserProfileList.getASN1Schema({ name: "userProfiles" }),
				new asn1ts.Extension()
			]
		});
	}

	public userProfiles!: AsnUserProfileList;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * User Profile speichern
 */
export class AsnAdminSetUserProfileArgument {
	public constructor(that: AsnAdminSetUserProfileArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetUserProfileArgument {
		return new AsnAdminSetUserProfileArgument({
			userProfile: AsnUserProfile["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"userProfile"
		];
		if (bIncludeOptionals)
			p.push("optionalParams");
		return p;
	}

	public static type = "AsnAdminSetUserProfileArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetUserProfileArgument",
			...params,
			value: [
				AsnUserProfile.getASN1Schema({ name: "userProfile" }),
				ENetUC_Common.AsnOptionalParameters.getASN1Schema({ name: "optionalParams", optional: true }),
				new asn1ts.Extension()
			]
		});
	}

	public userProfile!: AsnUserProfile;
	public optionalParams?: ENetUC_Common.AsnOptionalParameters;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * User Profile löschen (vorallem für Test-Clients benötigt)
 * Anmerkung: Im AD Fall kann kein Benutzer gelöscht werden, die Funkltion liefert aktuell trotzdem bSuccess == true
 */
export class AsnAdminRemoveUserProfileArgument {
	public constructor(that: AsnAdminRemoveUserProfileArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminRemoveUserProfileArgument {
		return new AsnAdminRemoveUserProfileArgument({
			userProfile: AsnUserProfile["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"userProfile"
		];
		return p;
	}

	public static type = "AsnAdminRemoveUserProfileArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminRemoveUserProfileArgument",
			...params,
			value: [
				AsnUserProfile.getASN1Schema({ name: "userProfile" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Der u8sUserName muss gesetzt werden als Schlüssel */
	public userProfile!: AsnUserProfile;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * User Profile hinzufügen
 * Anmerkung: Im AD Fall kann kein Benutzer hinzugefügt werden, die Funktion liefert aktuell trotzdem bSuccess == true
 */
export class AsnAdminAddUserProfileArgument {
	public constructor(that: AsnAdminAddUserProfileArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminAddUserProfileArgument {
		return new AsnAdminAddUserProfileArgument({
			userProfile: AsnUserProfile["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"userProfile"
		];
		return p;
	}

	public static type = "AsnAdminAddUserProfileArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminAddUserProfileArgument",
			...params,
			value: [
				AsnUserProfile.getASN1Schema({ name: "userProfile" }),
				new asn1ts.Extension()
			]
		});
	}

	public userProfile!: AsnUserProfile;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Computer Account (EComputerProfile) verwalten
 */
export class AsnComputerProfile {
	public constructor(that: AsnComputerProfile) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnComputerProfile {
		return new AsnComputerProfile({
			iEnabled: 0,
			u8sDNPath: "",
			u8sComputerLogin: "",
			u8sComputerPassword: "",
			u8sobjectGUID: "",
			u8sPhoneNumber: "",
			u8sPhoneSecondary: "",
			userMonitorLineList: new AsnUserMonitorLineList(),
			iMonitorLineRights: 0,
			asnUserPropertyBag: ENetUC_Common.AsnUserPropertyBag["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iEnabled",
			"u8sDNPath",
			"u8sComputerLogin",
			"u8sComputerPassword",
			"u8sobjectGUID",
			"u8sPhoneNumber",
			"u8sPhoneSecondary",
			"userMonitorLineList",
			"iMonitorLineRights",
			"asnUserPropertyBag"
		];
		if (bIncludeOptionals)
			p.push("optionalParams");
		return p;
	}

	public static type = "AsnComputerProfile";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnComputerProfile",
			...params,
			value: [
				new asn1ts.Integer({ name: "iEnabled" }),
				new asn1ts.Utf8String({ name: "u8sDNPath" }),
				new asn1ts.Utf8String({ name: "u8sComputerLogin" }),
				new asn1ts.Utf8String({ name: "u8sComputerPassword" }),
				new asn1ts.Utf8String({ name: "u8sobjectGUID" }),
				new asn1ts.Utf8String({ name: "u8sPhoneNumber" }),
				new asn1ts.Utf8String({ name: "u8sPhoneSecondary" }),
				AsnUserMonitorLineList.getASN1Schema({ name: "userMonitorLineList" }),
				new asn1ts.Integer({ name: "iMonitorLineRights" }),
				ENetUC_Common.AsnUserPropertyBag.getASN1Schema({ name: "asnUserPropertyBag" }),
				ENetUC_Common.AsnOptionalParameters.getASN1Schema({ name: "optionalParams", idBlock: { optionalID: 0 } }),
				new asn1ts.Extension()
			]
		});
	}

	/** Member vom Baseprofile */
	public iEnabled!: number;
	public u8sDNPath!: string;
	public u8sComputerLogin!: string;
	public u8sComputerPassword!: string;
	public u8sobjectGUID!: string;
	public u8sPhoneNumber!: string;
	public u8sPhoneSecondary!: string;
	public userMonitorLineList!: AsnUserMonitorLineList;
	public iMonitorLineRights!: number;
	public asnUserPropertyBag!: ENetUC_Common.AsnUserPropertyBag;
	/**
	 * optionalParams Name \"SourceDB\" Value string
	 * optionalParams Name \"SourceDBID\" Value string
	 * optionalParams Name \"SourceDBStore\" Value string
	 */
	public optionalParams?: ENetUC_Common.AsnOptionalParameters;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminGetComputerProfileResult {
	public constructor(that: AsnAdminGetComputerProfileResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminGetComputerProfileResult {
		return new AsnAdminGetComputerProfileResult({
			computerProfile: AsnComputerProfile["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"computerProfile"
		];
		return p;
	}

	public static type = "AsnAdminGetComputerProfileResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminGetComputerProfileResult",
			...params,
			value: [
				AsnComputerProfile.getASN1Schema({ name: "computerProfile" }),
				new asn1ts.Extension()
			]
		});
	}

	public computerProfile!: AsnComputerProfile;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Computer Profile speichern
 */
export class AsnAdminSetComputerProfileArgument {
	public constructor(that: AsnAdminSetComputerProfileArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetComputerProfileArgument {
		return new AsnAdminSetComputerProfileArgument({
			computerProfile: AsnComputerProfile["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"computerProfile"
		];
		return p;
	}

	public static type = "AsnAdminSetComputerProfileArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetComputerProfileArgument",
			...params,
			value: [
				AsnComputerProfile.getASN1Schema({ name: "computerProfile" }),
				new asn1ts.Extension()
			]
		});
	}

	public computerProfile!: AsnComputerProfile;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Computer Profile hinzufügen
 */
export class AsnAdminAddComputerProfileArgument {
	public constructor(that: AsnAdminAddComputerProfileArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminAddComputerProfileArgument {
		return new AsnAdminAddComputerProfileArgument({
			computerProfile: AsnComputerProfile["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"computerProfile"
		];
		return p;
	}

	public static type = "AsnAdminAddComputerProfileArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminAddComputerProfileArgument",
			...params,
			value: [
				AsnComputerProfile.getASN1Schema({ name: "computerProfile" }),
				new asn1ts.Extension()
			]
		});
	}

	public computerProfile!: AsnComputerProfile;
}

// [PrintTSTypeDefCode]
// [PrintTSSetOfDefCode]
// [PrintTSListClass]
export class AsnAdminFindUserProfileList extends Array<AsnAdminFindUserProfile> {
	public static getASN1Schema(params?: asn1ts.SequenceOfParams): asn1ts.SequenceOf {
		return new asn1ts.SequenceOf({
			...params,
			value: AsnAdminFindUserProfile.getASN1Schema()
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * User Profile finden
 */
export class AsnAdminFindUserArgument {
	public constructor(that: AsnAdminFindUserArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminFindUserArgument {
		return new AsnAdminFindUserArgument({
			find: AsnAdminFindUserArgumentChoice["initEmpty"].call(0),
			iMaxResults: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"find",
			"iMaxResults"
		];
		return p;
	}

	public static type = "AsnAdminFindUserArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminFindUserArgument",
			...params,
			value: [
				AsnAdminFindUserArgumentChoice.getASN1Schema({ name: "find" }),
				new asn1ts.Integer({ name: "iMaxResults" }),
				new asn1ts.Extension()
			]
		});
	}

	public find!: AsnAdminFindUserArgumentChoice;
	/** Maximale Anzahl der gewünschten user (0 für alle) */
	public iMaxResults!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminFindUserResult {
	public constructor(that: AsnAdminFindUserResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminFindUserResult {
		return new AsnAdminFindUserResult({
			userlist: new AsnAdminFindUserProfileList(),
			iLimitReached: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"userlist",
			"iLimitReached"
		];
		return p;
	}

	public static type = "AsnAdminFindUserResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminFindUserResult",
			...params,
			value: [
				AsnAdminFindUserProfileList.getASN1Schema({ name: "userlist" }),
				new asn1ts.Integer({ name: "iLimitReached" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Liste der gefundenen User. Das sind evtl nicht alle */
	public userlist!: AsnAdminFindUserProfileList;
	/** Wenn es mehr gibt, als wir abfragen können, dann ist das gesetzt */
	public iLimitReached!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSetOfDefCode]
// [PrintTSListClass]
export class AsnGroupProfileList extends Array<AsnGroupProfile> {
	public static getASN1Schema(params?: asn1ts.SequenceOfParams): asn1ts.SequenceOf {
		return new asn1ts.SequenceOf({
			...params,
			value: AsnGroupProfile.getASN1Schema()
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminFindGroupProfilesResult {
	public constructor(that: AsnAdminFindGroupProfilesResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminFindGroupProfilesResult {
		return new AsnAdminFindGroupProfilesResult({
			listGroupProfiles: new AsnGroupProfileList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"listGroupProfiles"
		];
		return p;
	}

	public static type = "AsnAdminFindGroupProfilesResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminFindGroupProfilesResult",
			...params,
			value: [
				AsnGroupProfileList.getASN1Schema({ name: "listGroupProfiles" }),
				new asn1ts.Extension()
			]
		});
	}

	public listGroupProfiles!: AsnGroupProfileList;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Groupprofile speichern
 * Die Gruppe wird im Server modifiziert; die Gruppe wird dabei durch die GUID referenziert (stimmt diese nicht, schlägt der Aufruf fehl).
 * Die Daten, die Übernommen werden hängen vom Backend ab.
 * Änderungen von Datenfeldern, die vom AD verwaltet werden (ObjectSID, GUID, DNPath, Member-Liste, Gruppenname) werden NICHT übernommen.
 * iGroupProfileVersion kann auch nicht geändert werden, da dies von der UCServer Version abhängig ist.
 */
export class AsnAdminSetGroupProfileArgument {
	public constructor(that: AsnAdminSetGroupProfileArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetGroupProfileArgument {
		return new AsnAdminSetGroupProfileArgument({
			groupProfile: AsnGroupProfile["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"groupProfile"
		];
		return p;
	}

	public static type = "AsnAdminSetGroupProfileArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetGroupProfileArgument",
			...params,
			value: [
				AsnGroupProfile.getASN1Schema({ name: "groupProfile" }),
				new asn1ts.Extension()
			]
		});
	}

	public groupProfile!: AsnGroupProfile;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Group Profile hinzufügen
 */
export class AsnAdminAddGroupProfileArgument {
	public constructor(that: AsnAdminAddGroupProfileArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminAddGroupProfileArgument {
		return new AsnAdminAddGroupProfileArgument({
			groupProfile: AsnGroupProfile["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"groupProfile"
		];
		return p;
	}

	public static type = "AsnAdminAddGroupProfileArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminAddGroupProfileArgument",
			...params,
			value: [
				AsnGroupProfile.getASN1Schema({ name: "groupProfile" }),
				new asn1ts.Extension()
			]
		});
	}

	public groupProfile!: AsnGroupProfile;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Group Profile löschen
 */
export class AsnAdminRemoveGroupProfileArgument {
	public constructor(that: AsnAdminRemoveGroupProfileArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminRemoveGroupProfileArgument {
		return new AsnAdminRemoveGroupProfileArgument({
			groupProfile: AsnGroupProfile["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"groupProfile"
		];
		return p;
	}

	public static type = "AsnAdminRemoveGroupProfileArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminRemoveGroupProfileArgument",
			...params,
			value: [
				AsnGroupProfile.getASN1Schema({ name: "groupProfile" }),
				new asn1ts.Extension()
			]
		});
	}

	public groupProfile!: AsnGroupProfile;
}

// [PrintTSTypeDefCode]
// [PrintTSSetOfDefCode]
// [PrintTSListClass]
export class AsnAvailableLineDetailsList extends Array<AsnAvailableLineDetails> {
	public static getASN1Schema(params?: asn1ts.SequenceOfParams): asn1ts.SequenceOf {
		return new asn1ts.SequenceOf({
			...params,
			value: AsnAvailableLineDetails.getASN1Schema()
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Attention: referenced by ENetUC_Mgmt.asn1
 */
export class AsnGetAvailableLinesResult {
	public constructor(that: AsnGetAvailableLinesResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnGetAvailableLinesResult {
		return new AsnGetAvailableLinesResult({
			linelist: new AsnAvailableLineDetailsList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"linelist"
		];
		return p;
	}

	public static type = "AsnGetAvailableLinesResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnGetAvailableLinesResult",
			...params,
			value: [
				AsnAvailableLineDetailsList.getASN1Schema({ name: "linelist" }),
				new asn1ts.Extension()
			]
		});
	}

	public linelist!: AsnAvailableLineDetailsList;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * User Profiles Liste speichern
 */
export class AsnAdminSetUserProfilesListArgument {
	public constructor(that: AsnAdminSetUserProfilesListArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetUserProfilesListArgument {
		return new AsnAdminSetUserProfilesListArgument({
			userProfiles: new AsnUserProfileList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"userProfiles"
		];
		return p;
	}

	public static type = "AsnAdminSetUserProfilesListArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetUserProfilesListArgument",
			...params,
			value: [
				AsnUserProfileList.getASN1Schema({ name: "userProfiles" }),
				new asn1ts.Extension()
			]
		});
	}

	public userProfiles!: AsnUserProfileList;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAdminSetUserProfilesListResult {
	public constructor(that: AsnAdminSetUserProfilesListResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAdminSetUserProfilesListResult {
		return new AsnAdminSetUserProfilesListResult({
			bSuccess: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"bSuccess"
		];
		if (bIncludeOptionals)
			p.push("errorList");
		return p;
	}

	public static type = "AsnAdminSetUserProfilesListResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAdminSetUserProfilesListResult",
			...params,
			value: [
				new asn1ts.Boolean({ name: "bSuccess" }),
				AsnSetUserProfilesErrorList.getASN1Schema({ name: "errorList", idBlock: { optionalID: 0 } }),
				new asn1ts.Extension()
			]
		});
	}

	public bSuccess!: boolean;
	public errorList?: AsnSetUserProfilesErrorList;
}

// [PrintTSTypeDefCode]
// [PrintTSSetOfDefCode]
// [PrintTSListClass]
export class AsnComputerProfileList extends Array<AsnComputerProfile> {
	public static getASN1Schema(params?: asn1ts.SequenceOfParams): asn1ts.SequenceOf {
		return new asn1ts.SequenceOf({
			...params,
			value: AsnComputerProfile.getASN1Schema()
		});
	}
}
