// [PrintTSROSEHeader]
/**
 * ENetUC_JournalROSE
 * "UC-Server-Access-Protocol-Journal" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImports]
// Global imports
import { IENetUC_JournalROSE, IENetUC_JournalROSE_Handler } from "./ENetUC_JournalROSE_Interface";
import { ROSEError, ROSEInvoke, ROSEReject, ROSEResult } from "./SNACCROSE";
import { AsnInvokeProblem, AsnInvokeProblemEnum, createInvokeReject, IASN1Transport, IASN1LogData, IReceiveInvokeContext, IInvokeHandler, ELogSeverity, ROSEBase } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_Journal from "./ENetUC_Journal";
import * as Converter from "./ENetUC_Journal_Converter";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_SIPCTI from "./ENetUC_Common_SIPCTI";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";
import * as ENetUC_Common_SIPCTI_Converter from "./ENetUC_Common_SIPCTI_Converter";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_JournalROSE";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEOperationDefines]
export enum OperationIDs {
	OPID_asnGetOfflineJournal = 2104,
	OPID_asnGetJournalEntriesV2 = 2172,
	OPID_asnUpdateCallAndJournalContactAndNumber = 2108,
	OPID_asnUpdateCallLocalContact = 2140,
	OPID_asnUpdateJournalMemo = 2112,
	OPID_asnUpdateJournalProject = 2113,
	OPID_asnUpdateJournalReadFlag = 2114,
	OPID_asnUpdateJournalSubject = 2115,
	OPID_asnGetJournalEntriesCountV2 = 2173,
	OPID_asnJournalEntryGet = 2117,
	OPID_asnJournalEntryChanged = 2109,
	OPID_asnJournalEntryListChanged = 2170,
	OPID_asnJournalSubscribeEvents = 2171,
	OPID_asnJournalGetSettings = 2118,
	OPID_asnUpdateJournal = 2119,
	OPID_asnDeleteJournalEntries = 2128,
	OPID_asnMarkAllJournalEntriesAsRead = 2129
}

// [PrintTSROSEModuleComment]
/**
 * Journal interface
 * ## Module description
 * This Module defines structures and operations for accessing the journal database of the UCServer.
 *
 * ## Features
 * - Get journal entries from the database (asnGetJournalEntries).
 * - Update journal entries in the database.
 * - Notify CRUD interface for getting events from the journal database.
 *
 * New journal entries where only generated by the UCServer if the corresponding events happend (Calls, Chats etc.) and cannot be generated by this client API.
 */

// [PrintTSROSEClass]
export class ENetUC_JournalROSE extends ROSEBase implements IInvokeHandler, IENetUC_JournalROSE {
	/**
	 * Contains the attributes that have to be filtered from logging
	 * Use logfilter property;property inside the asn1 root comments to specify this list
	 */
	public readonly logFilter: string[];

	/**
	 * The Loggers getLogData callback (used in all the log methods called in this class, add the classname to every log entry)
	 *
	 * @returns - an ILogData log data object provided additional data for all the logger calls in this class
	 */
	public getLogData(): IASN1LogData {
		return {
			className: MODULE_NAME
		};
	}

	/**
	 * Returns the operationName for an operationID
	 *
	 * @param id - the id we want to have the name for
	 * @returns - the name or undefined if not found
	 */
	public getNameForOperationID(id: OperationIDs): string | undefined {
		switch (id) {
			case OperationIDs.OPID_asnGetOfflineJournal:
				return "asnGetOfflineJournal";
			case OperationIDs.OPID_asnGetJournalEntriesV2:
				return "asnGetJournalEntriesV2";
			case OperationIDs.OPID_asnUpdateCallAndJournalContactAndNumber:
				return "asnUpdateCallAndJournalContactAndNumber";
			case OperationIDs.OPID_asnUpdateCallLocalContact:
				return "asnUpdateCallLocalContact";
			case OperationIDs.OPID_asnUpdateJournalMemo:
				return "asnUpdateJournalMemo";
			case OperationIDs.OPID_asnUpdateJournalProject:
				return "asnUpdateJournalProject";
			case OperationIDs.OPID_asnUpdateJournalReadFlag:
				return "asnUpdateJournalReadFlag";
			case OperationIDs.OPID_asnUpdateJournalSubject:
				return "asnUpdateJournalSubject";
			case OperationIDs.OPID_asnGetJournalEntriesCountV2:
				return "asnGetJournalEntriesCountV2";
			case OperationIDs.OPID_asnJournalEntryGet:
				return "asnJournalEntryGet";
			case OperationIDs.OPID_asnJournalEntryChanged:
				return "asnJournalEntryChanged";
			case OperationIDs.OPID_asnJournalEntryListChanged:
				return "asnJournalEntryListChanged";
			case OperationIDs.OPID_asnJournalSubscribeEvents:
				return "asnJournalSubscribeEvents";
			case OperationIDs.OPID_asnJournalGetSettings:
				return "asnJournalGetSettings";
			case OperationIDs.OPID_asnUpdateJournal:
				return "asnUpdateJournal";
			case OperationIDs.OPID_asnDeleteJournalEntries:
				return "asnDeleteJournalEntries";
			case OperationIDs.OPID_asnMarkAllJournalEntriesAsRead:
				return "asnMarkAllJournalEntriesAsRead";
			default:
				return undefined;
		}
	}

	/**
	 * Returns the operationID for an operationName
	 *
	 * @param name - the name we want to have the id for
	 * @returns - the id or undefined if not found
	 */
	public getIDForOperationName(name: string): OperationIDs | undefined {
		switch (name) {
			case "asnGetOfflineJournal":
				return OperationIDs.OPID_asnGetOfflineJournal;
			case "asnGetJournalEntriesV2":
				return OperationIDs.OPID_asnGetJournalEntriesV2;
			case "asnUpdateCallAndJournalContactAndNumber":
				return OperationIDs.OPID_asnUpdateCallAndJournalContactAndNumber;
			case "asnUpdateCallLocalContact":
				return OperationIDs.OPID_asnUpdateCallLocalContact;
			case "asnUpdateJournalMemo":
				return OperationIDs.OPID_asnUpdateJournalMemo;
			case "asnUpdateJournalProject":
				return OperationIDs.OPID_asnUpdateJournalProject;
			case "asnUpdateJournalReadFlag":
				return OperationIDs.OPID_asnUpdateJournalReadFlag;
			case "asnUpdateJournalSubject":
				return OperationIDs.OPID_asnUpdateJournalSubject;
			case "asnGetJournalEntriesCountV2":
				return OperationIDs.OPID_asnGetJournalEntriesCountV2;
			case "asnJournalEntryGet":
				return OperationIDs.OPID_asnJournalEntryGet;
			case "asnJournalEntryChanged":
				return OperationIDs.OPID_asnJournalEntryChanged;
			case "asnJournalEntryListChanged":
				return OperationIDs.OPID_asnJournalEntryListChanged;
			case "asnJournalSubscribeEvents":
				return OperationIDs.OPID_asnJournalSubscribeEvents;
			case "asnJournalGetSettings":
				return OperationIDs.OPID_asnJournalGetSettings;
			case "asnUpdateJournal":
				return OperationIDs.OPID_asnUpdateJournal;
			case "asnDeleteJournalEntries":
				return OperationIDs.OPID_asnDeleteJournalEntries;
			case "asnMarkAllJournalEntriesAsRead":
				return OperationIDs.OPID_asnMarkAllJournalEntriesAsRead;
			default:
				return undefined;
		}
	}

	// [PrintTSROSEConstructor]
	/**
	 * Constructs the invoke and oninvoke object targeting all the ROSE related parts.
	 *
	 * @param transport - The transport is the connection to the other side. It takes care of delivering the invoke
	 * to us as well as to send invokes and events to the other side. It also holds the logger.
	 * @param handleEvents - Set this to true if you want to receive events or false if the stub should cached them
	 * until you call dispatchEvents();
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public constructor(transport: IASN1Transport, handleEvents: boolean, handler?: Partial<IENetUC_JournalROSE_Handler>) {
		super(transport, handleEvents);

		this.logFilter = [];

		if (handler)
			this.setHandler(handler);
	}

	// [PrintTSROSESetHandler]
	/**
	 * Sets the handler and registers the operations with it
	 *
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public setHandler(handler: Partial<IENetUC_JournalROSE_Handler>): void {
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetOfflineJournal, "asnGetOfflineJournal");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetJournalEntriesV2, "asnGetJournalEntriesV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnUpdateCallAndJournalContactAndNumber, "asnUpdateCallAndJournalContactAndNumber");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnUpdateCallLocalContact, "asnUpdateCallLocalContact");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnUpdateJournalMemo, "asnUpdateJournalMemo");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnUpdateJournalProject, "asnUpdateJournalProject");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnUpdateJournalReadFlag, "asnUpdateJournalReadFlag");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnUpdateJournalSubject, "asnUpdateJournalSubject");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetJournalEntriesCountV2, "asnGetJournalEntriesCountV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnJournalEntryGet, "asnJournalEntryGet");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnJournalEntryChanged, "asnJournalEntryChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnJournalEntryListChanged, "asnJournalEntryListChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnJournalSubscribeEvents, "asnJournalSubscribeEvents");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnJournalGetSettings, "asnJournalGetSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnUpdateJournal, "asnUpdateJournal");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnDeleteJournalEntries, "asnDeleteJournalEntries");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMarkAllJournalEntriesAsRead, "asnMarkAllJournalEntriesAsRead");
		this.transport.registerModuleVersion("ENetUC_Journal", 8, 0);
	}

	// [PrintTSROSEInvokeMethods]

	// [PrintTSROSEInvokeMethod]
	/**
	 * Fetch and optionally delete offline journal entries.
	 * The UCServer saves journal entries of missed calls additionally in an offline database, if the owner of the line
	 * where the call was happening was not logged into the UCServer.
	 * With this function it is possible to read (and delete) such entries.
	 *
	 * @param argument - An AsnGetOfflineJournalArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetOfflineJournalResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetOfflineJournal(argument: ENetUC_Journal.AsnGetOfflineJournalArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnGetOfflineJournalResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnGetOfflineJournalResult, OperationIDs.OPID_asnGetOfflineJournal, "asnGetOfflineJournal", Converter.AsnGetOfflineJournalArgument_Converter, Converter.AsnGetOfflineJournalResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Search for journal entries of the users conversations.
	 * asnGetJournalEntries makes it possible to search in the journal database of the user. The search is limited to the journal entries of the logged in user himself (public and private)
	 * and to the journal entries of users where permissions are granted for the logged in user.
	 *
	 * With AsnGetJournalEntriesV2Argument.findOptions it is possible to give more search criterias.
	 *
	 * @param argument - An AsnGetJournalEntriesV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetJournalEntriesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetJournalEntriesV2(argument: ENetUC_Journal.AsnGetJournalEntriesV2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnGetJournalEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnGetJournalEntriesResult, OperationIDs.OPID_asnGetJournalEntriesV2, "asnGetJournalEntriesV2", Converter.AsnGetJournalEntriesV2Argument_Converter, Converter.AsnGetJournalEntriesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Update the contact information of a current active call or a journal entry.
	 * A Client can update the contact information for a call. This function updates the information is currently active or, if already disconnected, the corresponding journal entry.
	 *
	 * If neither the active call was found nor the journal entry, an error will be returned.
	 *
	 * @param argument - An AsnUpdateCallAndJournalContactAndNumberArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnUpdateCallAndJournalContactAndNumberResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnUpdateCallAndJournalContactAndNumber(argument: ENetUC_Journal.AsnUpdateCallAndJournalContactAndNumberArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnUpdateCallAndJournalContactAndNumberResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnUpdateCallAndJournalContactAndNumberResult, OperationIDs.OPID_asnUpdateCallAndJournalContactAndNumber, "asnUpdateCallAndJournalContactAndNumber", Converter.AsnUpdateCallAndJournalContactAndNumberArgument_Converter, Converter.AsnUpdateCallAndJournalContactAndNumberResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Update Journal memo text
	 * A client can update a memo text of a journal entry without transferring the whole journal entry.
	 *
	 * @param argument - An AsnUpdateJournalMemoArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnUpdateJournalMemoResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnUpdateJournalMemo(argument: ENetUC_Journal.AsnUpdateJournalMemoArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnUpdateJournalMemoResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnUpdateJournalMemoResult, OperationIDs.OPID_asnUpdateJournalMemo, "asnUpdateJournalMemo", Converter.AsnUpdateJournalMemoArgument_Converter, Converter.AsnUpdateJournalMemoResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Change the project information of a journal entry
	 * A client can change the project information\/rules of an journal entry independently of the other journal entry data.
	 *
	 * @param argument - An AsnUpdateJournalProjectArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnUpdateJournalProjectResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnUpdateJournalProject(argument: ENetUC_Journal.AsnUpdateJournalProjectArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnUpdateJournalProjectResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnUpdateJournalProjectResult, OperationIDs.OPID_asnUpdateJournalProject, "asnUpdateJournalProject", Converter.AsnUpdateJournalProjectArgument_Converter, Converter.AsnUpdateJournalProjectResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Set the 'read' flag of journal entries
	 * A Client can change the 'read' flag of journal entries in the database independently of the other fields of the entries.
	 *
	 * @param argument - An AsnUpdateJournalReadFlagArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnUpdateJournalReadFlagResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnUpdateJournalReadFlag(argument: ENetUC_Journal.AsnUpdateJournalReadFlagArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnUpdateJournalReadFlagResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnUpdateJournalReadFlagResult, OperationIDs.OPID_asnUpdateJournalReadFlag, "asnUpdateJournalReadFlag", Converter.AsnUpdateJournalReadFlagArgument_Converter, Converter.AsnUpdateJournalReadFlagResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Change the subject text of a journal entry.
	 * A client can change the subject text of a journal entry independently of the other fields.
	 *
	 * @param argument - An AsnUpdateJournalSubjectArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnUpdateJournalSubjectResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnUpdateJournalSubject(argument: ENetUC_Journal.AsnUpdateJournalSubjectArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnUpdateJournalSubjectResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnUpdateJournalSubjectResult, OperationIDs.OPID_asnUpdateJournalSubject, "asnUpdateJournalSubject", Converter.AsnUpdateJournalSubjectArgument_Converter, Converter.AsnUpdateJournalSubjectResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Count journal entries in the database ang get the result.
	 * A client can get the count of journal entries from the server in the database for a given filter named 'findOptions' in the argument.
	 *
	 * This can be used for displaying the count of such journal entries without transferring a lot of journal data via the network.
	 * Popups or pins with the count of unread entries are examples for this.
	 *
	 * @param argument - An AsnGetJournalEntriesCountV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetJournalEntriesCountResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetJournalEntriesCountV2(argument: ENetUC_Journal.AsnGetJournalEntriesCountV2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnGetJournalEntriesCountResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnGetJournalEntriesCountResult, OperationIDs.OPID_asnGetJournalEntriesCountV2, "asnGetJournalEntriesCountV2", Converter.AsnGetJournalEntriesCountV2Argument_Converter, Converter.AsnGetJournalEntriesCountResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Get the journal entryof a call from the server.
	 * A client can retrieve a journal entry from a server by its connection id. The entry can be from the database (if the call was finished earlier), from the pending
	 * write list (when the call was finished, but not yet written to the database) or if the call is still ongoing will be generated from its CallInformation data.
	 *
	 * @param argument - An AsnJournalEntryGetArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnJournalEntryGetResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnJournalEntryGet(argument: ENetUC_Journal.AsnJournalEntryGetArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnJournalEntryGetResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnJournalEntryGetResult, OperationIDs.OPID_asnJournalEntryGet, "asnJournalEntryGet", Converter.AsnJournalEntryGetArgument_Converter, Converter.AsnJournalEntryGetResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Subscribe for events of journal database changes
	 * Clients can subscribe for events from the journal database when changes occure.&lt;br \/&gt;
	 * The server will then send events if there were entries added, deleted or changed.&lt;br \/&gt;
	 * With the subscription, the client can set a more detailed description, which entries it is interested in the direct result
	 * of the call. It is possible to set a last known transaction id to start from, the maximum number of entries to reply or if
	 * the client is only interested in the users own journal entries or additional of the groups the user is in (and is allowed to see the journal entries).&lt;br \/&gt;
	 * &lt;br \/&gt;
	 * To unsubscribe from the jornal events, call this function with bReceiveJournalEvents set to false. This will stop the server to send events.
	 *
	 * @param argument - An AsnJournalSubscribeEventsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnJournalSubscribeEventsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnJournalSubscribeEvents(argument: ENetUC_Journal.AsnJournalSubscribeEventsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnJournalSubscribeEventsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnJournalSubscribeEventsResult, OperationIDs.OPID_asnJournalSubscribeEvents, "asnJournalSubscribeEvents", Converter.AsnJournalSubscribeEventsArgument_Converter, Converter.AsnJournalSubscribeEventsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Get the current Journal settings from the server
	 * A client can get the current journal settings, in particular the privacy settings, which describes the handling of private calls on the server.
	 *
	 * @param argument - An AsnJournalGetSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnJournalGetSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnJournalGetSettings(argument: ENetUC_Journal.AsnJournalGetSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnJournalGetSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnJournalGetSettingsResult, OperationIDs.OPID_asnJournalGetSettings, "asnJournalGetSettings", Converter.AsnJournalGetSettingsArgument_Converter, Converter.AsnJournalGetSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Delete journal entries form the database.
	 * Depending on the persmissions, a client can delete journal entries of the user or from the groups. If the call fails, AsnRequestError will be used instead of the result.
	 *
	 * @param argument - An AsnDeleteJournalEntriesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnDeleteJournalEntriesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnDeleteJournalEntries(argument: ENetUC_Journal.AsnDeleteJournalEntriesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnDeleteJournalEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnDeleteJournalEntriesResult, OperationIDs.OPID_asnDeleteJournalEntries, "asnDeleteJournalEntries", Converter.AsnDeleteJournalEntriesArgument_Converter, Converter.AsnDeleteJournalEntriesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Mark all journal entries opf the current user as 'read'.
	 * To make it a client simpler, this function marks all journal entries of the current user as 'read' in the database.
	 *
	 * @param argument - An AsnMarkAllJournalEntriesAsReadArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMarkAllJournalEntriesAsReadResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMarkAllJournalEntriesAsRead(argument: ENetUC_Journal.AsnMarkAllJournalEntriesAsReadArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnMarkAllJournalEntriesAsReadResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Journal.AsnMarkAllJournalEntriesAsReadResult, OperationIDs.OPID_asnMarkAllJournalEntriesAsRead, "asnMarkAllJournalEntriesAsRead", Converter.AsnMarkAllJournalEntriesAsReadArgument_Converter, Converter.AsnMarkAllJournalEntriesAsReadResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Update the contact data of the local contact of a journal entry (\"Mandantenkontakt\").
	 * A client can search and update the called contact of a call (\"Mandanten\").
	 *
	 * @param argument - An AsnUpdateCallLocalContactArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnUpdateCallLocalContact(argument: ENetUC_Journal.AsnUpdateCallLocalContactArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnUpdateCallLocalContact, "asnUpdateCallLocalContact", Converter.AsnUpdateCallLocalContactArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Journal update event from the server.
	 *
	 * @param argument - An AsnJournalEntryChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnJournalEntryChanged(argument: ENetUC_Journal.AsnJournalEntryChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnJournalEntryChanged, "asnJournalEntryChanged", Converter.AsnJournalEntryChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Event from the server if journal entries where changed (new version of asnJournalEntryChanged, which only supports a single entry)
	 *
	 * @param argument - An AsnJournalEntryChangedListArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnJournalEntryListChanged(argument: ENetUC_Journal.AsnJournalEntryChangedListArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnJournalEntryListChanged, "asnJournalEntryListChanged", Converter.AsnJournalEntryChangedListArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Event sent to the server to update journal entries ansynchronously. The Result will be received from the server as asnJournalEntryChanged event.
	 *
	 * @param argument - An AsnUpdateJournalArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnUpdateJournal(argument: ENetUC_Journal.AsnUpdateJournalArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnUpdateJournal, "asnUpdateJournal", Converter.AsnUpdateJournalArgument_Converter, invokeContext);
	}

	// [PrintTSROSEOnInvokeswitchCase]
	/**
	 * This is the central onInvoke method that is called whenever a method of this module is called.
	 * Based on the operationID we step into the decoding of the method argument and call the method in the handler.
	 * The result is then again encoded and send to the other side.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the metho in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled, ROSEResult for the invoke result, ROSEError for an error or undefined if an event was called
	 */
	public async onInvoke(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_JournalROSE_Handler): Promise<ROSEReject | ROSEResult | ROSEError | undefined> {
		switch (invoke.operationID) {
			case OperationIDs.OPID_asnGetOfflineJournal:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetOfflineJournal, ENetUC_Journal.AsnGetOfflineJournalArgument, Converter.AsnGetOfflineJournalArgument_Converter, Converter.AsnGetOfflineJournalResult_Converter, handler, handler.onInvoke_asnGetOfflineJournal, invokeContext);
			case OperationIDs.OPID_asnGetJournalEntriesV2:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetJournalEntriesV2, ENetUC_Journal.AsnGetJournalEntriesV2Argument, Converter.AsnGetJournalEntriesV2Argument_Converter, Converter.AsnGetJournalEntriesResult_Converter, handler, handler.onInvoke_asnGetJournalEntriesV2, invokeContext);
			case OperationIDs.OPID_asnUpdateCallAndJournalContactAndNumber:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnUpdateCallAndJournalContactAndNumber, ENetUC_Journal.AsnUpdateCallAndJournalContactAndNumberArgument, Converter.AsnUpdateCallAndJournalContactAndNumberArgument_Converter, Converter.AsnUpdateCallAndJournalContactAndNumberResult_Converter, handler, handler.onInvoke_asnUpdateCallAndJournalContactAndNumber, invokeContext);
			case OperationIDs.OPID_asnUpdateJournalMemo:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnUpdateJournalMemo, ENetUC_Journal.AsnUpdateJournalMemoArgument, Converter.AsnUpdateJournalMemoArgument_Converter, Converter.AsnUpdateJournalMemoResult_Converter, handler, handler.onInvoke_asnUpdateJournalMemo, invokeContext);
			case OperationIDs.OPID_asnUpdateJournalProject:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnUpdateJournalProject, ENetUC_Journal.AsnUpdateJournalProjectArgument, Converter.AsnUpdateJournalProjectArgument_Converter, Converter.AsnUpdateJournalProjectResult_Converter, handler, handler.onInvoke_asnUpdateJournalProject, invokeContext);
			case OperationIDs.OPID_asnUpdateJournalReadFlag:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnUpdateJournalReadFlag, ENetUC_Journal.AsnUpdateJournalReadFlagArgument, Converter.AsnUpdateJournalReadFlagArgument_Converter, Converter.AsnUpdateJournalReadFlagResult_Converter, handler, handler.onInvoke_asnUpdateJournalReadFlag, invokeContext);
			case OperationIDs.OPID_asnUpdateJournalSubject:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnUpdateJournalSubject, ENetUC_Journal.AsnUpdateJournalSubjectArgument, Converter.AsnUpdateJournalSubjectArgument_Converter, Converter.AsnUpdateJournalSubjectResult_Converter, handler, handler.onInvoke_asnUpdateJournalSubject, invokeContext);
			case OperationIDs.OPID_asnGetJournalEntriesCountV2:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetJournalEntriesCountV2, ENetUC_Journal.AsnGetJournalEntriesCountV2Argument, Converter.AsnGetJournalEntriesCountV2Argument_Converter, Converter.AsnGetJournalEntriesCountResult_Converter, handler, handler.onInvoke_asnGetJournalEntriesCountV2, invokeContext);
			case OperationIDs.OPID_asnJournalEntryGet:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnJournalEntryGet, ENetUC_Journal.AsnJournalEntryGetArgument, Converter.AsnJournalEntryGetArgument_Converter, Converter.AsnJournalEntryGetResult_Converter, handler, handler.onInvoke_asnJournalEntryGet, invokeContext);
			case OperationIDs.OPID_asnJournalSubscribeEvents:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnJournalSubscribeEvents, ENetUC_Journal.AsnJournalSubscribeEventsArgument, Converter.AsnJournalSubscribeEventsArgument_Converter, Converter.AsnJournalSubscribeEventsResult_Converter, handler, handler.onInvoke_asnJournalSubscribeEvents, invokeContext);
			case OperationIDs.OPID_asnJournalGetSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnJournalGetSettings, ENetUC_Journal.AsnJournalGetSettingsArgument, Converter.AsnJournalGetSettingsArgument_Converter, Converter.AsnJournalGetSettingsResult_Converter, handler, handler.onInvoke_asnJournalGetSettings, invokeContext);
			case OperationIDs.OPID_asnDeleteJournalEntries:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnDeleteJournalEntries, ENetUC_Journal.AsnDeleteJournalEntriesArgument, Converter.AsnDeleteJournalEntriesArgument_Converter, Converter.AsnDeleteJournalEntriesResult_Converter, handler, handler.onInvoke_asnDeleteJournalEntries, invokeContext);
			case OperationIDs.OPID_asnMarkAllJournalEntriesAsRead:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMarkAllJournalEntriesAsRead, ENetUC_Journal.AsnMarkAllJournalEntriesAsReadArgument, Converter.AsnMarkAllJournalEntriesAsReadArgument_Converter, Converter.AsnMarkAllJournalEntriesAsReadResult_Converter, handler, handler.onInvoke_asnMarkAllJournalEntriesAsRead, invokeContext);
			case OperationIDs.OPID_asnUpdateCallLocalContact:
			case OperationIDs.OPID_asnJournalEntryChanged:
			case OperationIDs.OPID_asnJournalEntryListChanged:
			case OperationIDs.OPID_asnUpdateJournal:
				return this.onEvent(invoke, invokeContext, handler);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_JournalROSE`);
		}
	}

	// [PrintTSROSEOnEventSwitchCase]
	/**
	 * This is the onEvent method that is called whenever an event is called in this module.
	 * It is called from the onInvoke in case of an event is being called.
	 * Depending on the handleEvents flag the event is either handled or cached.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the method in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled or undefined
	 */
	private async onEvent(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_JournalROSE_Handler): Promise<ROSEReject | undefined> {
		// If the class says do not handle events and the override flag in the invokeContext has not been set, add the event to the que, otherwise we dispatch it
		if (!this.handleEvents && !invokeContext?.handleEvent) {
			this.transport.log(ELogSeverity.debug, "Adding event to queue", "onEvent", this, { operationName: invoke.operationName, operationID: invoke.operationID });
			this.cachedEvents.push({ invoke, invokeContext, handler });
			return;
		}

		switch (invoke.operationID) {
			case OperationIDs.OPID_asnUpdateCallLocalContact:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnUpdateCallLocalContact, ENetUC_Journal.AsnUpdateCallLocalContactArgument, Converter.AsnUpdateCallLocalContactArgument_Converter, handler, handler.onEvent_asnUpdateCallLocalContact, invokeContext);
			case OperationIDs.OPID_asnJournalEntryChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnJournalEntryChanged, ENetUC_Journal.AsnJournalEntryChangedArgument, Converter.AsnJournalEntryChangedArgument_Converter, handler, handler.onEvent_asnJournalEntryChanged, invokeContext);
			case OperationIDs.OPID_asnJournalEntryListChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnJournalEntryListChanged, ENetUC_Journal.AsnJournalEntryChangedListArgument, Converter.AsnJournalEntryChangedListArgument_Converter, handler, handler.onEvent_asnJournalEntryListChanged, invokeContext);
			case OperationIDs.OPID_asnUpdateJournal:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnUpdateJournal, ENetUC_Journal.AsnUpdateJournalArgument, Converter.AsnUpdateJournalArgument_Converter, handler, handler.onEvent_asnUpdateJournal, invokeContext);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_JournalROSE`);
		}
	}
}
