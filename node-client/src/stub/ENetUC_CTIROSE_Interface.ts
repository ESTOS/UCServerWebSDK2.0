// [PrintTSROSEInterfaceCode]
// [PrintTSROSEHeader]
/**
 * ENetUC_CTIROSE_Interface
 * "UC-Server-Access-Protocol-CTI" ASN.1 interfaces.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImport]
import { IReceiveInvokeContext, AsnInvokeProblem } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_CTI from "./ENetUC_CTI";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_SIPCTI from "./ENetUC_Common_SIPCTI";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_CTIROSEInterface";
export const MODULE_LASTCHANGE = "2024-06-19T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 20240619;
export const MODULE_VERSION = "8.0.20240619";

// [PrintTSROSEInterface]
export interface IENetUC_CTIROSE {
	invoke_asnCtiEnumPhoneLines(argument: ENetUC_CTI.AsnCtiEnumPhoneLinesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiEnumPhoneLinesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiSnapshotPhoneLine(argument: ENetUC_CTI.AsnCtiSnapshotPhoneLineArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiSnapshotPhoneLineResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiLineMonitorStart(argument: ENetUC_CTI.AsnCtiLineMonitorStartArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiLineMonitorStartResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiLineMonitorStop(argument: ENetUC_CTI.AsnCtiLineMonitorStopArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiLineMonitorStopResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiLineSetDoNotDisturb(argument: ENetUC_CTI.AsnCtiLineSetDoNotDisturbArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiLineSetDoNotDisturbResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiLineSetRemoteOffice(argument: ENetUC_CTI.AsnCtiLineSetRemoteOfficeArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiLineSetRemoteOfficeResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnCtiNotifyLineInfoChanged(argument: ENetUC_CTI.AsnCtiNotifyLineInfoChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyLineDoNotDisturbChanged(argument: ENetUC_CTI.AsnCtiNotifyLineDoNotDisturbChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyLineRemoteOfficeChanged(argument: ENetUC_CTI.AsnCtiNotifyLineRemoteOfficeChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyMonitorStopped(argument: ENetUC_CTI.AsnCtiNotifyMonitorStoppedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyLineSortOrderChanged(argument: ENetUC_CTI.AsnCtiNotifyLineSortOrderChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyLineForwardingChanged(argument: ENetUC_CTI.AsnCtiNotifyLineForwardingChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyLineCallInformationChanged(argument: ENetUC_CTI.AsnCtiNotifyLineCallInformationChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyLineAddRemove(argument: ENetUC_CTI.AsnCtiNotifyLineAddRemoveArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyMakeCallResult(argument: ENetUC_CTI.AsnCtiNotifyMakeCallResultArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyConferenceCreated(argument: ENetUC_CTI.AsnCtiNotifyConferenceCreatedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyConferenceDestroyed(argument: ENetUC_CTI.AsnCtiNotifyConferenceDestroyedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyConferencePartyAdded(argument: ENetUC_CTI.AsnCtiNotifyConferencePartyAddedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyConferencePartyRemoved(argument: ENetUC_CTI.AsnCtiNotifyConferencePartyRemovedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyLineCallFeaturesChanged(argument: ENetUC_CTI.AsnCtiNotifyLineCallFeaturesChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnCtiNotifyLineProjectSettingsChanged(argument: ENetUC_CTI.AsnCtiNotifyLineProjectSettingsChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	invoke_asnCtiMakeCall(argument: ENetUC_CTI.AsnCtiMakeCallArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiMakeCallResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiDropCall(argument: ENetUC_CTI.AsnCtiDropCallArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiDropCallResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiLineDropCall(argument: ENetUC_CTI.AsnCtiLineDropCallArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiLineDropCallResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiAnswerCall(argument: ENetUC_CTI.AsnCtiAnswerCallArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiAnswerCallResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiRedirectCall(argument: ENetUC_CTI.AsnCtiRedirectCallArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiRedirectCallResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiPickupCall(argument: ENetUC_CTI.AsnCtiPickupCallArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiPickupCallResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiStartCallRecording(argument: ENetUC_CTI.AsnCtiStartCallRecordingArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiStartCallRecordingResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiStopCallRecording(argument: ENetUC_CTI.AsnCtiStopCallRecordingArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiStopCallRecordingResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiSetCallData(argument: ENetUC_CTI.AsnCtiSetCallDataArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiSetCallDataResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiMergeCalls(argument: ENetUC_CTI.AsnCtiMergeCallsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiMergeCallsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiSwapHold(argument: ENetUC_CTI.AsnCtiSwapHoldArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiSwapHoldResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiHold(argument: ENetUC_CTI.AsnCtiHoldArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiHoldResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiSetForward(argument: ENetUC_CTI.AsnCtiSetForwardArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiSetForwardResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiRemoveForward(argument: ENetUC_CTI.AsnCtiRemoveForwardArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiRemoveForwardResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiDialDigits(argument: ENetUC_CTI.AsnCtiDialDigitsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiDialDigitsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiCompleteCall(argument: ENetUC_CTI.AsnCtiCompleteCallArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiCompleteCallResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnCtiConference(argument: ENetUC_CTI.AsnCtiConferenceArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_CTI.AsnCtiConferenceResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
}

// [PrintTSROSEHandlerInterface]
// Contains all invokes of the interface (normally the server side)
export interface IENetUC_CTIROSE_Invoke_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onInvoke_asnCtiEnumPhoneLines(argument: ENetUC_CTI.AsnCtiEnumPhoneLinesArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiEnumPhoneLinesResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiSnapshotPhoneLine(argument: ENetUC_CTI.AsnCtiSnapshotPhoneLineArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiSnapshotPhoneLineResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiLineMonitorStart(argument: ENetUC_CTI.AsnCtiLineMonitorStartArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiLineMonitorStartResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiLineMonitorStop(argument: ENetUC_CTI.AsnCtiLineMonitorStopArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiLineMonitorStopResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiLineSetDoNotDisturb(argument: ENetUC_CTI.AsnCtiLineSetDoNotDisturbArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiLineSetDoNotDisturbResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiLineSetRemoteOffice(argument: ENetUC_CTI.AsnCtiLineSetRemoteOfficeArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiLineSetRemoteOfficeResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiMakeCall(argument: ENetUC_CTI.AsnCtiMakeCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiMakeCallResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiDropCall(argument: ENetUC_CTI.AsnCtiDropCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiDropCallResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiLineDropCall(argument: ENetUC_CTI.AsnCtiLineDropCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiLineDropCallResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiAnswerCall(argument: ENetUC_CTI.AsnCtiAnswerCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiAnswerCallResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiRedirectCall(argument: ENetUC_CTI.AsnCtiRedirectCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiRedirectCallResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiPickupCall(argument: ENetUC_CTI.AsnCtiPickupCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiPickupCallResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiStartCallRecording(argument: ENetUC_CTI.AsnCtiStartCallRecordingArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiStartCallRecordingResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiStopCallRecording(argument: ENetUC_CTI.AsnCtiStopCallRecordingArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiStopCallRecordingResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiSetCallData(argument: ENetUC_CTI.AsnCtiSetCallDataArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiSetCallDataResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiMergeCalls(argument: ENetUC_CTI.AsnCtiMergeCallsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiMergeCallsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiSwapHold(argument: ENetUC_CTI.AsnCtiSwapHoldArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiSwapHoldResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiHold(argument: ENetUC_CTI.AsnCtiHoldArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiHoldResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiSetForward(argument: ENetUC_CTI.AsnCtiSetForwardArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiSetForwardResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiRemoveForward(argument: ENetUC_CTI.AsnCtiRemoveForwardArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiRemoveForwardResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiDialDigits(argument: ENetUC_CTI.AsnCtiDialDigitsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiDialDigitsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiCompleteCall(argument: ENetUC_CTI.AsnCtiCompleteCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiCompleteCallResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnCtiConference(argument: ENetUC_CTI.AsnCtiConferenceArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiConferenceResult | ENetUC_Common.AsnRequestError | undefined>;
}

// Contains all events of the interface (normally the client side)
export interface IENetUC_CTIROSE_Event_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyLineInfoChanged(argument: ENetUC_CTI.AsnCtiNotifyLineInfoChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyLineDoNotDisturbChanged(argument: ENetUC_CTI.AsnCtiNotifyLineDoNotDisturbChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyLineRemoteOfficeChanged(argument: ENetUC_CTI.AsnCtiNotifyLineRemoteOfficeChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyMonitorStopped(argument: ENetUC_CTI.AsnCtiNotifyMonitorStoppedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyLineSortOrderChanged(argument: ENetUC_CTI.AsnCtiNotifyLineSortOrderChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyLineForwardingChanged(argument: ENetUC_CTI.AsnCtiNotifyLineForwardingChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyLineCallInformationChanged(argument: ENetUC_CTI.AsnCtiNotifyLineCallInformationChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyLineAddRemove(argument: ENetUC_CTI.AsnCtiNotifyLineAddRemoveArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyMakeCallResult(argument: ENetUC_CTI.AsnCtiNotifyMakeCallResultArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyConferenceCreated(argument: ENetUC_CTI.AsnCtiNotifyConferenceCreatedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyConferenceDestroyed(argument: ENetUC_CTI.AsnCtiNotifyConferenceDestroyedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyConferencePartyAdded(argument: ENetUC_CTI.AsnCtiNotifyConferencePartyAddedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyConferencePartyRemoved(argument: ENetUC_CTI.AsnCtiNotifyConferencePartyRemovedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyLineCallFeaturesChanged(argument: ENetUC_CTI.AsnCtiNotifyLineCallFeaturesChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnCtiNotifyLineProjectSettingsChanged(argument: ENetUC_CTI.AsnCtiNotifyLineProjectSettingsChangedArgument, invokeContext: IReceiveInvokeContext): void;
}

// Contains all invokes and events of the interface
export type IENetUC_CTIROSE_Handler = IENetUC_CTIROSE_Invoke_Handler & IENetUC_CTIROSE_Event_Handler;

// [PrintTSROSEServerCopyPasteInterface]
/* Copy paste code for the import statement
import { IReceiveInvokeContext } from "./TSROSEBase";
import * as ENetUC_Common from "./ENetUC_Common";
import { ENetUC_CTI } from "./ENetUC_CTI";
*/

/**
 * Allows to set the log context for an invoke.
 * This method is called in advanced of methods handled inside this handler
 * The idea is to implement a async local storage based on the provided data from the argument or invokeContext
 *
 * @param argument - the snacc rose argument
 * @param invokeContext - the invoke context
 */
/*
public setLogContext(argument: unknown, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Retrieve line information from the server.
 *
 * To get information about the lines a user has access to on the server.&lt;br \/&gt;
 * There are four possible line types, which can be requested:
 * - userOwnLines: Own lines which the logged in user is owner of.
 * - userMonitorLines: Own lines plus the lines, the user has special access rights for.
 * - systemLocalLines: All lines that are local on the system.
 * - systemGlobalLines: All local lines plus all global known lines; for future use, current its the same as systemLocalLines.
 *
 * If attachChangeNotify is set to 1, the server will send asnCtiNotifyLineAddRemove events, if lines were added or removed for the given scope (or line type).
 *
 * The monitoring of the line lists can only be stopped by disconnecting from the server.
 *
 * @param argument - Arguments for asnCtiEnumPhoneLines.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiEnumPhoneLinesResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiEnumPhoneLines(argument: ENetUC_CTI.AsnCtiEnumPhoneLinesArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiEnumPhoneLinesResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Call this function to get the current status of a line.
 *
 * With asnCtiSnapshotPhoneLine a client can retrieve the current status of a line inclusive calls, forwardings, DnD and remote office states.&lt;br \/&gt;
 *
 * Attention: Do not poll with this function get changes of the line state. Use asnCtiLineMonitorStart instead, to be notified if something on the is changing.
 * asnCtiEnumPhoneLines is not necessary be called before asnCtiLineMonitorStart.
 *
 * @param argument - Argument for asnCtiSnapshotPhoneLine
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiSnapshotPhoneLineResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiSnapshotPhoneLine(argument: ENetUC_CTI.AsnCtiSnapshotPhoneLineArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiSnapshotPhoneLineResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Gets the current state of a line and attach for call and change notifies on this line.
 *
 * In order receive events about calls and line state changes a client can call asnCtiLineMonitorStart. The result will contain a current snapshot of the line, the calls and additional information.
 * To stop these events call asnCtiLineMonitorStop.
 *
 * Attention: To get this information just once without further events, call asnCtiSnapshotPhoneLine instead.
 *
 * @param argument - Arguments for asnCtiLineMonitorStart
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiLineMonitorStartResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiLineMonitorStart(argument: ENetUC_CTI.AsnCtiLineMonitorStartArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiLineMonitorStartResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Stops the call and state change events on a line.
 *
 * A client can stop events for state changes and calls on a line with a call to asnCtiLineMonitorStop with the corresponding monitor cross reference ID.
 *
 * @param argument - Arguments for asnCtiLineMonitorStop
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiLineMonitorStopResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiLineMonitorStop(argument: ENetUC_CTI.AsnCtiLineMonitorStopArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiLineMonitorStopResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Set or remove \"Do not Disturb\" feature on the a line.
 *
 * Most PBX support \"Do not Disturb\" (DnD) on phone lines, so the user can prevent being disturbed by phone calls by setting this feature on his phone line.&lt;br \/&gt;
 * A Client can call this function to set or remove this feature from the line. See AsnCtiLineSetDoNotDisturbArgument for the arguments needed.
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiLineSetDoNotDisturbResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiLineSetDoNotDisturb(argument: ENetUC_CTI.AsnCtiLineSetDoNotDisturbArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiLineSetDoNotDisturbResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Changes the state of the \"Remote Office\" feature on a line.
 *
 * \"Remote office\" is a feature, where a user can virtually attach his mobile phone to his line on the PBX. So every incoming call to the line on the PBX will be automatically forwarded to the mobile phone.
 * Additionally the outgoing calls will be forwarded to the mobile too, if either the PBX itself supports this feature or the UCServer can emulate it.
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiLineSetRemoteOfficeResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiLineSetRemoteOffice(argument: ENetUC_CTI.AsnCtiLineSetRemoteOfficeArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiLineSetRemoteOfficeResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Initiates a new call on a line.
 *
 * In most cases the operation is simple. Just provide the line number (e.g. '+49815136856177') to dial from and the number to dial to, let the server format the dialing number.
 * This is it.&lt;br \/&gt;
 * It will get a bit more complex, if you want to use additional features like project\/pin rules, hide caller id, provide the contact data and so on.
 * In this cases you have to add AsnCtiNewCallParams to your arguments. See AsnCtiNewCallParams for more details.
 *
 * Remark: The result of this operation does not necessarily reflect, that a call has been dialed successfully. It just confirms the successful execution of the operation.
 * The corresponding result of the dial command itself (to the PBX for example) will be sent as an asnCtiNotifyMakeCallResult event.
 *
 * @param argument - Arguments for asnCtiMakeCall
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiMakeCallResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiMakeCall(argument: ENetUC_CTI.AsnCtiMakeCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiMakeCallResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Drop a call identified by its connection identifier.
 *
 * A call can be dropped by its connection identifier if it is necessary to identify the exact call, e.g. in a conference or one of the held calls on a line.
 * If you just want to drop the active call on a line you can call asnCtiLineDropCall instead.
 *
 * @param argument - Arguments for asnCtiDropCall.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiDropCallResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiDropCall(argument: ENetUC_CTI.AsnCtiDropCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiDropCallResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Drop the cative call on a line.
 *
 * To simply drop the active call on a line, call this operation.&lt;br \/&gt;
 * If there are more than one call on the line, it is recommended to call asnCtiDropCall and specify the exact call to drop by it connection identifier.
 *
 * @param argument - Arguments for asnCtiLineDropCall.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiLineDropCallResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiLineDropCall(argument: ENetUC_CTI.AsnCtiLineDropCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiLineDropCallResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Accept a call on a line.
 *
 * If a call is in state OFFERING (see EnumCallState, incoming call ringing) the call can be accepted with this operation.
 *
 * @param argument - Arguments for asnCtiAnswerCall
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiAnswerCallResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiAnswerCall(argument: ENetUC_CTI.AsnCtiAnswerCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiAnswerCallResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Redirect an incoming call to another line.
 *
 * To redirect an incoming, ringing call (call state OFFERING) to another line, execute this operation.
 * This operation works also for lines, where the user has corresponding access rights to.&lt;br \/&gt;
 * Additionally this operation can be executed on a contact of the favorite list where the caller has the access rights to control the lines of the contact.
 *
 * Remark: If you want to pickup a call (picking an offering call to an own line), use asnCtiPickupCall.
 *
 * @param argument - Arguments for asnCtiRedirectCall.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiRedirectCallResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiRedirectCall(argument: ENetUC_CTI.AsnCtiRedirectCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiRedirectCallResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Pickup a ringing call from another line on an own line.
 *
 * Getting an ringing call from another line to an own line execute this operation.&lt;br \/&gt;
 * Picking up calls requires an appropriate configuration (rights) on the PBX.
 * Thus it is recommended to use asnCtiRedirectCall if you are not aware if the configuration has been set properly.
 * Picking a call leads to a connected call on the extension picking the call while redirecting leads to an offering call on the new extension.
 *
 * @param argument - Arguments for asnCtiPickupCall.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiPickupCallResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiPickupCall(argument: ENetUC_CTI.AsnCtiPickupCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiPickupCallResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Start recording of a call.
 *
 * If the call recorder is configured on the server, calls can be recorded if the feature eCFEATURESTARTCALLRECORD is set on the call.&lt;br \/&gt;
 * If executed successfully, the server will created a conference with the connected party and the call recorder.
 * If the caller or called party disconnects, the conference will be terminated and the server will dispatch the recording (wav or mp3 file) to the initiator of the recording.
 *
 * @param argument - Arguments for asnCtiStartCallRecording.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiStartCallRecordingResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiStartCallRecording(argument: ENetUC_CTI.AsnCtiStartCallRecordingArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiStartCallRecordingResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Stop recording of a call.
 *
 * To stop recording a call without destroying the connection this operation is executed.
 * This will terminate the conference with the call recorder line without disconnecting the other calls.
 * To execute this operation successfully, the feature eCFEATURESTOPCALLRECORD must be set on the call.&lt;br \/&gt;
 * The record will be sent to the initiator of the recording.
 *
 * @param argument - Arguments for asnCtiStopCallRecording.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiStopCallRecordingResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiStopCallRecording(argument: ENetUC_CTI.AsnCtiStopCallRecordingArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiStopCallRecordingResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Add some data to the call which will be transferred to other clients.
 *
 * For some use cases it will be necessary to transfer business data attached to a call to other clients with the call, e.g. while transferring it.&lt;br \/&gt;
 * With this operation this data can be added to the call information of a call without setting the whole information structure again.&lt;br \/&gt;
 * This operation only executes successfully if the user is the line owner.&lt;br \/&gt;
 * [TODO: MORE DETAILS NEEDED! Especial for CallDataAnnouncement (ConnectionID unknown)]
 *
 * @param argument - Arguments for asnCtiSetCallData
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiSetCallDataResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiSetCallData(argument: ENetUC_CTI.AsnCtiSetCallDataArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiSetCallDataResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Merge two calls on a line together.
 *
 * It is possible to connect two parties with each other. It does not result in a conference, the line is not member of that call any longer after executing the function.
 * To execute this successfully, the connection identifier of the calls must be known and the calls must be in the call list of the same line (e.g. one active, one on hold).
 * Both calls must have the call feature eCFEATUREMERGECALLS set.
 *
 * @param argument - Arguments for asnCtiMergeCalls.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiMergeCallsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiMergeCalls(argument: ENetUC_CTI.AsnCtiMergeCallsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiMergeCallsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Swap puts the active call on hold and retrieves the hold call
 *
 * You can swap between a held call and an active call with this function.&lt;br \/&gt;
 * This operation needs two calls on the same line (one active, one held) to execute successfully.
 * Both calls must have the call feature eCFEATURESWAPHOLD set.
 *
 * @param argument - Arguments for asnCtiSwapHold.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiSwapHoldResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiSwapHold(argument: ENetUC_CTI.AsnCtiSwapHoldArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiSwapHoldResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Set the call on hold, so another another call in the same line will be possible to make.
 *
 * For some reasons it is possible to set a call on hold. This can be used to a call back to another line, setup a conference, set a transfer etc.&lt;br \/&gt;
 * A call on hold isn't disconnect, but the call partner cannot hear what is spoken while on hold and is waiting for further actions.
 *
 * @param argument - Arguments for asnCtiHold.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiHoldResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiHold(argument: ENetUC_CTI.AsnCtiHoldArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiHoldResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Set simple call forwards.
 *
 * Set a call forward on a line (optionally with conditions). Default is a unconditional forward from one line to another.&lt;br \/&gt;
 * To set multiple forwards on a line (if it is supported by the PBX system), call this function again on the same line.
 *
 * @param argument - Arguments for asnCtiSetForward.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiSetForwardResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiSetForward(argument: ENetUC_CTI.AsnCtiSetForwardArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiSetForwardResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Remove a forward from a line.
 *
 * This operation removes all forwards from a line&lt;br \/&gt;
 * To remove one forward form the list of forwards on the line, the optional parameters \"ForwardMode\" and \"ForwardDestination\" must be set to match exactly in the list.&lt;br \/&gt;
 * This information can be read from the current line information sent to the client by the event \"asnCtiNotifyLineInfoChanged\" or by calling asnCtiSnapshotPhoneLine.
 *
 * @param argument - Arguments for asnCtiRemoveForward.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiRemoveForwardResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiRemoveForward(argument: ENetUC_CTI.AsnCtiRemoveForwardArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiRemoveForwardResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Dial DTMF tones on an active call.
 *
 * For call menus or other use cases it is possible to generate dial tones on an active call.&lt;br \/&gt;
 * There are different digit modes possible: LINEDIGITMODE_DTMF, LINEDIGITMODE_DTMFEND and LINEDIGITMODE_PULSE
 *
 * @param argument - Arguments for asnCtiDialDigits.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiDialDigitsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiDialDigits(argument: ENetUC_CTI.AsnCtiDialDigitsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiDialDigitsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Set a automatic call back if the call was not accepted or busy.
 *
 * If a call was unsuccessful because the remote party was busy or the call was not answered, this operation sets the the complete call function of the PBX system to call back the caller automatically if the called party \/ line is free \/ back again.
 *
 * @param argument - Arguments for asnCtiCompleteCall.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiCompleteCallResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiCompleteCall(argument: ENetUC_CTI.AsnCtiCompleteCallArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiCompleteCallResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Initiate a conference call with two already existing calls of a line.
 *
 * To initiate a conference, setup two calls via a call back (asnCtiMakeCall =&gt; get this call establish =&gt; asnCtiMakeCall),
 * so you have one call on hold and one active. Now execute this operation with the two connection identifiers.
 * As result, you should now have a conference with 3 attendants (you and the other two call parties).
 *
 * @param argument - Arguments for asnCtiConference.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnCtiConferenceResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnCtiConference(argument: ENetUC_CTI.AsnCtiConferenceArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_CTI.AsnCtiConferenceResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Event from the server if a line changed its status or has been added or removed.
 * In order to get these events the line must be monitored with asnCtiLineMonitorStart.
 *
 * @param argument - Event arguments of asnCtiNotifyLineInfoChanged.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyLineInfoChanged(argument: ENetUC_CTI.AsnCtiNotifyLineInfoChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server if a line changed its DnD status.
 * In order to get these events the line must be monitored with asnCtiLineMonitorStart.
 *
 * @param argument - Event arguments of asnCtiNotifyLineDoNotDisturbChanged
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyLineDoNotDisturbChanged(argument: ENetUC_CTI.AsnCtiNotifyLineDoNotDisturbChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server if a line changed its remote office state.
 * In order to get these events the line must be monitored with asnCtiLineMonitorStart.
 *
 * @param argument - Event arguments of asnCtiNotifyLineRemoteOfficeChanged
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyLineRemoteOfficeChanged(argument: ENetUC_CTI.AsnCtiNotifyLineRemoteOfficeChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server that a monitoring point was closed due to a configuration change
 * In order to get these events the line must be monitored with asnCtiLineMonitorStart.
 * This event is send to the client if a monitor was closed due to a configuation change on the server
 * The client shall remove the monitor point with u8sMonitorCrossRefID on the client side.
 *
 * @param argument - Event arguments of asnCtiNotifyMonitorStopped
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyMonitorStopped(argument: ENetUC_CTI.AsnCtiNotifyMonitorStoppedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server that a monitoring point has changed position from the configurative view
 * In order to get these events the line must be monitored with asnCtiLineMonitorStart.
 * This event is send to the client if the sort order of the lines has changed (line added, config lines have swapped positions, (no event is dispatched if a line was removed))
 * This event is only dispatched for the userOwnLines (see AsnCtiEnumPhoneLinesArgument)
 *
 * @param argument - Event arguments of asnCtiNotifyLineSortOrderChanged
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyLineSortOrderChanged(argument: ENetUC_CTI.AsnCtiNotifyLineSortOrderChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server if a line changed its forwardings.
 * In order to get these events the line must be monitored with asnCtiLineMonitorStart.
 *
 * @param argument - Event arguments of asnCtiNotifyLineForwardingChanged
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyLineForwardingChanged(argument: ENetUC_CTI.AsnCtiNotifyLineForwardingChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server if a call changed its state.
 * In order to get this event the line must be monitored with asnCtiLineMonitorStart.
 *
 * Calls are changing their state and additional information during their live time. This event reflects the new status&lt;br \/&gt;
 *
 * @param argument - Event arguments of asnCtiNotifyLineCallInformationChanged.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyLineCallInformationChanged(argument: ENetUC_CTI.AsnCtiNotifyLineCallInformationChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server if asnCtiEnumPhoneLines was called to monitor the lines of the user.
 * In order to get this event the line must be monitored via asnCtiEnumPhoneLines.
 *
 * With asnCtiEnumPhoneLines the client defined, which sort of lines it wants to monitor.
 * If there are changes to the corresponding line list, this event will reflect the changes to the client.&lt;br \/&gt;
 *
 * @param argument - Event arguments of asnCtiNotifyLineAddRemove.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyLineAddRemove(argument: ENetUC_CTI.AsnCtiNotifyLineAddRemoveArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server with the result of an asynchronous make call operation on the server.
 * In order to get this event the client must have called asnCtiMakeCall first.
 *
 * Make call is a asynchronous process in the UCServer. So the final result will be send as an event from the server.
 * This event contains the result the PBX provided.&lt;br \/&gt;
 *
 * @param argument - Event arguments of asnCtiNotifyMakeCallResult
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyMakeCallResult(argument: ENetUC_CTI.AsnCtiNotifyMakeCallResultArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server if there is a conference established on a line.
 * In order to get these events the line must be monitored via asnCtiLineMonitorStart.
 *
 * This event will inform the client, if a conference was established and with whom.&lt;br \/&gt;
 * In this way, the client gets detailed information about the participants and the conference controller.&lt;br \/&gt;
 *
 * @param argument - Event arguments of asnCtiNotifyConferenceCreated
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyConferenceCreated(argument: ENetUC_CTI.AsnCtiNotifyConferenceCreatedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server if a conference is closed\/destroyed.
 * In order to get these events the line must be monitored via asnCtiLineMonitorStart.
 *
 * @param argument - Event arguments of asnCtiNotifyConferenceDestroyed
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyConferenceDestroyed(argument: ENetUC_CTI.AsnCtiNotifyConferenceDestroyedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server when a new participant was added to a conference.
 * In order to get these events the line must be monitored via asnCtiLineMonitorStart.
 *
 * @param argument - Event arguments of asnCtiNotifyConferencePartyAdded
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyConferencePartyAdded(argument: ENetUC_CTI.AsnCtiNotifyConferencePartyAddedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server when a conference participant was removed.
 * In order to get these events the line must be monitored via asnCtiLineMonitorStart.
 *
 * @param argument - Event arguments of asnCtiNotifyConferencePartyRemoved
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyConferencePartyRemoved(argument: ENetUC_CTI.AsnCtiNotifyConferencePartyRemovedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server when call features have changed.
 * In order to get these events the line must be monitored via asnCtiLineMonitorStart.
 *
 * If the state of a call changes or other events on a call happened its features are most likely change too.
 * Some changes does not change the call state itself, so there will be no call information change event for that call.
 * In this case asnCtiNotifyLineCallFeaturesChanged will be sent if only the call features have changed.
 *
 * @param argument - Event arguments of asnCtiNotifyLineCallFeaturesChanged.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyLineCallFeaturesChanged(argument: ENetUC_CTI.AsnCtiNotifyLineCallFeaturesChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server when the project settings or the location of a line has changed.
 * In order to get these events the line must be monitored via asnCtiLineMonitorStart.
 *
 * The project settings are part of the location settings of a line. If the location settings were changed, this event will be sent.
 *
 * @param argument - Event arguments for asnCtiNotifyLineProjectSettingsChanged
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnCtiNotifyLineProjectSettingsChanged(argument: ENetUC_CTI.AsnCtiNotifyLineProjectSettingsChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/
