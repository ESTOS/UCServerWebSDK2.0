// [PrintTSROSEHeader]
/**
 * ENetUC_MgmtROSE
 * "UC-Server-Access-Protocol-Management" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImports]
// Global imports
import { IENetUC_MgmtROSE, IENetUC_MgmtROSE_Handler } from "./ENetUC_MgmtROSE_Interface";
import { ROSEError, ROSEInvoke, ROSEReject, ROSEResult } from "./SNACCROSE";
import { AsnInvokeProblem, AsnInvokeProblemEnum, createInvokeReject, IASN1Transport, IASN1LogData, IReceiveInvokeContext, IInvokeHandler, ELogSeverity, ROSEBase } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_Mgmt from "./ENetUC_Mgmt";
import * as Converter from "./ENetUC_Mgmt_Converter";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_SIPCTI from "./ENetUC_Common_SIPCTI";
import * as ENetUC_Common_AsnContact from "./ENetUC_Common_AsnContact";
import * as ENetUC_ClientCapabilities from "./ENetUC_ClientCapabilities";
import * as ENetUC_BinaryTransfer from "./ENetUC_BinaryTransfer";
import * as ENetUC_Admin from "./ENetUC_Admin";
import * as ENetUC_CTI from "./ENetUC_CTI";
import * as ENetUC_Common_Auth from "./ENetUC_Common_Auth";
import * as ENetUC_Transport from "./ENetUC_Transport";
import * as ENetROSEInterface from "./ENetROSEInterface";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";
import * as ENetUC_Common_SIPCTI_Converter from "./ENetUC_Common_SIPCTI_Converter";
import * as ENetUC_Common_AsnContact_Converter from "./ENetUC_Common_AsnContact_Converter";
import * as ENetUC_ClientCapabilities_Converter from "./ENetUC_ClientCapabilities_Converter";
import * as ENetUC_BinaryTransfer_Converter from "./ENetUC_BinaryTransfer_Converter";
import * as ENetUC_Admin_Converter from "./ENetUC_Admin_Converter";
import * as ENetUC_CTI_Converter from "./ENetUC_CTI_Converter";
import * as ENetUC_Common_Auth_Converter from "./ENetUC_Common_Auth_Converter";
import * as ENetUC_Transport_Converter from "./ENetUC_Transport_Converter";
import * as ENetROSEInterface_Converter from "./ENetROSEInterface_Converter";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_MgmtROSE";
export const MODULE_LASTCHANGE = "2024-07-15T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 20240715;
export const MODULE_VERSION = "8.0.20240715";

// [PrintTSROSEOperationDefines]
export enum OperationIDs {
	OPID_asnMgmtSetUserProfile = 2656,
	OPID_asnMgmtSetUserProfilesList = 2823,
	OPID_asnMgmtGetUserProfiles = 2632,
	OPID_asnMgmtGetUserProfilesResult = 2726,
	OPID_asnMgmtGetUsers = 2501,
	OPID_asnMgmtReloadUserConfig = 2570,
	OPID_asnMgmtUpdateActiveUserProfiles = 2533,
	OPID_asnMgmtGetUserListEvent = 2746,
	OPID_asnMgmtGetUMMode = 2560,
	OPID_asnMgmtSetUMMode = 2561,
	OPID_asnMgmtTestUMInterface = 2571,
	OPID_asnMgmtUserProfileGetLargeImage = 2609,
	OPID_asnMgmtSubscribeUserGroupComputerModifiedEvents = 2672,
	OPID_asnMgmtUnsubscribeUserGroupComputerModifiedEvents = 2671,
	OPID_asnMgmtGetGroups = 2503,
	OPID_asnMgmtRemoveGroup = 2554,
	OPID_asnMgmtGetGroupsEvent = 2702,
	OPID_asnMgmtGetGroupAgentPublicPresence = 2584,
	OPID_asnMgmtGetComputers = 2502,
	OPID_asnMgmtRefreshComputerStatus = 2504,
	OPID_asnMgmtClearComputerStatus = 2505,
	OPID_asnMgmtRemoveComputer = 2506,
	OPID_asnMgmtComputerFoundEvent = 2703,
	OPID_asnMgmtSetSMSManagerSettings = 2508,
	OPID_asnMgmtGetSMSManagerSettings = 2509,
	OPID_asnMgmtGetSMSProvider = 2510,
	OPID_asnMgmtSendSMS = 2511,
	OPID_asnMgmtGetGoogleClientID = 2512,
	OPID_asnMgmtSetGoogleClientID = 2513,
	OPID_asnMgmtGetClientInstallProfileComputerNames = 2515,
	OPID_asnMgmtSendBroadcast = 2516,
	OPID_asnMgmtGetClientInstallProfile = 2517,
	OPID_asnMgmtSetClientInstallProfile = 2518,
	OPID_asnMgmtGetAvailableUpdates = 2519,
	OPID_asnMgmtGetUpdateServiceSettings = 2520,
	OPID_asnMgmtSetUpdateServiceSettings = 2521,
	OPID_asnMgmtSoftwarePacketsChanged = 2710,
	OPID_asnMgmtSoftwareStatusComputerChanged = 2709,
	OPID_asnMgmtUpdateSoftwareStatusComputerChanged = 2705,
	OPID_asnMgmtConResetLine = 2514,
	OPID_asnMgmtGetLineStatesEvent = 2704,
	OPID_asnMgmtGetLineSources = 2530,
	OPID_asnMgmtLineStateChanged = 2708,
	OPID_asnMgmtGetLineSourceDeviceIDs = 2562,
	OPID_asnMgmtGetLinesForSource = 2563,
	OPID_asnMgmtGetLineStates = 2529,
	OPID_asnMgmtOnLineRemovedEvent = 2715,
	OPID_asnMgmtOnLineAddedEvent = 2716,
	OPID_asnMgmtOnLineConfigChangedEvent = 2747,
	OPID_asnMgmtOnLineCapsChangedEvent = 2718,
	OPID_asnMgmtOnCtiLineFoundEvent = 2713,
	OPID_asnMgmtOnLineGroupAdded = 2717,
	OPID_asnMgmtOnLineGroupConfigChangedEvent = 2748,
	OPID_asnMgmtOnLineGroupRemoved = 2714,
	OPID_asnMgmtGetLineGroups = 2569,
	OPID_asnMgmtUnsubscribeLineEvents = 2576,
	OPID_asnMgmtSubscribeLineEvents = 2625,
	OPID_asnMgmtGetLineConfig = 2578,
	OPID_asnMgmtSetLineConfig = 2579,
	OPID_asnMgmtDeleteLine = 2580,
	OPID_asnMgmtETapiUIDllCallback = 2590,
	OPID_asnMgmtGetLineGroupConfig = 2608,
	OPID_asnMgmtSetLineGroupConfig = 2607,
	OPID_asnMgmtRequestPBXLineExists = 2613,
	OPID_asnMgmtOnLineEvent4AdminEvent = 2721,
	OPID_asnMgmtGetUMInterfaceSettings = 2606,
	OPID_asnMgmtSetUMInterfaceSettings = 2605,
	OPID_asnMgmtGetUMSettings = 2610,
	OPID_asnMgmtSetUMSettings = 2611,
	OPID_asnMgmtAddLicense = 2523,
	OPID_asnMgmtRemoveLicense = 2524,
	OPID_asnMgmtSetLicenseGenuineStatus = 2583,
	OPID_asnMgmtGetLicense = 2525,
	OPID_asnMgmtGetHasCurrentVersionLicenses = 2526,
	OPID_asnMgmtGetNumLicenses = 2527,
	OPID_asnMgmtGetRemainingTrialDays = 2507,
	OPID_asnMgmtGetHWID = 2522,
	OPID_asnMgmtOnLicensesHaveChangedEvent = 2725,
	OPID_asnMgmtUCWebServiceStatusChanged = 2706,
	OPID_asnMgmtGetUCWebServicesStatus = 2534,
	OPID_asnMgmtVerifyUCWebServicesConfig = 2535,
	OPID_asnMgmtGetLocalWebServiceConfig4Admin = 2813,
	OPID_asnMgmtGetWebServiceConfig4Admin = 2536,
	OPID_asnMgmtSetWebServiceConfig4Admin = 2537,
	OPID_asnMgmtGetUCConnectSettings = 2538,
	OPID_asnMgmtSetUCConnectSettings = 2539,
	OPID_asnMgmtSendMail = 2581,
	OPID_asnMgmtSendInviteMail = 2582,
	OPID_asnMgmtGetMailSettings = 2542,
	OPID_asnMgmtSetMailSettings = 2543,
	OPID_asnMgmtGetTapiProblemSettings = 2544,
	OPID_asnMgmtSetTapiProblemSettings = 2545,
	OPID_asnMgmtGetDatabaseManagerSettings = 2640,
	OPID_asnMgmtSetDatabaseManagerSettings = 2549,
	OPID_asnMgmtGetAvailableDatabases = 2550,
	OPID_asnMgmtGetListeningInterfaces = 2551,
	OPID_asnMgmtSetListeningInterfaces = 2552,
	OPID_asnMgmtGetListeningInterfaceStatuses = 2553,
	OPID_asnMgmtOnListenInterfaceStatusesEvent = 2719,
	OPID_asnMgmtOnListenInterfaceStatusesChangedEvent = 2720,
	OPID_asnMgmtDeleteLogfiles = 2555,
	OPID_asnMgmtAquireLoggerLock = 2556,
	OPID_asnMgmtReleaseLoggerLock = 2557,
	OPID_asnMgmtGetLogFileSettings = 2564,
	OPID_asnMgmtSetLogFileSettings = 2565,
	OPID_asnMgmtGetLocationInformationMgmt = 2634,
	OPID_asnMgmtSetLocationInformationMgmt = 2635,
	OPID_asnMgmtDeleteLocation = 2577,
	OPID_asnMgmtLocationChanged = 2707,
	OPID_asnMgmtGetLocationIDs = 2633,
	OPID_asnMgmtGetCSTAServerSettings = 2585,
	OPID_asnMgmtSetCSTAServerSettings = 2586,
	OPID_asnMgmtGetSTUNandTURNSettings = 2587,
	OPID_asnMgmtSetSTUNandTURNSettings = 2588,
	OPID_asnMgmtGetSTUNandTURNConsumerConfig = 2589,
	OPID_asnMgmtGetDBManSettings = 2558,
	OPID_asnMgmtSetDBManSettings = 2559,
	OPID_asnMgmtGetXmppSettings = 2591,
	OPID_asnMgmtSetXmppSettings = 2592,
	OPID_asnMgmtGetSIPFEDSettings = 2593,
	OPID_asnMgmtSetSIPFEDSettings = 2594,
	OPID_asnMgmtGetSIPFEDPubIPAdr = 2595,
	OPID_asnMgmtStartSipFedXmppDiagnostics = 2596,
	OPID_asnMgmtGetSIPFEDSrvState = 2597,
	OPID_asnMgmtGetSIPFEDNetState = 2598,
	OPID_asnMgmtGetSIPGatewaySettings = 2599,
	OPID_asnMgmtSetSIPGatewaySettings = 2600,
	OPID_asnMgmtGetSIPGatewayNetState = 2814,
	OPID_asnMgmtSetSIPGatewaySettingsV2 = 2832,
	OPID_asnMgmtSetCallRecorderSettings = 2601,
	OPID_asnMgmtGetCallRecorderSettings = 2602,
	OPID_asnMgmtLogin = 2629,
	OPID_asnMgmtChangeLogin = 2532,
	OPID_asnMgmtLoginV2 = 2826,
	OPID_asnMgmtNegotiateInterfaceVersion = 2831,
	OPID_asnMgmtMonGetServerStatistics = 2528,
	OPID_asnMgmtSaveSettings = 2531,
	OPID_asnMgmtStartTLS = 2546,
	OPID_asnMgmtGetServerVersion = 2547,
	OPID_asnMgmtGetCtiServerType = 2548,
	OPID_asnMgmtFederationServerStatusChanged = 2711,
	OPID_asnMgmtFederationServerDiagnosticComplete = 2712,
	OPID_asnMgmtGetIPInterfaceList = 2572,
	OPID_asnMgmtCleanupJournal = 2566,
	OPID_asnMgmtRestartServer = 2567,
	OPID_asnMgmtRestartServerAndInstallDatabaseUpdates = 2800,
	OPID_asnMgmtFullSyncContactCache = 2568,
	OPID_asnMgmtSendPushCheck = 2573,
	OPID_asnMgmtSetUCCheckServerCookie = 2574,
	OPID_asnMgmtCommitSaveSettings = 2575,
	OPID_asnMgmtGetNotificationSettings = 2604,
	OPID_asnMgmtSetNotificationSettings = 2603,
	OPID_asnMgmtFetchMetaDNs = 2612,
	OPID_asnMgmtSetMetaSettings = 2636,
	OPID_asnMgmtSetMetaPhoneBooksSettings = 2637,
	OPID_asnMgmtGetMetaSettings = 2638,
	OPID_asnMgmtGetMetaPhoneBooksSettings = 2639,
	OPID_asnMgmtGetAvailableCertificates = 2614,
	OPID_asnMgmtGetSoftwareProfiles = 2616,
	OPID_asnMgmtSetSoftwareProfiles = 2615,
	OPID_asnMgmtGetGlobalGroupingAttributes = 2668,
	OPID_asnMgmtSetGlobalGroupingAttributes = 2667,
	OPID_asnMgmtGetUserXmlClientContent = 2618,
	OPID_asnMgmtSetUserXmlClientContent = 2617,
	OPID_asnMgmtGetUserDefinedCustomFields = 2620,
	OPID_asnMgmtSetUserDefinedCustomFields = 2619,
	OPID_asnMgmtGetSIPFEDXmppDiagnostic = 2621,
	OPID_asnMgmtGetLineForwarding = 2622,
	OPID_asnMgmtSetLineForwarding = 2623,
	OPID_asnMgmtGetXMLAvailableLanguages = 2624,
	OPID_asnMgmtUpgradeProgress = 2722,
	OPID_asnMgmtUpgradeStart = 2626,
	OPID_asnMgmtGetPushServiceDevices = 2627,
	OPID_asnMgmtDeletePushServiceDevice = 2628,
	OPID_asnMgmtPushServiceDevicesResult = 2723,
	OPID_asnMgmtPushServiceDeviceChanged = 2724,
	OPID_asnMgmtSetPhoneJournalSettings = 2641,
	OPID_asnMgmtGetPhoneJournalSettings = 2642,
	OPID_asnMgmtAddComputerProfile = 2643,
	OPID_asnMgmtGetComputerProfile = 2644,
	OPID_asnMgmtSetComputerProfile = 2645,
	OPID_asnMgmtRemoveComputerProfileEvent = 2736,
	OPID_asnMgmtAddGroupProfile = 2646,
	OPID_asnMgmtRemoveGroupProfile = 2647,
	OPID_asnMgmtRemoveGroupProfileEvent = 2735,
	OPID_asnMgmtFindGroupProfiles = 2648,
	OPID_asnMgmtSetGroupProfile = 2649,
	OPID_asnMgmtAddUserProfile = 2650,
	OPID_asnMgmtRemoveUserProfile = 2651,
	OPID_asnMgmtRemoveUserProfileEvent = 2734,
	OPID_asnMgmtGetUserProfile = 2652,
	OPID_asnMgmtGetUserManagerSettings = 2653,
	OPID_asnMgmtGetAvailableLines = 2654,
	OPID_asnMgmtGetNetworkInterfacePorts = 2655,
	OPID_asnMgmtSetChatSettings = 2660,
	OPID_asnMgmtGetChatSettings = 2661,
	OPID_asnMgmtSetMeshSettings = 2662,
	OPID_asnMgmtGetMeshSettings = 2663,
	OPID_asnMgmtSetMeshNodeConfigs = 2664,
	OPID_asnMgmtGetMeshNodeConfigs = 2665,
	OPID_asnMgmtGetMeshNodeStatuses = 2666,
	OPID_asnMgmtMeshNodeStatusChanged = 2731,
	OPID_asnMgmtMeshUpdateConnections = 2732,
	OPID_asnMgmtSubscribeConnectionInformationChanges = 2669,
	OPID_asnMgmtUnSubscribeConnectionInformationChanges = 2670,
	OPID_asnMgmtConnectionInformationChanged = 2733,
	OPID_asnMgmtDisconnectClient = 2808,
	OPID_asnMgmtGDPRErase = 2673,
	OPID_asnMgmtGDPRFindContacts = 2676,
	OPID_asnMgmtUpdateDatabaseProgress = 2737,
	OPID_asnMgmtDatabaseUpdateInProgress = 2677,
	OPID_asnMgmtGetBinaryTransferSettings = 2679,
	OPID_asnMgmtSetBinaryTransferSettings = 2678,
	OPID_asnMgmtGetConnectionOptionsDNS = 2680,
	OPID_asnMgmtGetConfigurationManagerSettings = 2696,
	OPID_asnMgmtSetConfigurationManagerSettings = 2697,
	OPID_asnMgmtDirectPersistDeleteSetting = 2742,
	OPID_asnMgmtTestConfigurationManagerDB = 2698,
	OPID_asnMgmtGetUserManagerConnectionStatus = 2809,
	OPID_asnMgmtClientPersistenceDelete = 2811,
	OPID_asnMgmtClientPersistenceCreate = 2810,
	OPID_asnMgmtUserManagerConnectionStatusChanged = 2745,
	OPID_asnMgmtGetConfigurationManagerStatus = 2699,
	OPID_asnMgmtConfigurationManagerStatusChanged = 2739,
	OPID_asnMgmtGetConfigurationManagerServerList = 2801,
	OPID_asnMgmtConfigurationManagerServerListChanged = 2738,
	OPID_asnMgmtCleanupBinaryTransferFiles = 2681,
	OPID_asnMgmtSetPresenceDomain = 2812,
	OPID_asnMgmtGetAdminUserManagerSettings = 2824,
	OPID_asnMgmtSetAdminUserManagerSettings = 2825,
	OPID_asnMgmtGetAdminUserRights = 2827,
	OPID_asnMgmtGetEntraIdSettings = 2835,
	OPID_asnMgmtSetEntraIdSettings = 2836
}

// [PrintTSROSEModuleComment]
/**
 * Administration interface (UCServer administration)
 * ## Module description
 * This module defines the structures and operations operationsfor the UCServer management software.
 * It should be used by the UCServer Administrator, Web based administration tools or automatic provisioning applications.
 * Several operations are a copy of operations in ENetUC_Admin.asn1 and renamed \"asnAdmin...\" -&gt; \"asnMgmt...\"
 * (for having a clearer separation of the interfaces)
 *
 * ## Versioning
 * It is important to increment the version of the protocol, whenever there are incompatible changes.
 * The admin and the server must have an equal version to communicate.
 * The protocol version defined with the field named AsnManagementProtocolVersion
 *
 * ##        Management operations
 */

// [PrintTSROSEClass]
export class ENetUC_MgmtROSE extends ROSEBase implements IInvokeHandler, IENetUC_MgmtROSE {
	/**
	 * Contains the attributes that have to be filtered from logging
	 * Use logfilter property;property inside the asn1 root comments to specify this list
	 */
	public readonly logFilter: string[];

	/**
	 * The Loggers getLogData callback (used in all the log methods called in this class, add the classname to every log entry)
	 *
	 * @returns - an ILogData log data object provided additional data for all the logger calls in this class
	 */
	public getLogData(): IASN1LogData {
		return {
			className: MODULE_NAME
		};
	}

	/**
	 * Returns the operationName for an operationID
	 *
	 * @param id - the id we want to have the name for
	 * @returns - the name or undefined if not found
	 */
	public getNameForOperationID(id: OperationIDs): string | undefined {
		switch (id) {
			case OperationIDs.OPID_asnMgmtSetUserProfile:
				return "asnMgmtSetUserProfile";
			case OperationIDs.OPID_asnMgmtSetUserProfilesList:
				return "asnMgmtSetUserProfilesList";
			case OperationIDs.OPID_asnMgmtGetUserProfiles:
				return "asnMgmtGetUserProfiles";
			case OperationIDs.OPID_asnMgmtGetUserProfilesResult:
				return "asnMgmtGetUserProfilesResult";
			case OperationIDs.OPID_asnMgmtGetUsers:
				return "asnMgmtGetUsers";
			case OperationIDs.OPID_asnMgmtReloadUserConfig:
				return "asnMgmtReloadUserConfig";
			case OperationIDs.OPID_asnMgmtUpdateActiveUserProfiles:
				return "asnMgmtUpdateActiveUserProfiles";
			case OperationIDs.OPID_asnMgmtGetUserListEvent:
				return "asnMgmtGetUserListEvent";
			case OperationIDs.OPID_asnMgmtGetUMMode:
				return "asnMgmtGetUMMode";
			case OperationIDs.OPID_asnMgmtSetUMMode:
				return "asnMgmtSetUMMode";
			case OperationIDs.OPID_asnMgmtTestUMInterface:
				return "asnMgmtTestUMInterface";
			case OperationIDs.OPID_asnMgmtUserProfileGetLargeImage:
				return "asnMgmtUserProfileGetLargeImage";
			case OperationIDs.OPID_asnMgmtSubscribeUserGroupComputerModifiedEvents:
				return "asnMgmtSubscribeUserGroupComputerModifiedEvents";
			case OperationIDs.OPID_asnMgmtUnsubscribeUserGroupComputerModifiedEvents:
				return "asnMgmtUnsubscribeUserGroupComputerModifiedEvents";
			case OperationIDs.OPID_asnMgmtGetGroups:
				return "asnMgmtGetGroups";
			case OperationIDs.OPID_asnMgmtRemoveGroup:
				return "asnMgmtRemoveGroup";
			case OperationIDs.OPID_asnMgmtGetGroupsEvent:
				return "asnMgmtGetGroupsEvent";
			case OperationIDs.OPID_asnMgmtGetGroupAgentPublicPresence:
				return "asnMgmtGetGroupAgentPublicPresence";
			case OperationIDs.OPID_asnMgmtGetComputers:
				return "asnMgmtGetComputers";
			case OperationIDs.OPID_asnMgmtRefreshComputerStatus:
				return "asnMgmtRefreshComputerStatus";
			case OperationIDs.OPID_asnMgmtClearComputerStatus:
				return "asnMgmtClearComputerStatus";
			case OperationIDs.OPID_asnMgmtRemoveComputer:
				return "asnMgmtRemoveComputer";
			case OperationIDs.OPID_asnMgmtComputerFoundEvent:
				return "asnMgmtComputerFoundEvent";
			case OperationIDs.OPID_asnMgmtSetSMSManagerSettings:
				return "asnMgmtSetSMSManagerSettings";
			case OperationIDs.OPID_asnMgmtGetSMSManagerSettings:
				return "asnMgmtGetSMSManagerSettings";
			case OperationIDs.OPID_asnMgmtGetSMSProvider:
				return "asnMgmtGetSMSProvider";
			case OperationIDs.OPID_asnMgmtSendSMS:
				return "asnMgmtSendSMS";
			case OperationIDs.OPID_asnMgmtGetGoogleClientID:
				return "asnMgmtGetGoogleClientID";
			case OperationIDs.OPID_asnMgmtSetGoogleClientID:
				return "asnMgmtSetGoogleClientID";
			case OperationIDs.OPID_asnMgmtGetClientInstallProfileComputerNames:
				return "asnMgmtGetClientInstallProfileComputerNames";
			case OperationIDs.OPID_asnMgmtSendBroadcast:
				return "asnMgmtSendBroadcast";
			case OperationIDs.OPID_asnMgmtGetClientInstallProfile:
				return "asnMgmtGetClientInstallProfile";
			case OperationIDs.OPID_asnMgmtSetClientInstallProfile:
				return "asnMgmtSetClientInstallProfile";
			case OperationIDs.OPID_asnMgmtGetAvailableUpdates:
				return "asnMgmtGetAvailableUpdates";
			case OperationIDs.OPID_asnMgmtGetUpdateServiceSettings:
				return "asnMgmtGetUpdateServiceSettings";
			case OperationIDs.OPID_asnMgmtSetUpdateServiceSettings:
				return "asnMgmtSetUpdateServiceSettings";
			case OperationIDs.OPID_asnMgmtSoftwarePacketsChanged:
				return "asnMgmtSoftwarePacketsChanged";
			case OperationIDs.OPID_asnMgmtSoftwareStatusComputerChanged:
				return "asnMgmtSoftwareStatusComputerChanged";
			case OperationIDs.OPID_asnMgmtUpdateSoftwareStatusComputerChanged:
				return "asnMgmtUpdateSoftwareStatusComputerChanged";
			case OperationIDs.OPID_asnMgmtConResetLine:
				return "asnMgmtConResetLine";
			case OperationIDs.OPID_asnMgmtGetLineStatesEvent:
				return "asnMgmtGetLineStatesEvent";
			case OperationIDs.OPID_asnMgmtGetLineSources:
				return "asnMgmtGetLineSources";
			case OperationIDs.OPID_asnMgmtLineStateChanged:
				return "asnMgmtLineStateChanged";
			case OperationIDs.OPID_asnMgmtGetLineSourceDeviceIDs:
				return "asnMgmtGetLineSourceDeviceIDs";
			case OperationIDs.OPID_asnMgmtGetLinesForSource:
				return "asnMgmtGetLinesForSource";
			case OperationIDs.OPID_asnMgmtGetLineStates:
				return "asnMgmtGetLineStates";
			case OperationIDs.OPID_asnMgmtOnLineRemovedEvent:
				return "asnMgmtOnLineRemovedEvent";
			case OperationIDs.OPID_asnMgmtOnLineAddedEvent:
				return "asnMgmtOnLineAddedEvent";
			case OperationIDs.OPID_asnMgmtOnLineConfigChangedEvent:
				return "asnMgmtOnLineConfigChangedEvent";
			case OperationIDs.OPID_asnMgmtOnLineCapsChangedEvent:
				return "asnMgmtOnLineCapsChangedEvent";
			case OperationIDs.OPID_asnMgmtOnCtiLineFoundEvent:
				return "asnMgmtOnCtiLineFoundEvent";
			case OperationIDs.OPID_asnMgmtOnLineGroupAdded:
				return "asnMgmtOnLineGroupAdded";
			case OperationIDs.OPID_asnMgmtOnLineGroupConfigChangedEvent:
				return "asnMgmtOnLineGroupConfigChangedEvent";
			case OperationIDs.OPID_asnMgmtOnLineGroupRemoved:
				return "asnMgmtOnLineGroupRemoved";
			case OperationIDs.OPID_asnMgmtGetLineGroups:
				return "asnMgmtGetLineGroups";
			case OperationIDs.OPID_asnMgmtUnsubscribeLineEvents:
				return "asnMgmtUnsubscribeLineEvents";
			case OperationIDs.OPID_asnMgmtSubscribeLineEvents:
				return "asnMgmtSubscribeLineEvents";
			case OperationIDs.OPID_asnMgmtGetLineConfig:
				return "asnMgmtGetLineConfig";
			case OperationIDs.OPID_asnMgmtSetLineConfig:
				return "asnMgmtSetLineConfig";
			case OperationIDs.OPID_asnMgmtDeleteLine:
				return "asnMgmtDeleteLine";
			case OperationIDs.OPID_asnMgmtETapiUIDllCallback:
				return "asnMgmtETapiUIDllCallback";
			case OperationIDs.OPID_asnMgmtGetLineGroupConfig:
				return "asnMgmtGetLineGroupConfig";
			case OperationIDs.OPID_asnMgmtSetLineGroupConfig:
				return "asnMgmtSetLineGroupConfig";
			case OperationIDs.OPID_asnMgmtRequestPBXLineExists:
				return "asnMgmtRequestPBXLineExists";
			case OperationIDs.OPID_asnMgmtOnLineEvent4AdminEvent:
				return "asnMgmtOnLineEvent4AdminEvent";
			case OperationIDs.OPID_asnMgmtGetUMInterfaceSettings:
				return "asnMgmtGetUMInterfaceSettings";
			case OperationIDs.OPID_asnMgmtSetUMInterfaceSettings:
				return "asnMgmtSetUMInterfaceSettings";
			case OperationIDs.OPID_asnMgmtGetUMSettings:
				return "asnMgmtGetUMSettings";
			case OperationIDs.OPID_asnMgmtSetUMSettings:
				return "asnMgmtSetUMSettings";
			case OperationIDs.OPID_asnMgmtAddLicense:
				return "asnMgmtAddLicense";
			case OperationIDs.OPID_asnMgmtRemoveLicense:
				return "asnMgmtRemoveLicense";
			case OperationIDs.OPID_asnMgmtSetLicenseGenuineStatus:
				return "asnMgmtSetLicenseGenuineStatus";
			case OperationIDs.OPID_asnMgmtGetLicense:
				return "asnMgmtGetLicense";
			case OperationIDs.OPID_asnMgmtGetHasCurrentVersionLicenses:
				return "asnMgmtGetHasCurrentVersionLicenses";
			case OperationIDs.OPID_asnMgmtGetNumLicenses:
				return "asnMgmtGetNumLicenses";
			case OperationIDs.OPID_asnMgmtGetRemainingTrialDays:
				return "asnMgmtGetRemainingTrialDays";
			case OperationIDs.OPID_asnMgmtGetHWID:
				return "asnMgmtGetHWID";
			case OperationIDs.OPID_asnMgmtOnLicensesHaveChangedEvent:
				return "asnMgmtOnLicensesHaveChangedEvent";
			case OperationIDs.OPID_asnMgmtUCWebServiceStatusChanged:
				return "asnMgmtUCWebServiceStatusChanged";
			case OperationIDs.OPID_asnMgmtGetUCWebServicesStatus:
				return "asnMgmtGetUCWebServicesStatus";
			case OperationIDs.OPID_asnMgmtVerifyUCWebServicesConfig:
				return "asnMgmtVerifyUCWebServicesConfig";
			case OperationIDs.OPID_asnMgmtGetLocalWebServiceConfig4Admin:
				return "asnMgmtGetLocalWebServiceConfig4Admin";
			case OperationIDs.OPID_asnMgmtGetWebServiceConfig4Admin:
				return "asnMgmtGetWebServiceConfig4Admin";
			case OperationIDs.OPID_asnMgmtSetWebServiceConfig4Admin:
				return "asnMgmtSetWebServiceConfig4Admin";
			case OperationIDs.OPID_asnMgmtGetUCConnectSettings:
				return "asnMgmtGetUCConnectSettings";
			case OperationIDs.OPID_asnMgmtSetUCConnectSettings:
				return "asnMgmtSetUCConnectSettings";
			case OperationIDs.OPID_asnMgmtSendMail:
				return "asnMgmtSendMail";
			case OperationIDs.OPID_asnMgmtSendInviteMail:
				return "asnMgmtSendInviteMail";
			case OperationIDs.OPID_asnMgmtGetMailSettings:
				return "asnMgmtGetMailSettings";
			case OperationIDs.OPID_asnMgmtSetMailSettings:
				return "asnMgmtSetMailSettings";
			case OperationIDs.OPID_asnMgmtGetTapiProblemSettings:
				return "asnMgmtGetTapiProblemSettings";
			case OperationIDs.OPID_asnMgmtSetTapiProblemSettings:
				return "asnMgmtSetTapiProblemSettings";
			case OperationIDs.OPID_asnMgmtGetDatabaseManagerSettings:
				return "asnMgmtGetDatabaseManagerSettings";
			case OperationIDs.OPID_asnMgmtSetDatabaseManagerSettings:
				return "asnMgmtSetDatabaseManagerSettings";
			case OperationIDs.OPID_asnMgmtGetAvailableDatabases:
				return "asnMgmtGetAvailableDatabases";
			case OperationIDs.OPID_asnMgmtGetListeningInterfaces:
				return "asnMgmtGetListeningInterfaces";
			case OperationIDs.OPID_asnMgmtSetListeningInterfaces:
				return "asnMgmtSetListeningInterfaces";
			case OperationIDs.OPID_asnMgmtGetListeningInterfaceStatuses:
				return "asnMgmtGetListeningInterfaceStatuses";
			case OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesEvent:
				return "asnMgmtOnListenInterfaceStatusesEvent";
			case OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesChangedEvent:
				return "asnMgmtOnListenInterfaceStatusesChangedEvent";
			case OperationIDs.OPID_asnMgmtDeleteLogfiles:
				return "asnMgmtDeleteLogfiles";
			case OperationIDs.OPID_asnMgmtAquireLoggerLock:
				return "asnMgmtAquireLoggerLock";
			case OperationIDs.OPID_asnMgmtReleaseLoggerLock:
				return "asnMgmtReleaseLoggerLock";
			case OperationIDs.OPID_asnMgmtGetLogFileSettings:
				return "asnMgmtGetLogFileSettings";
			case OperationIDs.OPID_asnMgmtSetLogFileSettings:
				return "asnMgmtSetLogFileSettings";
			case OperationIDs.OPID_asnMgmtGetLocationInformationMgmt:
				return "asnMgmtGetLocationInformationMgmt";
			case OperationIDs.OPID_asnMgmtSetLocationInformationMgmt:
				return "asnMgmtSetLocationInformationMgmt";
			case OperationIDs.OPID_asnMgmtDeleteLocation:
				return "asnMgmtDeleteLocation";
			case OperationIDs.OPID_asnMgmtLocationChanged:
				return "asnMgmtLocationChanged";
			case OperationIDs.OPID_asnMgmtGetLocationIDs:
				return "asnMgmtGetLocationIDs";
			case OperationIDs.OPID_asnMgmtGetCSTAServerSettings:
				return "asnMgmtGetCSTAServerSettings";
			case OperationIDs.OPID_asnMgmtSetCSTAServerSettings:
				return "asnMgmtSetCSTAServerSettings";
			case OperationIDs.OPID_asnMgmtGetSTUNandTURNSettings:
				return "asnMgmtGetSTUNandTURNSettings";
			case OperationIDs.OPID_asnMgmtSetSTUNandTURNSettings:
				return "asnMgmtSetSTUNandTURNSettings";
			case OperationIDs.OPID_asnMgmtGetSTUNandTURNConsumerConfig:
				return "asnMgmtGetSTUNandTURNConsumerConfig";
			case OperationIDs.OPID_asnMgmtGetDBManSettings:
				return "asnMgmtGetDBManSettings";
			case OperationIDs.OPID_asnMgmtSetDBManSettings:
				return "asnMgmtSetDBManSettings";
			case OperationIDs.OPID_asnMgmtGetXmppSettings:
				return "asnMgmtGetXmppSettings";
			case OperationIDs.OPID_asnMgmtSetXmppSettings:
				return "asnMgmtSetXmppSettings";
			case OperationIDs.OPID_asnMgmtGetSIPFEDSettings:
				return "asnMgmtGetSIPFEDSettings";
			case OperationIDs.OPID_asnMgmtSetSIPFEDSettings:
				return "asnMgmtSetSIPFEDSettings";
			case OperationIDs.OPID_asnMgmtGetSIPFEDPubIPAdr:
				return "asnMgmtGetSIPFEDPubIPAdr";
			case OperationIDs.OPID_asnMgmtStartSipFedXmppDiagnostics:
				return "asnMgmtStartSipFedXmppDiagnostics";
			case OperationIDs.OPID_asnMgmtGetSIPFEDSrvState:
				return "asnMgmtGetSIPFEDSrvState";
			case OperationIDs.OPID_asnMgmtGetSIPFEDNetState:
				return "asnMgmtGetSIPFEDNetState";
			case OperationIDs.OPID_asnMgmtGetSIPGatewaySettings:
				return "asnMgmtGetSIPGatewaySettings";
			case OperationIDs.OPID_asnMgmtSetSIPGatewaySettings:
				return "asnMgmtSetSIPGatewaySettings";
			case OperationIDs.OPID_asnMgmtGetSIPGatewayNetState:
				return "asnMgmtGetSIPGatewayNetState";
			case OperationIDs.OPID_asnMgmtSetSIPGatewaySettingsV2:
				return "asnMgmtSetSIPGatewaySettingsV2";
			case OperationIDs.OPID_asnMgmtSetCallRecorderSettings:
				return "asnMgmtSetCallRecorderSettings";
			case OperationIDs.OPID_asnMgmtGetCallRecorderSettings:
				return "asnMgmtGetCallRecorderSettings";
			case OperationIDs.OPID_asnMgmtLogin:
				return "asnMgmtLogin";
			case OperationIDs.OPID_asnMgmtChangeLogin:
				return "asnMgmtChangeLogin";
			case OperationIDs.OPID_asnMgmtLoginV2:
				return "asnMgmtLoginV2";
			case OperationIDs.OPID_asnMgmtNegotiateInterfaceVersion:
				return "asnMgmtNegotiateInterfaceVersion";
			case OperationIDs.OPID_asnMgmtMonGetServerStatistics:
				return "asnMgmtMonGetServerStatistics";
			case OperationIDs.OPID_asnMgmtSaveSettings:
				return "asnMgmtSaveSettings";
			case OperationIDs.OPID_asnMgmtStartTLS:
				return "asnMgmtStartTLS";
			case OperationIDs.OPID_asnMgmtGetServerVersion:
				return "asnMgmtGetServerVersion";
			case OperationIDs.OPID_asnMgmtGetCtiServerType:
				return "asnMgmtGetCtiServerType";
			case OperationIDs.OPID_asnMgmtFederationServerStatusChanged:
				return "asnMgmtFederationServerStatusChanged";
			case OperationIDs.OPID_asnMgmtFederationServerDiagnosticComplete:
				return "asnMgmtFederationServerDiagnosticComplete";
			case OperationIDs.OPID_asnMgmtGetIPInterfaceList:
				return "asnMgmtGetIPInterfaceList";
			case OperationIDs.OPID_asnMgmtCleanupJournal:
				return "asnMgmtCleanupJournal";
			case OperationIDs.OPID_asnMgmtRestartServer:
				return "asnMgmtRestartServer";
			case OperationIDs.OPID_asnMgmtRestartServerAndInstallDatabaseUpdates:
				return "asnMgmtRestartServerAndInstallDatabaseUpdates";
			case OperationIDs.OPID_asnMgmtFullSyncContactCache:
				return "asnMgmtFullSyncContactCache";
			case OperationIDs.OPID_asnMgmtSendPushCheck:
				return "asnMgmtSendPushCheck";
			case OperationIDs.OPID_asnMgmtSetUCCheckServerCookie:
				return "asnMgmtSetUCCheckServerCookie";
			case OperationIDs.OPID_asnMgmtCommitSaveSettings:
				return "asnMgmtCommitSaveSettings";
			case OperationIDs.OPID_asnMgmtGetNotificationSettings:
				return "asnMgmtGetNotificationSettings";
			case OperationIDs.OPID_asnMgmtSetNotificationSettings:
				return "asnMgmtSetNotificationSettings";
			case OperationIDs.OPID_asnMgmtFetchMetaDNs:
				return "asnMgmtFetchMetaDNs";
			case OperationIDs.OPID_asnMgmtSetMetaSettings:
				return "asnMgmtSetMetaSettings";
			case OperationIDs.OPID_asnMgmtSetMetaPhoneBooksSettings:
				return "asnMgmtSetMetaPhoneBooksSettings";
			case OperationIDs.OPID_asnMgmtGetMetaSettings:
				return "asnMgmtGetMetaSettings";
			case OperationIDs.OPID_asnMgmtGetMetaPhoneBooksSettings:
				return "asnMgmtGetMetaPhoneBooksSettings";
			case OperationIDs.OPID_asnMgmtGetAvailableCertificates:
				return "asnMgmtGetAvailableCertificates";
			case OperationIDs.OPID_asnMgmtGetSoftwareProfiles:
				return "asnMgmtGetSoftwareProfiles";
			case OperationIDs.OPID_asnMgmtSetSoftwareProfiles:
				return "asnMgmtSetSoftwareProfiles";
			case OperationIDs.OPID_asnMgmtGetGlobalGroupingAttributes:
				return "asnMgmtGetGlobalGroupingAttributes";
			case OperationIDs.OPID_asnMgmtSetGlobalGroupingAttributes:
				return "asnMgmtSetGlobalGroupingAttributes";
			case OperationIDs.OPID_asnMgmtGetUserXmlClientContent:
				return "asnMgmtGetUserXmlClientContent";
			case OperationIDs.OPID_asnMgmtSetUserXmlClientContent:
				return "asnMgmtSetUserXmlClientContent";
			case OperationIDs.OPID_asnMgmtGetUserDefinedCustomFields:
				return "asnMgmtGetUserDefinedCustomFields";
			case OperationIDs.OPID_asnMgmtSetUserDefinedCustomFields:
				return "asnMgmtSetUserDefinedCustomFields";
			case OperationIDs.OPID_asnMgmtGetSIPFEDXmppDiagnostic:
				return "asnMgmtGetSIPFEDXmppDiagnostic";
			case OperationIDs.OPID_asnMgmtGetLineForwarding:
				return "asnMgmtGetLineForwarding";
			case OperationIDs.OPID_asnMgmtSetLineForwarding:
				return "asnMgmtSetLineForwarding";
			case OperationIDs.OPID_asnMgmtGetXMLAvailableLanguages:
				return "asnMgmtGetXMLAvailableLanguages";
			case OperationIDs.OPID_asnMgmtUpgradeProgress:
				return "asnMgmtUpgradeProgress";
			case OperationIDs.OPID_asnMgmtUpgradeStart:
				return "asnMgmtUpgradeStart";
			case OperationIDs.OPID_asnMgmtGetPushServiceDevices:
				return "asnMgmtGetPushServiceDevices";
			case OperationIDs.OPID_asnMgmtDeletePushServiceDevice:
				return "asnMgmtDeletePushServiceDevice";
			case OperationIDs.OPID_asnMgmtPushServiceDevicesResult:
				return "asnMgmtPushServiceDevicesResult";
			case OperationIDs.OPID_asnMgmtPushServiceDeviceChanged:
				return "asnMgmtPushServiceDeviceChanged";
			case OperationIDs.OPID_asnMgmtSetPhoneJournalSettings:
				return "asnMgmtSetPhoneJournalSettings";
			case OperationIDs.OPID_asnMgmtGetPhoneJournalSettings:
				return "asnMgmtGetPhoneJournalSettings";
			case OperationIDs.OPID_asnMgmtAddComputerProfile:
				return "asnMgmtAddComputerProfile";
			case OperationIDs.OPID_asnMgmtGetComputerProfile:
				return "asnMgmtGetComputerProfile";
			case OperationIDs.OPID_asnMgmtSetComputerProfile:
				return "asnMgmtSetComputerProfile";
			case OperationIDs.OPID_asnMgmtRemoveComputerProfileEvent:
				return "asnMgmtRemoveComputerProfileEvent";
			case OperationIDs.OPID_asnMgmtAddGroupProfile:
				return "asnMgmtAddGroupProfile";
			case OperationIDs.OPID_asnMgmtRemoveGroupProfile:
				return "asnMgmtRemoveGroupProfile";
			case OperationIDs.OPID_asnMgmtRemoveGroupProfileEvent:
				return "asnMgmtRemoveGroupProfileEvent";
			case OperationIDs.OPID_asnMgmtFindGroupProfiles:
				return "asnMgmtFindGroupProfiles";
			case OperationIDs.OPID_asnMgmtSetGroupProfile:
				return "asnMgmtSetGroupProfile";
			case OperationIDs.OPID_asnMgmtAddUserProfile:
				return "asnMgmtAddUserProfile";
			case OperationIDs.OPID_asnMgmtRemoveUserProfile:
				return "asnMgmtRemoveUserProfile";
			case OperationIDs.OPID_asnMgmtRemoveUserProfileEvent:
				return "asnMgmtRemoveUserProfileEvent";
			case OperationIDs.OPID_asnMgmtGetUserProfile:
				return "asnMgmtGetUserProfile";
			case OperationIDs.OPID_asnMgmtGetUserManagerSettings:
				return "asnMgmtGetUserManagerSettings";
			case OperationIDs.OPID_asnMgmtGetAvailableLines:
				return "asnMgmtGetAvailableLines";
			case OperationIDs.OPID_asnMgmtGetNetworkInterfacePorts:
				return "asnMgmtGetNetworkInterfacePorts";
			case OperationIDs.OPID_asnMgmtSetChatSettings:
				return "asnMgmtSetChatSettings";
			case OperationIDs.OPID_asnMgmtGetChatSettings:
				return "asnMgmtGetChatSettings";
			case OperationIDs.OPID_asnMgmtSetMeshSettings:
				return "asnMgmtSetMeshSettings";
			case OperationIDs.OPID_asnMgmtGetMeshSettings:
				return "asnMgmtGetMeshSettings";
			case OperationIDs.OPID_asnMgmtSetMeshNodeConfigs:
				return "asnMgmtSetMeshNodeConfigs";
			case OperationIDs.OPID_asnMgmtGetMeshNodeConfigs:
				return "asnMgmtGetMeshNodeConfigs";
			case OperationIDs.OPID_asnMgmtGetMeshNodeStatuses:
				return "asnMgmtGetMeshNodeStatuses";
			case OperationIDs.OPID_asnMgmtMeshNodeStatusChanged:
				return "asnMgmtMeshNodeStatusChanged";
			case OperationIDs.OPID_asnMgmtMeshUpdateConnections:
				return "asnMgmtMeshUpdateConnections";
			case OperationIDs.OPID_asnMgmtSubscribeConnectionInformationChanges:
				return "asnMgmtSubscribeConnectionInformationChanges";
			case OperationIDs.OPID_asnMgmtUnSubscribeConnectionInformationChanges:
				return "asnMgmtUnSubscribeConnectionInformationChanges";
			case OperationIDs.OPID_asnMgmtConnectionInformationChanged:
				return "asnMgmtConnectionInformationChanged";
			case OperationIDs.OPID_asnMgmtDisconnectClient:
				return "asnMgmtDisconnectClient";
			case OperationIDs.OPID_asnMgmtGDPRErase:
				return "asnMgmtGDPRErase";
			case OperationIDs.OPID_asnMgmtGDPRFindContacts:
				return "asnMgmtGDPRFindContacts";
			case OperationIDs.OPID_asnMgmtUpdateDatabaseProgress:
				return "asnMgmtUpdateDatabaseProgress";
			case OperationIDs.OPID_asnMgmtDatabaseUpdateInProgress:
				return "asnMgmtDatabaseUpdateInProgress";
			case OperationIDs.OPID_asnMgmtGetBinaryTransferSettings:
				return "asnMgmtGetBinaryTransferSettings";
			case OperationIDs.OPID_asnMgmtSetBinaryTransferSettings:
				return "asnMgmtSetBinaryTransferSettings";
			case OperationIDs.OPID_asnMgmtGetConnectionOptionsDNS:
				return "asnMgmtGetConnectionOptionsDNS";
			case OperationIDs.OPID_asnMgmtGetConfigurationManagerSettings:
				return "asnMgmtGetConfigurationManagerSettings";
			case OperationIDs.OPID_asnMgmtSetConfigurationManagerSettings:
				return "asnMgmtSetConfigurationManagerSettings";
			case OperationIDs.OPID_asnMgmtDirectPersistDeleteSetting:
				return "asnMgmtDirectPersistDeleteSetting";
			case OperationIDs.OPID_asnMgmtTestConfigurationManagerDB:
				return "asnMgmtTestConfigurationManagerDB";
			case OperationIDs.OPID_asnMgmtGetUserManagerConnectionStatus:
				return "asnMgmtGetUserManagerConnectionStatus";
			case OperationIDs.OPID_asnMgmtClientPersistenceDelete:
				return "asnMgmtClientPersistenceDelete";
			case OperationIDs.OPID_asnMgmtClientPersistenceCreate:
				return "asnMgmtClientPersistenceCreate";
			case OperationIDs.OPID_asnMgmtUserManagerConnectionStatusChanged:
				return "asnMgmtUserManagerConnectionStatusChanged";
			case OperationIDs.OPID_asnMgmtGetConfigurationManagerStatus:
				return "asnMgmtGetConfigurationManagerStatus";
			case OperationIDs.OPID_asnMgmtConfigurationManagerStatusChanged:
				return "asnMgmtConfigurationManagerStatusChanged";
			case OperationIDs.OPID_asnMgmtGetConfigurationManagerServerList:
				return "asnMgmtGetConfigurationManagerServerList";
			case OperationIDs.OPID_asnMgmtConfigurationManagerServerListChanged:
				return "asnMgmtConfigurationManagerServerListChanged";
			case OperationIDs.OPID_asnMgmtCleanupBinaryTransferFiles:
				return "asnMgmtCleanupBinaryTransferFiles";
			case OperationIDs.OPID_asnMgmtSetPresenceDomain:
				return "asnMgmtSetPresenceDomain";
			case OperationIDs.OPID_asnMgmtGetAdminUserManagerSettings:
				return "asnMgmtGetAdminUserManagerSettings";
			case OperationIDs.OPID_asnMgmtSetAdminUserManagerSettings:
				return "asnMgmtSetAdminUserManagerSettings";
			case OperationIDs.OPID_asnMgmtGetAdminUserRights:
				return "asnMgmtGetAdminUserRights";
			case OperationIDs.OPID_asnMgmtGetEntraIdSettings:
				return "asnMgmtGetEntraIdSettings";
			case OperationIDs.OPID_asnMgmtSetEntraIdSettings:
				return "asnMgmtSetEntraIdSettings";
			default:
				return undefined;
		}
	}

	/**
	 * Returns the operationID for an operationName
	 *
	 * @param name - the name we want to have the id for
	 * @returns - the id or undefined if not found
	 */
	public getIDForOperationName(name: string): OperationIDs | undefined {
		switch (name) {
			case "asnMgmtSetUserProfile":
				return OperationIDs.OPID_asnMgmtSetUserProfile;
			case "asnMgmtSetUserProfilesList":
				return OperationIDs.OPID_asnMgmtSetUserProfilesList;
			case "asnMgmtGetUserProfiles":
				return OperationIDs.OPID_asnMgmtGetUserProfiles;
			case "asnMgmtGetUserProfilesResult":
				return OperationIDs.OPID_asnMgmtGetUserProfilesResult;
			case "asnMgmtGetUsers":
				return OperationIDs.OPID_asnMgmtGetUsers;
			case "asnMgmtReloadUserConfig":
				return OperationIDs.OPID_asnMgmtReloadUserConfig;
			case "asnMgmtUpdateActiveUserProfiles":
				return OperationIDs.OPID_asnMgmtUpdateActiveUserProfiles;
			case "asnMgmtGetUserListEvent":
				return OperationIDs.OPID_asnMgmtGetUserListEvent;
			case "asnMgmtGetUMMode":
				return OperationIDs.OPID_asnMgmtGetUMMode;
			case "asnMgmtSetUMMode":
				return OperationIDs.OPID_asnMgmtSetUMMode;
			case "asnMgmtTestUMInterface":
				return OperationIDs.OPID_asnMgmtTestUMInterface;
			case "asnMgmtUserProfileGetLargeImage":
				return OperationIDs.OPID_asnMgmtUserProfileGetLargeImage;
			case "asnMgmtSubscribeUserGroupComputerModifiedEvents":
				return OperationIDs.OPID_asnMgmtSubscribeUserGroupComputerModifiedEvents;
			case "asnMgmtUnsubscribeUserGroupComputerModifiedEvents":
				return OperationIDs.OPID_asnMgmtUnsubscribeUserGroupComputerModifiedEvents;
			case "asnMgmtGetGroups":
				return OperationIDs.OPID_asnMgmtGetGroups;
			case "asnMgmtRemoveGroup":
				return OperationIDs.OPID_asnMgmtRemoveGroup;
			case "asnMgmtGetGroupsEvent":
				return OperationIDs.OPID_asnMgmtGetGroupsEvent;
			case "asnMgmtGetGroupAgentPublicPresence":
				return OperationIDs.OPID_asnMgmtGetGroupAgentPublicPresence;
			case "asnMgmtGetComputers":
				return OperationIDs.OPID_asnMgmtGetComputers;
			case "asnMgmtRefreshComputerStatus":
				return OperationIDs.OPID_asnMgmtRefreshComputerStatus;
			case "asnMgmtClearComputerStatus":
				return OperationIDs.OPID_asnMgmtClearComputerStatus;
			case "asnMgmtRemoveComputer":
				return OperationIDs.OPID_asnMgmtRemoveComputer;
			case "asnMgmtComputerFoundEvent":
				return OperationIDs.OPID_asnMgmtComputerFoundEvent;
			case "asnMgmtSetSMSManagerSettings":
				return OperationIDs.OPID_asnMgmtSetSMSManagerSettings;
			case "asnMgmtGetSMSManagerSettings":
				return OperationIDs.OPID_asnMgmtGetSMSManagerSettings;
			case "asnMgmtGetSMSProvider":
				return OperationIDs.OPID_asnMgmtGetSMSProvider;
			case "asnMgmtSendSMS":
				return OperationIDs.OPID_asnMgmtSendSMS;
			case "asnMgmtGetGoogleClientID":
				return OperationIDs.OPID_asnMgmtGetGoogleClientID;
			case "asnMgmtSetGoogleClientID":
				return OperationIDs.OPID_asnMgmtSetGoogleClientID;
			case "asnMgmtGetClientInstallProfileComputerNames":
				return OperationIDs.OPID_asnMgmtGetClientInstallProfileComputerNames;
			case "asnMgmtSendBroadcast":
				return OperationIDs.OPID_asnMgmtSendBroadcast;
			case "asnMgmtGetClientInstallProfile":
				return OperationIDs.OPID_asnMgmtGetClientInstallProfile;
			case "asnMgmtSetClientInstallProfile":
				return OperationIDs.OPID_asnMgmtSetClientInstallProfile;
			case "asnMgmtGetAvailableUpdates":
				return OperationIDs.OPID_asnMgmtGetAvailableUpdates;
			case "asnMgmtGetUpdateServiceSettings":
				return OperationIDs.OPID_asnMgmtGetUpdateServiceSettings;
			case "asnMgmtSetUpdateServiceSettings":
				return OperationIDs.OPID_asnMgmtSetUpdateServiceSettings;
			case "asnMgmtSoftwarePacketsChanged":
				return OperationIDs.OPID_asnMgmtSoftwarePacketsChanged;
			case "asnMgmtSoftwareStatusComputerChanged":
				return OperationIDs.OPID_asnMgmtSoftwareStatusComputerChanged;
			case "asnMgmtUpdateSoftwareStatusComputerChanged":
				return OperationIDs.OPID_asnMgmtUpdateSoftwareStatusComputerChanged;
			case "asnMgmtConResetLine":
				return OperationIDs.OPID_asnMgmtConResetLine;
			case "asnMgmtGetLineStatesEvent":
				return OperationIDs.OPID_asnMgmtGetLineStatesEvent;
			case "asnMgmtGetLineSources":
				return OperationIDs.OPID_asnMgmtGetLineSources;
			case "asnMgmtLineStateChanged":
				return OperationIDs.OPID_asnMgmtLineStateChanged;
			case "asnMgmtGetLineSourceDeviceIDs":
				return OperationIDs.OPID_asnMgmtGetLineSourceDeviceIDs;
			case "asnMgmtGetLinesForSource":
				return OperationIDs.OPID_asnMgmtGetLinesForSource;
			case "asnMgmtGetLineStates":
				return OperationIDs.OPID_asnMgmtGetLineStates;
			case "asnMgmtOnLineRemovedEvent":
				return OperationIDs.OPID_asnMgmtOnLineRemovedEvent;
			case "asnMgmtOnLineAddedEvent":
				return OperationIDs.OPID_asnMgmtOnLineAddedEvent;
			case "asnMgmtOnLineConfigChangedEvent":
				return OperationIDs.OPID_asnMgmtOnLineConfigChangedEvent;
			case "asnMgmtOnLineCapsChangedEvent":
				return OperationIDs.OPID_asnMgmtOnLineCapsChangedEvent;
			case "asnMgmtOnCtiLineFoundEvent":
				return OperationIDs.OPID_asnMgmtOnCtiLineFoundEvent;
			case "asnMgmtOnLineGroupAdded":
				return OperationIDs.OPID_asnMgmtOnLineGroupAdded;
			case "asnMgmtOnLineGroupConfigChangedEvent":
				return OperationIDs.OPID_asnMgmtOnLineGroupConfigChangedEvent;
			case "asnMgmtOnLineGroupRemoved":
				return OperationIDs.OPID_asnMgmtOnLineGroupRemoved;
			case "asnMgmtGetLineGroups":
				return OperationIDs.OPID_asnMgmtGetLineGroups;
			case "asnMgmtUnsubscribeLineEvents":
				return OperationIDs.OPID_asnMgmtUnsubscribeLineEvents;
			case "asnMgmtSubscribeLineEvents":
				return OperationIDs.OPID_asnMgmtSubscribeLineEvents;
			case "asnMgmtGetLineConfig":
				return OperationIDs.OPID_asnMgmtGetLineConfig;
			case "asnMgmtSetLineConfig":
				return OperationIDs.OPID_asnMgmtSetLineConfig;
			case "asnMgmtDeleteLine":
				return OperationIDs.OPID_asnMgmtDeleteLine;
			case "asnMgmtETapiUIDllCallback":
				return OperationIDs.OPID_asnMgmtETapiUIDllCallback;
			case "asnMgmtGetLineGroupConfig":
				return OperationIDs.OPID_asnMgmtGetLineGroupConfig;
			case "asnMgmtSetLineGroupConfig":
				return OperationIDs.OPID_asnMgmtSetLineGroupConfig;
			case "asnMgmtRequestPBXLineExists":
				return OperationIDs.OPID_asnMgmtRequestPBXLineExists;
			case "asnMgmtOnLineEvent4AdminEvent":
				return OperationIDs.OPID_asnMgmtOnLineEvent4AdminEvent;
			case "asnMgmtGetUMInterfaceSettings":
				return OperationIDs.OPID_asnMgmtGetUMInterfaceSettings;
			case "asnMgmtSetUMInterfaceSettings":
				return OperationIDs.OPID_asnMgmtSetUMInterfaceSettings;
			case "asnMgmtGetUMSettings":
				return OperationIDs.OPID_asnMgmtGetUMSettings;
			case "asnMgmtSetUMSettings":
				return OperationIDs.OPID_asnMgmtSetUMSettings;
			case "asnMgmtAddLicense":
				return OperationIDs.OPID_asnMgmtAddLicense;
			case "asnMgmtRemoveLicense":
				return OperationIDs.OPID_asnMgmtRemoveLicense;
			case "asnMgmtSetLicenseGenuineStatus":
				return OperationIDs.OPID_asnMgmtSetLicenseGenuineStatus;
			case "asnMgmtGetLicense":
				return OperationIDs.OPID_asnMgmtGetLicense;
			case "asnMgmtGetHasCurrentVersionLicenses":
				return OperationIDs.OPID_asnMgmtGetHasCurrentVersionLicenses;
			case "asnMgmtGetNumLicenses":
				return OperationIDs.OPID_asnMgmtGetNumLicenses;
			case "asnMgmtGetRemainingTrialDays":
				return OperationIDs.OPID_asnMgmtGetRemainingTrialDays;
			case "asnMgmtGetHWID":
				return OperationIDs.OPID_asnMgmtGetHWID;
			case "asnMgmtOnLicensesHaveChangedEvent":
				return OperationIDs.OPID_asnMgmtOnLicensesHaveChangedEvent;
			case "asnMgmtUCWebServiceStatusChanged":
				return OperationIDs.OPID_asnMgmtUCWebServiceStatusChanged;
			case "asnMgmtGetUCWebServicesStatus":
				return OperationIDs.OPID_asnMgmtGetUCWebServicesStatus;
			case "asnMgmtVerifyUCWebServicesConfig":
				return OperationIDs.OPID_asnMgmtVerifyUCWebServicesConfig;
			case "asnMgmtGetLocalWebServiceConfig4Admin":
				return OperationIDs.OPID_asnMgmtGetLocalWebServiceConfig4Admin;
			case "asnMgmtGetWebServiceConfig4Admin":
				return OperationIDs.OPID_asnMgmtGetWebServiceConfig4Admin;
			case "asnMgmtSetWebServiceConfig4Admin":
				return OperationIDs.OPID_asnMgmtSetWebServiceConfig4Admin;
			case "asnMgmtGetUCConnectSettings":
				return OperationIDs.OPID_asnMgmtGetUCConnectSettings;
			case "asnMgmtSetUCConnectSettings":
				return OperationIDs.OPID_asnMgmtSetUCConnectSettings;
			case "asnMgmtSendMail":
				return OperationIDs.OPID_asnMgmtSendMail;
			case "asnMgmtSendInviteMail":
				return OperationIDs.OPID_asnMgmtSendInviteMail;
			case "asnMgmtGetMailSettings":
				return OperationIDs.OPID_asnMgmtGetMailSettings;
			case "asnMgmtSetMailSettings":
				return OperationIDs.OPID_asnMgmtSetMailSettings;
			case "asnMgmtGetTapiProblemSettings":
				return OperationIDs.OPID_asnMgmtGetTapiProblemSettings;
			case "asnMgmtSetTapiProblemSettings":
				return OperationIDs.OPID_asnMgmtSetTapiProblemSettings;
			case "asnMgmtGetDatabaseManagerSettings":
				return OperationIDs.OPID_asnMgmtGetDatabaseManagerSettings;
			case "asnMgmtSetDatabaseManagerSettings":
				return OperationIDs.OPID_asnMgmtSetDatabaseManagerSettings;
			case "asnMgmtGetAvailableDatabases":
				return OperationIDs.OPID_asnMgmtGetAvailableDatabases;
			case "asnMgmtGetListeningInterfaces":
				return OperationIDs.OPID_asnMgmtGetListeningInterfaces;
			case "asnMgmtSetListeningInterfaces":
				return OperationIDs.OPID_asnMgmtSetListeningInterfaces;
			case "asnMgmtGetListeningInterfaceStatuses":
				return OperationIDs.OPID_asnMgmtGetListeningInterfaceStatuses;
			case "asnMgmtOnListenInterfaceStatusesEvent":
				return OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesEvent;
			case "asnMgmtOnListenInterfaceStatusesChangedEvent":
				return OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesChangedEvent;
			case "asnMgmtDeleteLogfiles":
				return OperationIDs.OPID_asnMgmtDeleteLogfiles;
			case "asnMgmtAquireLoggerLock":
				return OperationIDs.OPID_asnMgmtAquireLoggerLock;
			case "asnMgmtReleaseLoggerLock":
				return OperationIDs.OPID_asnMgmtReleaseLoggerLock;
			case "asnMgmtGetLogFileSettings":
				return OperationIDs.OPID_asnMgmtGetLogFileSettings;
			case "asnMgmtSetLogFileSettings":
				return OperationIDs.OPID_asnMgmtSetLogFileSettings;
			case "asnMgmtGetLocationInformationMgmt":
				return OperationIDs.OPID_asnMgmtGetLocationInformationMgmt;
			case "asnMgmtSetLocationInformationMgmt":
				return OperationIDs.OPID_asnMgmtSetLocationInformationMgmt;
			case "asnMgmtDeleteLocation":
				return OperationIDs.OPID_asnMgmtDeleteLocation;
			case "asnMgmtLocationChanged":
				return OperationIDs.OPID_asnMgmtLocationChanged;
			case "asnMgmtGetLocationIDs":
				return OperationIDs.OPID_asnMgmtGetLocationIDs;
			case "asnMgmtGetCSTAServerSettings":
				return OperationIDs.OPID_asnMgmtGetCSTAServerSettings;
			case "asnMgmtSetCSTAServerSettings":
				return OperationIDs.OPID_asnMgmtSetCSTAServerSettings;
			case "asnMgmtGetSTUNandTURNSettings":
				return OperationIDs.OPID_asnMgmtGetSTUNandTURNSettings;
			case "asnMgmtSetSTUNandTURNSettings":
				return OperationIDs.OPID_asnMgmtSetSTUNandTURNSettings;
			case "asnMgmtGetSTUNandTURNConsumerConfig":
				return OperationIDs.OPID_asnMgmtGetSTUNandTURNConsumerConfig;
			case "asnMgmtGetDBManSettings":
				return OperationIDs.OPID_asnMgmtGetDBManSettings;
			case "asnMgmtSetDBManSettings":
				return OperationIDs.OPID_asnMgmtSetDBManSettings;
			case "asnMgmtGetXmppSettings":
				return OperationIDs.OPID_asnMgmtGetXmppSettings;
			case "asnMgmtSetXmppSettings":
				return OperationIDs.OPID_asnMgmtSetXmppSettings;
			case "asnMgmtGetSIPFEDSettings":
				return OperationIDs.OPID_asnMgmtGetSIPFEDSettings;
			case "asnMgmtSetSIPFEDSettings":
				return OperationIDs.OPID_asnMgmtSetSIPFEDSettings;
			case "asnMgmtGetSIPFEDPubIPAdr":
				return OperationIDs.OPID_asnMgmtGetSIPFEDPubIPAdr;
			case "asnMgmtStartSipFedXmppDiagnostics":
				return OperationIDs.OPID_asnMgmtStartSipFedXmppDiagnostics;
			case "asnMgmtGetSIPFEDSrvState":
				return OperationIDs.OPID_asnMgmtGetSIPFEDSrvState;
			case "asnMgmtGetSIPFEDNetState":
				return OperationIDs.OPID_asnMgmtGetSIPFEDNetState;
			case "asnMgmtGetSIPGatewaySettings":
				return OperationIDs.OPID_asnMgmtGetSIPGatewaySettings;
			case "asnMgmtSetSIPGatewaySettings":
				return OperationIDs.OPID_asnMgmtSetSIPGatewaySettings;
			case "asnMgmtGetSIPGatewayNetState":
				return OperationIDs.OPID_asnMgmtGetSIPGatewayNetState;
			case "asnMgmtSetSIPGatewaySettingsV2":
				return OperationIDs.OPID_asnMgmtSetSIPGatewaySettingsV2;
			case "asnMgmtSetCallRecorderSettings":
				return OperationIDs.OPID_asnMgmtSetCallRecorderSettings;
			case "asnMgmtGetCallRecorderSettings":
				return OperationIDs.OPID_asnMgmtGetCallRecorderSettings;
			case "asnMgmtLogin":
				return OperationIDs.OPID_asnMgmtLogin;
			case "asnMgmtChangeLogin":
				return OperationIDs.OPID_asnMgmtChangeLogin;
			case "asnMgmtLoginV2":
				return OperationIDs.OPID_asnMgmtLoginV2;
			case "asnMgmtNegotiateInterfaceVersion":
				return OperationIDs.OPID_asnMgmtNegotiateInterfaceVersion;
			case "asnMgmtMonGetServerStatistics":
				return OperationIDs.OPID_asnMgmtMonGetServerStatistics;
			case "asnMgmtSaveSettings":
				return OperationIDs.OPID_asnMgmtSaveSettings;
			case "asnMgmtStartTLS":
				return OperationIDs.OPID_asnMgmtStartTLS;
			case "asnMgmtGetServerVersion":
				return OperationIDs.OPID_asnMgmtGetServerVersion;
			case "asnMgmtGetCtiServerType":
				return OperationIDs.OPID_asnMgmtGetCtiServerType;
			case "asnMgmtFederationServerStatusChanged":
				return OperationIDs.OPID_asnMgmtFederationServerStatusChanged;
			case "asnMgmtFederationServerDiagnosticComplete":
				return OperationIDs.OPID_asnMgmtFederationServerDiagnosticComplete;
			case "asnMgmtGetIPInterfaceList":
				return OperationIDs.OPID_asnMgmtGetIPInterfaceList;
			case "asnMgmtCleanupJournal":
				return OperationIDs.OPID_asnMgmtCleanupJournal;
			case "asnMgmtRestartServer":
				return OperationIDs.OPID_asnMgmtRestartServer;
			case "asnMgmtRestartServerAndInstallDatabaseUpdates":
				return OperationIDs.OPID_asnMgmtRestartServerAndInstallDatabaseUpdates;
			case "asnMgmtFullSyncContactCache":
				return OperationIDs.OPID_asnMgmtFullSyncContactCache;
			case "asnMgmtSendPushCheck":
				return OperationIDs.OPID_asnMgmtSendPushCheck;
			case "asnMgmtSetUCCheckServerCookie":
				return OperationIDs.OPID_asnMgmtSetUCCheckServerCookie;
			case "asnMgmtCommitSaveSettings":
				return OperationIDs.OPID_asnMgmtCommitSaveSettings;
			case "asnMgmtGetNotificationSettings":
				return OperationIDs.OPID_asnMgmtGetNotificationSettings;
			case "asnMgmtSetNotificationSettings":
				return OperationIDs.OPID_asnMgmtSetNotificationSettings;
			case "asnMgmtFetchMetaDNs":
				return OperationIDs.OPID_asnMgmtFetchMetaDNs;
			case "asnMgmtSetMetaSettings":
				return OperationIDs.OPID_asnMgmtSetMetaSettings;
			case "asnMgmtSetMetaPhoneBooksSettings":
				return OperationIDs.OPID_asnMgmtSetMetaPhoneBooksSettings;
			case "asnMgmtGetMetaSettings":
				return OperationIDs.OPID_asnMgmtGetMetaSettings;
			case "asnMgmtGetMetaPhoneBooksSettings":
				return OperationIDs.OPID_asnMgmtGetMetaPhoneBooksSettings;
			case "asnMgmtGetAvailableCertificates":
				return OperationIDs.OPID_asnMgmtGetAvailableCertificates;
			case "asnMgmtGetSoftwareProfiles":
				return OperationIDs.OPID_asnMgmtGetSoftwareProfiles;
			case "asnMgmtSetSoftwareProfiles":
				return OperationIDs.OPID_asnMgmtSetSoftwareProfiles;
			case "asnMgmtGetGlobalGroupingAttributes":
				return OperationIDs.OPID_asnMgmtGetGlobalGroupingAttributes;
			case "asnMgmtSetGlobalGroupingAttributes":
				return OperationIDs.OPID_asnMgmtSetGlobalGroupingAttributes;
			case "asnMgmtGetUserXmlClientContent":
				return OperationIDs.OPID_asnMgmtGetUserXmlClientContent;
			case "asnMgmtSetUserXmlClientContent":
				return OperationIDs.OPID_asnMgmtSetUserXmlClientContent;
			case "asnMgmtGetUserDefinedCustomFields":
				return OperationIDs.OPID_asnMgmtGetUserDefinedCustomFields;
			case "asnMgmtSetUserDefinedCustomFields":
				return OperationIDs.OPID_asnMgmtSetUserDefinedCustomFields;
			case "asnMgmtGetSIPFEDXmppDiagnostic":
				return OperationIDs.OPID_asnMgmtGetSIPFEDXmppDiagnostic;
			case "asnMgmtGetLineForwarding":
				return OperationIDs.OPID_asnMgmtGetLineForwarding;
			case "asnMgmtSetLineForwarding":
				return OperationIDs.OPID_asnMgmtSetLineForwarding;
			case "asnMgmtGetXMLAvailableLanguages":
				return OperationIDs.OPID_asnMgmtGetXMLAvailableLanguages;
			case "asnMgmtUpgradeProgress":
				return OperationIDs.OPID_asnMgmtUpgradeProgress;
			case "asnMgmtUpgradeStart":
				return OperationIDs.OPID_asnMgmtUpgradeStart;
			case "asnMgmtGetPushServiceDevices":
				return OperationIDs.OPID_asnMgmtGetPushServiceDevices;
			case "asnMgmtDeletePushServiceDevice":
				return OperationIDs.OPID_asnMgmtDeletePushServiceDevice;
			case "asnMgmtPushServiceDevicesResult":
				return OperationIDs.OPID_asnMgmtPushServiceDevicesResult;
			case "asnMgmtPushServiceDeviceChanged":
				return OperationIDs.OPID_asnMgmtPushServiceDeviceChanged;
			case "asnMgmtSetPhoneJournalSettings":
				return OperationIDs.OPID_asnMgmtSetPhoneJournalSettings;
			case "asnMgmtGetPhoneJournalSettings":
				return OperationIDs.OPID_asnMgmtGetPhoneJournalSettings;
			case "asnMgmtAddComputerProfile":
				return OperationIDs.OPID_asnMgmtAddComputerProfile;
			case "asnMgmtGetComputerProfile":
				return OperationIDs.OPID_asnMgmtGetComputerProfile;
			case "asnMgmtSetComputerProfile":
				return OperationIDs.OPID_asnMgmtSetComputerProfile;
			case "asnMgmtRemoveComputerProfileEvent":
				return OperationIDs.OPID_asnMgmtRemoveComputerProfileEvent;
			case "asnMgmtAddGroupProfile":
				return OperationIDs.OPID_asnMgmtAddGroupProfile;
			case "asnMgmtRemoveGroupProfile":
				return OperationIDs.OPID_asnMgmtRemoveGroupProfile;
			case "asnMgmtRemoveGroupProfileEvent":
				return OperationIDs.OPID_asnMgmtRemoveGroupProfileEvent;
			case "asnMgmtFindGroupProfiles":
				return OperationIDs.OPID_asnMgmtFindGroupProfiles;
			case "asnMgmtSetGroupProfile":
				return OperationIDs.OPID_asnMgmtSetGroupProfile;
			case "asnMgmtAddUserProfile":
				return OperationIDs.OPID_asnMgmtAddUserProfile;
			case "asnMgmtRemoveUserProfile":
				return OperationIDs.OPID_asnMgmtRemoveUserProfile;
			case "asnMgmtRemoveUserProfileEvent":
				return OperationIDs.OPID_asnMgmtRemoveUserProfileEvent;
			case "asnMgmtGetUserProfile":
				return OperationIDs.OPID_asnMgmtGetUserProfile;
			case "asnMgmtGetUserManagerSettings":
				return OperationIDs.OPID_asnMgmtGetUserManagerSettings;
			case "asnMgmtGetAvailableLines":
				return OperationIDs.OPID_asnMgmtGetAvailableLines;
			case "asnMgmtGetNetworkInterfacePorts":
				return OperationIDs.OPID_asnMgmtGetNetworkInterfacePorts;
			case "asnMgmtSetChatSettings":
				return OperationIDs.OPID_asnMgmtSetChatSettings;
			case "asnMgmtGetChatSettings":
				return OperationIDs.OPID_asnMgmtGetChatSettings;
			case "asnMgmtSetMeshSettings":
				return OperationIDs.OPID_asnMgmtSetMeshSettings;
			case "asnMgmtGetMeshSettings":
				return OperationIDs.OPID_asnMgmtGetMeshSettings;
			case "asnMgmtSetMeshNodeConfigs":
				return OperationIDs.OPID_asnMgmtSetMeshNodeConfigs;
			case "asnMgmtGetMeshNodeConfigs":
				return OperationIDs.OPID_asnMgmtGetMeshNodeConfigs;
			case "asnMgmtGetMeshNodeStatuses":
				return OperationIDs.OPID_asnMgmtGetMeshNodeStatuses;
			case "asnMgmtMeshNodeStatusChanged":
				return OperationIDs.OPID_asnMgmtMeshNodeStatusChanged;
			case "asnMgmtMeshUpdateConnections":
				return OperationIDs.OPID_asnMgmtMeshUpdateConnections;
			case "asnMgmtSubscribeConnectionInformationChanges":
				return OperationIDs.OPID_asnMgmtSubscribeConnectionInformationChanges;
			case "asnMgmtUnSubscribeConnectionInformationChanges":
				return OperationIDs.OPID_asnMgmtUnSubscribeConnectionInformationChanges;
			case "asnMgmtConnectionInformationChanged":
				return OperationIDs.OPID_asnMgmtConnectionInformationChanged;
			case "asnMgmtDisconnectClient":
				return OperationIDs.OPID_asnMgmtDisconnectClient;
			case "asnMgmtGDPRErase":
				return OperationIDs.OPID_asnMgmtGDPRErase;
			case "asnMgmtGDPRFindContacts":
				return OperationIDs.OPID_asnMgmtGDPRFindContacts;
			case "asnMgmtUpdateDatabaseProgress":
				return OperationIDs.OPID_asnMgmtUpdateDatabaseProgress;
			case "asnMgmtDatabaseUpdateInProgress":
				return OperationIDs.OPID_asnMgmtDatabaseUpdateInProgress;
			case "asnMgmtGetBinaryTransferSettings":
				return OperationIDs.OPID_asnMgmtGetBinaryTransferSettings;
			case "asnMgmtSetBinaryTransferSettings":
				return OperationIDs.OPID_asnMgmtSetBinaryTransferSettings;
			case "asnMgmtGetConnectionOptionsDNS":
				return OperationIDs.OPID_asnMgmtGetConnectionOptionsDNS;
			case "asnMgmtGetConfigurationManagerSettings":
				return OperationIDs.OPID_asnMgmtGetConfigurationManagerSettings;
			case "asnMgmtSetConfigurationManagerSettings":
				return OperationIDs.OPID_asnMgmtSetConfigurationManagerSettings;
			case "asnMgmtDirectPersistDeleteSetting":
				return OperationIDs.OPID_asnMgmtDirectPersistDeleteSetting;
			case "asnMgmtTestConfigurationManagerDB":
				return OperationIDs.OPID_asnMgmtTestConfigurationManagerDB;
			case "asnMgmtGetUserManagerConnectionStatus":
				return OperationIDs.OPID_asnMgmtGetUserManagerConnectionStatus;
			case "asnMgmtClientPersistenceDelete":
				return OperationIDs.OPID_asnMgmtClientPersistenceDelete;
			case "asnMgmtClientPersistenceCreate":
				return OperationIDs.OPID_asnMgmtClientPersistenceCreate;
			case "asnMgmtUserManagerConnectionStatusChanged":
				return OperationIDs.OPID_asnMgmtUserManagerConnectionStatusChanged;
			case "asnMgmtGetConfigurationManagerStatus":
				return OperationIDs.OPID_asnMgmtGetConfigurationManagerStatus;
			case "asnMgmtConfigurationManagerStatusChanged":
				return OperationIDs.OPID_asnMgmtConfigurationManagerStatusChanged;
			case "asnMgmtGetConfigurationManagerServerList":
				return OperationIDs.OPID_asnMgmtGetConfigurationManagerServerList;
			case "asnMgmtConfigurationManagerServerListChanged":
				return OperationIDs.OPID_asnMgmtConfigurationManagerServerListChanged;
			case "asnMgmtCleanupBinaryTransferFiles":
				return OperationIDs.OPID_asnMgmtCleanupBinaryTransferFiles;
			case "asnMgmtSetPresenceDomain":
				return OperationIDs.OPID_asnMgmtSetPresenceDomain;
			case "asnMgmtGetAdminUserManagerSettings":
				return OperationIDs.OPID_asnMgmtGetAdminUserManagerSettings;
			case "asnMgmtSetAdminUserManagerSettings":
				return OperationIDs.OPID_asnMgmtSetAdminUserManagerSettings;
			case "asnMgmtGetAdminUserRights":
				return OperationIDs.OPID_asnMgmtGetAdminUserRights;
			case "asnMgmtGetEntraIdSettings":
				return OperationIDs.OPID_asnMgmtGetEntraIdSettings;
			case "asnMgmtSetEntraIdSettings":
				return OperationIDs.OPID_asnMgmtSetEntraIdSettings;
			default:
				return undefined;
		}
	}

	// [PrintTSROSEConstructor]
	/**
	 * Constructs the invoke and oninvoke object targeting all the ROSE related parts.
	 *
	 * @param transport - The transport is the connection to the other side. It takes care of delivering the invoke
	 * to us as well as to send invokes and events to the other side. It also holds the logger.
	 * @param handleEvents - Set this to true if you want to receive events or false if the stub should cached them
	 * until you call dispatchEvents();
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public constructor(transport: IASN1Transport, handleEvents: boolean, handler?: Partial<IENetUC_MgmtROSE_Handler>) {
		super(transport, handleEvents);

		this.logFilter = [];

		if (handler)
			this.setHandler(handler);
	}

	// [PrintTSROSESetHandler]
	/**
	 * Sets the handler and registers the operations with it
	 *
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public setHandler(handler: Partial<IENetUC_MgmtROSE_Handler>): void {
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetUserProfile, "asnMgmtSetUserProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetUserProfilesList, "asnMgmtSetUserProfilesList");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUserProfiles, "asnMgmtGetUserProfiles");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUserProfilesResult, "asnMgmtGetUserProfilesResult");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUsers, "asnMgmtGetUsers");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtReloadUserConfig, "asnMgmtReloadUserConfig");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtUpdateActiveUserProfiles, "asnMgmtUpdateActiveUserProfiles");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUserListEvent, "asnMgmtGetUserListEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUMMode, "asnMgmtGetUMMode");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetUMMode, "asnMgmtSetUMMode");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtTestUMInterface, "asnMgmtTestUMInterface");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtUserProfileGetLargeImage, "asnMgmtUserProfileGetLargeImage");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSubscribeUserGroupComputerModifiedEvents, "asnMgmtSubscribeUserGroupComputerModifiedEvents");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtUnsubscribeUserGroupComputerModifiedEvents, "asnMgmtUnsubscribeUserGroupComputerModifiedEvents");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetGroups, "asnMgmtGetGroups");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRemoveGroup, "asnMgmtRemoveGroup");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetGroupsEvent, "asnMgmtGetGroupsEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetGroupAgentPublicPresence, "asnMgmtGetGroupAgentPublicPresence");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetComputers, "asnMgmtGetComputers");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRefreshComputerStatus, "asnMgmtRefreshComputerStatus");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtClearComputerStatus, "asnMgmtClearComputerStatus");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRemoveComputer, "asnMgmtRemoveComputer");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtComputerFoundEvent, "asnMgmtComputerFoundEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetSMSManagerSettings, "asnMgmtSetSMSManagerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSMSManagerSettings, "asnMgmtGetSMSManagerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSMSProvider, "asnMgmtGetSMSProvider");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSendSMS, "asnMgmtSendSMS");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetGoogleClientID, "asnMgmtGetGoogleClientID");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetGoogleClientID, "asnMgmtSetGoogleClientID");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetClientInstallProfileComputerNames, "asnMgmtGetClientInstallProfileComputerNames");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSendBroadcast, "asnMgmtSendBroadcast");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetClientInstallProfile, "asnMgmtGetClientInstallProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetClientInstallProfile, "asnMgmtSetClientInstallProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetAvailableUpdates, "asnMgmtGetAvailableUpdates");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUpdateServiceSettings, "asnMgmtGetUpdateServiceSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetUpdateServiceSettings, "asnMgmtSetUpdateServiceSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSoftwarePacketsChanged, "asnMgmtSoftwarePacketsChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSoftwareStatusComputerChanged, "asnMgmtSoftwareStatusComputerChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtUpdateSoftwareStatusComputerChanged, "asnMgmtUpdateSoftwareStatusComputerChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtConResetLine, "asnMgmtConResetLine");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLineStatesEvent, "asnMgmtGetLineStatesEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLineSources, "asnMgmtGetLineSources");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtLineStateChanged, "asnMgmtLineStateChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLineSourceDeviceIDs, "asnMgmtGetLineSourceDeviceIDs");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLinesForSource, "asnMgmtGetLinesForSource");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLineStates, "asnMgmtGetLineStates");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnLineRemovedEvent, "asnMgmtOnLineRemovedEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnLineAddedEvent, "asnMgmtOnLineAddedEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnLineConfigChangedEvent, "asnMgmtOnLineConfigChangedEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnLineCapsChangedEvent, "asnMgmtOnLineCapsChangedEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnCtiLineFoundEvent, "asnMgmtOnCtiLineFoundEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnLineGroupAdded, "asnMgmtOnLineGroupAdded");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnLineGroupConfigChangedEvent, "asnMgmtOnLineGroupConfigChangedEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnLineGroupRemoved, "asnMgmtOnLineGroupRemoved");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLineGroups, "asnMgmtGetLineGroups");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtUnsubscribeLineEvents, "asnMgmtUnsubscribeLineEvents");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSubscribeLineEvents, "asnMgmtSubscribeLineEvents");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLineConfig, "asnMgmtGetLineConfig");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetLineConfig, "asnMgmtSetLineConfig");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtDeleteLine, "asnMgmtDeleteLine");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtETapiUIDllCallback, "asnMgmtETapiUIDllCallback");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLineGroupConfig, "asnMgmtGetLineGroupConfig");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetLineGroupConfig, "asnMgmtSetLineGroupConfig");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRequestPBXLineExists, "asnMgmtRequestPBXLineExists");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnLineEvent4AdminEvent, "asnMgmtOnLineEvent4AdminEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUMInterfaceSettings, "asnMgmtGetUMInterfaceSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetUMInterfaceSettings, "asnMgmtSetUMInterfaceSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUMSettings, "asnMgmtGetUMSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetUMSettings, "asnMgmtSetUMSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtAddLicense, "asnMgmtAddLicense");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRemoveLicense, "asnMgmtRemoveLicense");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetLicenseGenuineStatus, "asnMgmtSetLicenseGenuineStatus");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLicense, "asnMgmtGetLicense");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetHasCurrentVersionLicenses, "asnMgmtGetHasCurrentVersionLicenses");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetNumLicenses, "asnMgmtGetNumLicenses");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetRemainingTrialDays, "asnMgmtGetRemainingTrialDays");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetHWID, "asnMgmtGetHWID");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnLicensesHaveChangedEvent, "asnMgmtOnLicensesHaveChangedEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtUCWebServiceStatusChanged, "asnMgmtUCWebServiceStatusChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUCWebServicesStatus, "asnMgmtGetUCWebServicesStatus");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtVerifyUCWebServicesConfig, "asnMgmtVerifyUCWebServicesConfig");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLocalWebServiceConfig4Admin, "asnMgmtGetLocalWebServiceConfig4Admin");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetWebServiceConfig4Admin, "asnMgmtGetWebServiceConfig4Admin");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetWebServiceConfig4Admin, "asnMgmtSetWebServiceConfig4Admin");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUCConnectSettings, "asnMgmtGetUCConnectSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetUCConnectSettings, "asnMgmtSetUCConnectSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSendMail, "asnMgmtSendMail");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSendInviteMail, "asnMgmtSendInviteMail");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetMailSettings, "asnMgmtGetMailSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetMailSettings, "asnMgmtSetMailSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetTapiProblemSettings, "asnMgmtGetTapiProblemSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetTapiProblemSettings, "asnMgmtSetTapiProblemSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetDatabaseManagerSettings, "asnMgmtGetDatabaseManagerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetDatabaseManagerSettings, "asnMgmtSetDatabaseManagerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetAvailableDatabases, "asnMgmtGetAvailableDatabases");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetListeningInterfaces, "asnMgmtGetListeningInterfaces");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetListeningInterfaces, "asnMgmtSetListeningInterfaces");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetListeningInterfaceStatuses, "asnMgmtGetListeningInterfaceStatuses");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesEvent, "asnMgmtOnListenInterfaceStatusesEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesChangedEvent, "asnMgmtOnListenInterfaceStatusesChangedEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtDeleteLogfiles, "asnMgmtDeleteLogfiles");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtAquireLoggerLock, "asnMgmtAquireLoggerLock");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtReleaseLoggerLock, "asnMgmtReleaseLoggerLock");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLogFileSettings, "asnMgmtGetLogFileSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetLogFileSettings, "asnMgmtSetLogFileSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLocationInformationMgmt, "asnMgmtGetLocationInformationMgmt");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetLocationInformationMgmt, "asnMgmtSetLocationInformationMgmt");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtDeleteLocation, "asnMgmtDeleteLocation");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtLocationChanged, "asnMgmtLocationChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLocationIDs, "asnMgmtGetLocationIDs");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetCSTAServerSettings, "asnMgmtGetCSTAServerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetCSTAServerSettings, "asnMgmtSetCSTAServerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSTUNandTURNSettings, "asnMgmtGetSTUNandTURNSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetSTUNandTURNSettings, "asnMgmtSetSTUNandTURNSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSTUNandTURNConsumerConfig, "asnMgmtGetSTUNandTURNConsumerConfig");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetDBManSettings, "asnMgmtGetDBManSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetDBManSettings, "asnMgmtSetDBManSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetXmppSettings, "asnMgmtGetXmppSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetXmppSettings, "asnMgmtSetXmppSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSIPFEDSettings, "asnMgmtGetSIPFEDSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetSIPFEDSettings, "asnMgmtSetSIPFEDSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSIPFEDPubIPAdr, "asnMgmtGetSIPFEDPubIPAdr");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtStartSipFedXmppDiagnostics, "asnMgmtStartSipFedXmppDiagnostics");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSIPFEDSrvState, "asnMgmtGetSIPFEDSrvState");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSIPFEDNetState, "asnMgmtGetSIPFEDNetState");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSIPGatewaySettings, "asnMgmtGetSIPGatewaySettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetSIPGatewaySettings, "asnMgmtSetSIPGatewaySettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSIPGatewayNetState, "asnMgmtGetSIPGatewayNetState");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetSIPGatewaySettingsV2, "asnMgmtSetSIPGatewaySettingsV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetCallRecorderSettings, "asnMgmtSetCallRecorderSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetCallRecorderSettings, "asnMgmtGetCallRecorderSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtLogin, "asnMgmtLogin");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtChangeLogin, "asnMgmtChangeLogin");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtLoginV2, "asnMgmtLoginV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtNegotiateInterfaceVersion, "asnMgmtNegotiateInterfaceVersion");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtMonGetServerStatistics, "asnMgmtMonGetServerStatistics");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSaveSettings, "asnMgmtSaveSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtStartTLS, "asnMgmtStartTLS");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetServerVersion, "asnMgmtGetServerVersion");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetCtiServerType, "asnMgmtGetCtiServerType");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtFederationServerStatusChanged, "asnMgmtFederationServerStatusChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtFederationServerDiagnosticComplete, "asnMgmtFederationServerDiagnosticComplete");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetIPInterfaceList, "asnMgmtGetIPInterfaceList");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtCleanupJournal, "asnMgmtCleanupJournal");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRestartServer, "asnMgmtRestartServer");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRestartServerAndInstallDatabaseUpdates, "asnMgmtRestartServerAndInstallDatabaseUpdates");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtFullSyncContactCache, "asnMgmtFullSyncContactCache");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSendPushCheck, "asnMgmtSendPushCheck");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetUCCheckServerCookie, "asnMgmtSetUCCheckServerCookie");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtCommitSaveSettings, "asnMgmtCommitSaveSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetNotificationSettings, "asnMgmtGetNotificationSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetNotificationSettings, "asnMgmtSetNotificationSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtFetchMetaDNs, "asnMgmtFetchMetaDNs");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetMetaSettings, "asnMgmtSetMetaSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetMetaPhoneBooksSettings, "asnMgmtSetMetaPhoneBooksSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetMetaSettings, "asnMgmtGetMetaSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetMetaPhoneBooksSettings, "asnMgmtGetMetaPhoneBooksSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetAvailableCertificates, "asnMgmtGetAvailableCertificates");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSoftwareProfiles, "asnMgmtGetSoftwareProfiles");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetSoftwareProfiles, "asnMgmtSetSoftwareProfiles");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetGlobalGroupingAttributes, "asnMgmtGetGlobalGroupingAttributes");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetGlobalGroupingAttributes, "asnMgmtSetGlobalGroupingAttributes");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUserXmlClientContent, "asnMgmtGetUserXmlClientContent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetUserXmlClientContent, "asnMgmtSetUserXmlClientContent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUserDefinedCustomFields, "asnMgmtGetUserDefinedCustomFields");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetUserDefinedCustomFields, "asnMgmtSetUserDefinedCustomFields");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetSIPFEDXmppDiagnostic, "asnMgmtGetSIPFEDXmppDiagnostic");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetLineForwarding, "asnMgmtGetLineForwarding");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetLineForwarding, "asnMgmtSetLineForwarding");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetXMLAvailableLanguages, "asnMgmtGetXMLAvailableLanguages");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtUpgradeProgress, "asnMgmtUpgradeProgress");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtUpgradeStart, "asnMgmtUpgradeStart");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetPushServiceDevices, "asnMgmtGetPushServiceDevices");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtDeletePushServiceDevice, "asnMgmtDeletePushServiceDevice");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtPushServiceDevicesResult, "asnMgmtPushServiceDevicesResult");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtPushServiceDeviceChanged, "asnMgmtPushServiceDeviceChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetPhoneJournalSettings, "asnMgmtSetPhoneJournalSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetPhoneJournalSettings, "asnMgmtGetPhoneJournalSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtAddComputerProfile, "asnMgmtAddComputerProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetComputerProfile, "asnMgmtGetComputerProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetComputerProfile, "asnMgmtSetComputerProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRemoveComputerProfileEvent, "asnMgmtRemoveComputerProfileEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtAddGroupProfile, "asnMgmtAddGroupProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRemoveGroupProfile, "asnMgmtRemoveGroupProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRemoveGroupProfileEvent, "asnMgmtRemoveGroupProfileEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtFindGroupProfiles, "asnMgmtFindGroupProfiles");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetGroupProfile, "asnMgmtSetGroupProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtAddUserProfile, "asnMgmtAddUserProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRemoveUserProfile, "asnMgmtRemoveUserProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtRemoveUserProfileEvent, "asnMgmtRemoveUserProfileEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUserProfile, "asnMgmtGetUserProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUserManagerSettings, "asnMgmtGetUserManagerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetAvailableLines, "asnMgmtGetAvailableLines");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetNetworkInterfacePorts, "asnMgmtGetNetworkInterfacePorts");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetChatSettings, "asnMgmtSetChatSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetChatSettings, "asnMgmtGetChatSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetMeshSettings, "asnMgmtSetMeshSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetMeshSettings, "asnMgmtGetMeshSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetMeshNodeConfigs, "asnMgmtSetMeshNodeConfigs");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetMeshNodeConfigs, "asnMgmtGetMeshNodeConfigs");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetMeshNodeStatuses, "asnMgmtGetMeshNodeStatuses");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtMeshNodeStatusChanged, "asnMgmtMeshNodeStatusChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtMeshUpdateConnections, "asnMgmtMeshUpdateConnections");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSubscribeConnectionInformationChanges, "asnMgmtSubscribeConnectionInformationChanges");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtUnSubscribeConnectionInformationChanges, "asnMgmtUnSubscribeConnectionInformationChanges");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtConnectionInformationChanged, "asnMgmtConnectionInformationChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtDisconnectClient, "asnMgmtDisconnectClient");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGDPRErase, "asnMgmtGDPRErase");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGDPRFindContacts, "asnMgmtGDPRFindContacts");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtUpdateDatabaseProgress, "asnMgmtUpdateDatabaseProgress");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtDatabaseUpdateInProgress, "asnMgmtDatabaseUpdateInProgress");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetBinaryTransferSettings, "asnMgmtGetBinaryTransferSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetBinaryTransferSettings, "asnMgmtSetBinaryTransferSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetConnectionOptionsDNS, "asnMgmtGetConnectionOptionsDNS");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetConfigurationManagerSettings, "asnMgmtGetConfigurationManagerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetConfigurationManagerSettings, "asnMgmtSetConfigurationManagerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtDirectPersistDeleteSetting, "asnMgmtDirectPersistDeleteSetting");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtTestConfigurationManagerDB, "asnMgmtTestConfigurationManagerDB");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetUserManagerConnectionStatus, "asnMgmtGetUserManagerConnectionStatus");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtClientPersistenceDelete, "asnMgmtClientPersistenceDelete");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtClientPersistenceCreate, "asnMgmtClientPersistenceCreate");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtUserManagerConnectionStatusChanged, "asnMgmtUserManagerConnectionStatusChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetConfigurationManagerStatus, "asnMgmtGetConfigurationManagerStatus");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtConfigurationManagerStatusChanged, "asnMgmtConfigurationManagerStatusChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetConfigurationManagerServerList, "asnMgmtGetConfigurationManagerServerList");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtConfigurationManagerServerListChanged, "asnMgmtConfigurationManagerServerListChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtCleanupBinaryTransferFiles, "asnMgmtCleanupBinaryTransferFiles");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetPresenceDomain, "asnMgmtSetPresenceDomain");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetAdminUserManagerSettings, "asnMgmtGetAdminUserManagerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetAdminUserManagerSettings, "asnMgmtSetAdminUserManagerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetAdminUserRights, "asnMgmtGetAdminUserRights");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtGetEntraIdSettings, "asnMgmtGetEntraIdSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnMgmtSetEntraIdSettings, "asnMgmtSetEntraIdSettings");
		this.transport.registerModuleVersion("ENetUC_Mgmt", 8, 1721001600);
	}

	// [PrintTSROSEInvokeMethods]

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminSetUserProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminSetUserProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetUserProfile(argument: ENetUC_Admin.AsnAdminSetUserProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminSetUserProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminSetUserProfileResult, OperationIDs.OPID_asnMgmtSetUserProfile, "asnMgmtSetUserProfile", ENetUC_Admin_Converter.AsnAdminSetUserProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminSetUserProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminSetUserProfilesListArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminSetUserProfilesListResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetUserProfilesList(argument: ENetUC_Admin.AsnAdminSetUserProfilesListArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminSetUserProfilesListResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminSetUserProfilesListResult, OperationIDs.OPID_asnMgmtSetUserProfilesList, "asnMgmtSetUserProfilesList", ENetUC_Admin_Converter.AsnAdminSetUserProfilesListArgument_Converter, ENetUC_Admin_Converter.AsnAdminSetUserProfilesListResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Get all user profiles
	 * Triggers the UCServer to send Events asnMgmtGetUserProfilesResult() to client with 50 user profiles each
	 *
	 * @param argument - An AsnMgmtGetUserProfilesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetUserProfilesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUserProfiles(argument: ENetUC_Mgmt.AsnMgmtGetUserProfilesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetUserProfilesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetUserProfilesResult, OperationIDs.OPID_asnMgmtGetUserProfiles, "asnMgmtGetUserProfiles", Converter.AsnMgmtGetUserProfilesArgument_Converter, Converter.AsnMgmtGetUserProfilesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetUsersArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetUsersResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUsers(argument: ENetUC_Mgmt.AsnMgmtGetUsersArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetUsersResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetUsersResult, OperationIDs.OPID_asnMgmtGetUsers, "asnMgmtGetUsers", Converter.AsnMgmtGetUsersArgument_Converter, Converter.AsnMgmtGetUsersResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtReloadUserConfig(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtReloadUserConfig, "asnMgmtReloadUserConfig", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtUpdateActiveUserProfiles(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtUpdateActiveUserProfiles, "asnMgmtUpdateActiveUserProfiles", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetUMModeResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUMMode(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetUMModeResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetUMModeResult, OperationIDs.OPID_asnMgmtGetUMMode, "asnMgmtGetUMMode", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetUMModeResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetUMModeArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetUMMode(argument: ENetUC_Mgmt.AsnMgmtSetUMModeArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetUMMode, "asnMgmtSetUMMode", Converter.AsnMgmtSetUMModeArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtTestUMInterfaceArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtTestUMInterface(argument: ENetUC_Mgmt.AsnMgmtTestUMInterfaceArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtTestUMInterface, "asnMgmtTestUMInterface", Converter.AsnMgmtTestUMInterfaceArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtUserProfileGetLargeImageArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtUserProfileGetLargeImageResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtUserProfileGetLargeImage(argument: ENetUC_Mgmt.AsnMgmtUserProfileGetLargeImageArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtUserProfileGetLargeImageResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtUserProfileGetLargeImageResult, OperationIDs.OPID_asnMgmtUserProfileGetLargeImage, "asnMgmtUserProfileGetLargeImage", Converter.AsnMgmtUserProfileGetLargeImageArgument_Converter, Converter.AsnMgmtUserProfileGetLargeImageResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSubscribeUserGroupComputerModifiedEvents(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSubscribeUserGroupComputerModifiedEvents, "asnMgmtSubscribeUserGroupComputerModifiedEvents", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtUnsubscribeUserGroupComputerModifiedEvents(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtUnsubscribeUserGroupComputerModifiedEvents, "asnMgmtUnsubscribeUserGroupComputerModifiedEvents", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetGroupsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetGroups(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetGroupsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetGroupsResult, OperationIDs.OPID_asnMgmtGetGroups, "asnMgmtGetGroups", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetGroupsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtRemoveGroupArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtRemoveGroup(argument: ENetUC_Mgmt.AsnMgmtRemoveGroupArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtRemoveGroup, "asnMgmtRemoveGroup", Converter.AsnMgmtRemoveGroupArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetGroupAgentPublicPresenceArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetGroupAgentPublicPresenceResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetGroupAgentPublicPresence(argument: ENetUC_Mgmt.AsnMgmtGetGroupAgentPublicPresenceArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetGroupAgentPublicPresenceResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetGroupAgentPublicPresenceResult, OperationIDs.OPID_asnMgmtGetGroupAgentPublicPresence, "asnMgmtGetGroupAgentPublicPresence", Converter.AsnMgmtGetGroupAgentPublicPresenceArgument_Converter, Converter.AsnMgmtGetGroupAgentPublicPresenceResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetComputersResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetComputers(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetComputersResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetComputersResult, OperationIDs.OPID_asnMgmtGetComputers, "asnMgmtGetComputers", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetComputersResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtRefreshComputerStatusArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtRefreshComputerStatus(argument: ENetUC_Mgmt.AsnMgmtRefreshComputerStatusArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtRefreshComputerStatus, "asnMgmtRefreshComputerStatus", Converter.AsnMgmtRefreshComputerStatusArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtClearComputerStatusArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtClearComputerStatus(argument: ENetUC_Mgmt.AsnMgmtClearComputerStatusArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtClearComputerStatus, "asnMgmtClearComputerStatus", Converter.AsnMgmtClearComputerStatusArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtRemoveComputerArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtRemoveComputer(argument: ENetUC_Mgmt.AsnMgmtRemoveComputerArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtRemoveComputer, "asnMgmtRemoveComputer", Converter.AsnMgmtRemoveComputerArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSMSManagerSettings object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetSMSManagerSettings(argument: ENetUC_Mgmt.AsnMgmtSMSManagerSettings, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetSMSManagerSettings, "asnMgmtSetSMSManagerSettings", Converter.AsnMgmtSMSManagerSettings_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSMSManagerSettings, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSMSManagerSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSMSManagerSettings | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSMSManagerSettings, OperationIDs.OPID_asnMgmtGetSMSManagerSettings, "asnMgmtGetSMSManagerSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtSMSManagerSettings_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtWebSMSProviderList, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSMSProvider(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtWebSMSProviderList | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtWebSMSProviderList, OperationIDs.OPID_asnMgmtGetSMSProvider, "asnMgmtGetSMSProvider", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtWebSMSProviderList_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSendSMSArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSendSMSResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSendSMS(argument: ENetUC_Mgmt.AsnMgmtSendSMSArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSendSMSResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSendSMSResult, OperationIDs.OPID_asnMgmtSendSMS, "asnMgmtSendSMS", Converter.AsnMgmtSendSMSArgument_Converter, Converter.AsnMgmtSendSMSResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGoogleClientID, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetGoogleClientID(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGoogleClientID | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGoogleClientID, OperationIDs.OPID_asnMgmtGetGoogleClientID, "asnMgmtGetGoogleClientID", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGoogleClientID_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGoogleClientID object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetGoogleClientID(argument: ENetUC_Mgmt.AsnMgmtGoogleClientID, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetGoogleClientID, "asnMgmtSetGoogleClientID", Converter.AsnMgmtGoogleClientID_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetClientInstallProfileComputerNamesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetClientInstallProfileComputerNames(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetClientInstallProfileComputerNamesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetClientInstallProfileComputerNamesResult, OperationIDs.OPID_asnMgmtGetClientInstallProfileComputerNames, "asnMgmtGetClientInstallProfileComputerNames", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetClientInstallProfileComputerNamesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSendBroadcastArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSendBroadcast(argument: ENetUC_Mgmt.AsnMgmtSendBroadcastArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSendBroadcast, "asnMgmtSendBroadcast", Converter.AsnMgmtSendBroadcastArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetClientInstallProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetClientInstallProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetClientInstallProfile(argument: ENetUC_Mgmt.AsnMgmtGetClientInstallProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetClientInstallProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetClientInstallProfileResult, OperationIDs.OPID_asnMgmtGetClientInstallProfile, "asnMgmtGetClientInstallProfile", Converter.AsnMgmtGetClientInstallProfileArgument_Converter, Converter.AsnMgmtGetClientInstallProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetClientInstallProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetClientInstallProfile(argument: ENetUC_Mgmt.AsnMgmtSetClientInstallProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetClientInstallProfile, "asnMgmtSetClientInstallProfile", Converter.AsnMgmtSetClientInstallProfileArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetAvailableUpdatesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetAvailableUpdates(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetAvailableUpdatesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetAvailableUpdatesResult, OperationIDs.OPID_asnMgmtGetAvailableUpdates, "asnMgmtGetAvailableUpdates", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetAvailableUpdatesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtUpdateServiceSettings, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUpdateServiceSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtUpdateServiceSettings | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtUpdateServiceSettings, OperationIDs.OPID_asnMgmtGetUpdateServiceSettings, "asnMgmtGetUpdateServiceSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtUpdateServiceSettings_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtUpdateServiceSettings object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetUpdateServiceSettings(argument: ENetUC_Mgmt.AsnMgmtUpdateServiceSettings, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetUpdateServiceSettings, "asnMgmtSetUpdateServiceSettings", Converter.AsnMgmtUpdateServiceSettings_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtConResetLineArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtConResetLine(argument: ENetUC_Mgmt.AsnMgmtConResetLineArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtConResetLine, "asnMgmtConResetLine", Converter.AsnMgmtConResetLineArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetLineSourcesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLineSources(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetLineSourcesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetLineSourcesResult, OperationIDs.OPID_asnMgmtGetLineSources, "asnMgmtGetLineSources", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetLineSourcesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetLineSourceDeviceIDsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetLineSourceDeviceIDsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLineSourceDeviceIDs(argument: ENetUC_Mgmt.AsnMgmtGetLineSourceDeviceIDsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetLineSourceDeviceIDsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetLineSourceDeviceIDsResult, OperationIDs.OPID_asnMgmtGetLineSourceDeviceIDs, "asnMgmtGetLineSourceDeviceIDs", Converter.AsnMgmtGetLineSourceDeviceIDsArgument_Converter, Converter.AsnMgmtGetLineSourceDeviceIDsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetLinesForSourceArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLinesForSource(argument: ENetUC_Mgmt.AsnMgmtGetLinesForSourceArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtGetLinesForSource, "asnMgmtGetLinesForSource", Converter.AsnMgmtGetLinesForSourceArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetLineStatesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLineStates(argument: ENetUC_Mgmt.AsnMgmtGetLineStatesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtGetLineStates, "asnMgmtGetLineStates", Converter.AsnMgmtGetLineStatesArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetLineGroupsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetLineGroupsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLineGroups(argument: ENetUC_Mgmt.AsnMgmtGetLineGroupsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetLineGroupsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetLineGroupsResult, OperationIDs.OPID_asnMgmtGetLineGroups, "asnMgmtGetLineGroups", Converter.AsnMgmtGetLineGroupsArgument_Converter, Converter.AsnMgmtGetLineGroupsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtUnsubscribeLineEvents(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtUnsubscribeLineEvents, "asnMgmtUnsubscribeLineEvents", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSubscribeLineEventsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSubscribeLineEvents(argument: ENetUC_Mgmt.AsnMgmtSubscribeLineEventsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSubscribeLineEvents, "asnMgmtSubscribeLineEvents", Converter.AsnMgmtSubscribeLineEventsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetLineConfigArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetLineConfigResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLineConfig(argument: ENetUC_Mgmt.AsnMgmtGetLineConfigArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetLineConfigResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetLineConfigResult, OperationIDs.OPID_asnMgmtGetLineConfig, "asnMgmtGetLineConfig", Converter.AsnMgmtGetLineConfigArgument_Converter, Converter.AsnMgmtGetLineConfigResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetLineConfigArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetLineConfig(argument: ENetUC_Mgmt.AsnMgmtSetLineConfigArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetLineConfig, "asnMgmtSetLineConfig", Converter.AsnMgmtSetLineConfigArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtDeleteLineArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtDeleteLine(argument: ENetUC_Mgmt.AsnMgmtDeleteLineArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtDeleteLine, "asnMgmtDeleteLine", Converter.AsnMgmtDeleteLineArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtETapiUIDllCallbackArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtETapiUIDllCallbackResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtETapiUIDllCallback(argument: ENetUC_Mgmt.AsnMgmtETapiUIDllCallbackArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtETapiUIDllCallbackResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtETapiUIDllCallbackResult, OperationIDs.OPID_asnMgmtETapiUIDllCallback, "asnMgmtETapiUIDllCallback", Converter.AsnMgmtETapiUIDllCallbackArgument_Converter, Converter.AsnMgmtETapiUIDllCallbackResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetLineGroupConfigArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetLineGroupConfigResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLineGroupConfig(argument: ENetUC_Mgmt.AsnMgmtGetLineGroupConfigArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetLineGroupConfigResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetLineGroupConfigResult, OperationIDs.OPID_asnMgmtGetLineGroupConfig, "asnMgmtGetLineGroupConfig", Converter.AsnMgmtGetLineGroupConfigArgument_Converter, Converter.AsnMgmtGetLineGroupConfigResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetLineGroupConfigArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetLineGroupConfig(argument: ENetUC_Mgmt.AsnMgmtSetLineGroupConfigArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetLineGroupConfig, "asnMgmtSetLineGroupConfig", Converter.AsnMgmtSetLineGroupConfigArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtRequestPBXLineExistsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtRequestPBXLineExistsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtRequestPBXLineExists(argument: ENetUC_Mgmt.AsnMgmtRequestPBXLineExistsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtRequestPBXLineExistsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtRequestPBXLineExistsResult, OperationIDs.OPID_asnMgmtRequestPBXLineExists, "asnMgmtRequestPBXLineExists", Converter.AsnMgmtRequestPBXLineExistsArgument_Converter, Converter.AsnMgmtRequestPBXLineExistsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetUMInterfaceSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetUMInterfaceSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUMInterfaceSettings(argument: ENetUC_Mgmt.AsnMgmtGetUMInterfaceSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetUMInterfaceSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetUMInterfaceSettingsResult, OperationIDs.OPID_asnMgmtGetUMInterfaceSettings, "asnMgmtGetUMInterfaceSettings", Converter.AsnMgmtGetUMInterfaceSettingsArgument_Converter, Converter.AsnMgmtGetUMInterfaceSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetUMInterfaceSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetUMInterfaceSettings(argument: ENetUC_Mgmt.AsnMgmtSetUMInterfaceSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetUMInterfaceSettings, "asnMgmtSetUMInterfaceSettings", Converter.AsnMgmtSetUMInterfaceSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetUMSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUMSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetUMSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetUMSettingsResult, OperationIDs.OPID_asnMgmtGetUMSettings, "asnMgmtGetUMSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetUMSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetUMSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetUMSettings(argument: ENetUC_Mgmt.AsnMgmtSetUMSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetUMSettings, "asnMgmtSetUMSettings", Converter.AsnMgmtSetUMSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtAddLicenseArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtAddLicense(argument: ENetUC_Mgmt.AsnMgmtAddLicenseArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtAddLicense, "asnMgmtAddLicense", Converter.AsnMgmtAddLicenseArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtRemoveLicenseArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtRemoveLicense(argument: ENetUC_Mgmt.AsnMgmtRemoveLicenseArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtRemoveLicense, "asnMgmtRemoveLicense", Converter.AsnMgmtRemoveLicenseArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetLicenseGenuineStatusArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSetLicenseGenuineStatusResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetLicenseGenuineStatus(argument: ENetUC_Mgmt.AsnMgmtSetLicenseGenuineStatusArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSetLicenseGenuineStatusResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSetLicenseGenuineStatusResult, OperationIDs.OPID_asnMgmtSetLicenseGenuineStatus, "asnMgmtSetLicenseGenuineStatus", Converter.AsnMgmtSetLicenseGenuineStatusArgument_Converter, Converter.AsnMgmtSetLicenseGenuineStatusResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetLicenseArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetLicenseResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLicense(argument: ENetUC_Mgmt.AsnMgmtGetLicenseArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetLicenseResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetLicenseResult, OperationIDs.OPID_asnMgmtGetLicense, "asnMgmtGetLicense", Converter.AsnMgmtGetLicenseArgument_Converter, Converter.AsnMgmtGetLicenseResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetHasCurrentVersionLicensesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetHasCurrentVersionLicenses(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetHasCurrentVersionLicensesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetHasCurrentVersionLicensesResult, OperationIDs.OPID_asnMgmtGetHasCurrentVersionLicenses, "asnMgmtGetHasCurrentVersionLicenses", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetHasCurrentVersionLicensesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetNumLicensesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetNumLicenses(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetNumLicensesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetNumLicensesResult, OperationIDs.OPID_asnMgmtGetNumLicenses, "asnMgmtGetNumLicenses", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetNumLicensesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetRemainingTrialDaysResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetRemainingTrialDays(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetRemainingTrialDaysResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetRemainingTrialDaysResult, OperationIDs.OPID_asnMgmtGetRemainingTrialDays, "asnMgmtGetRemainingTrialDays", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetRemainingTrialDaysResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetHWIDResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetHWID(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetHWIDResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetHWIDResult, OperationIDs.OPID_asnMgmtGetHWID, "asnMgmtGetHWID", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetHWIDResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEUCWebServicesStatus, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUCWebServicesStatus(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEUCWebServicesStatus | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEUCWebServicesStatus, OperationIDs.OPID_asnMgmtGetUCWebServicesStatus, "asnMgmtGetUCWebServicesStatus", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEUCWebServicesStatus_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEUCWebServiceConfig object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEUCWSStatus, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtVerifyUCWebServicesConfig(argument: ENetUC_Mgmt.AsnMgmtEUCWebServiceConfig, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEUCWSStatus | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEUCWSStatus, OperationIDs.OPID_asnMgmtVerifyUCWebServicesConfig, "asnMgmtVerifyUCWebServicesConfig", Converter.AsnMgmtEUCWebServiceConfig_Converter, Converter.AsnMgmtEUCWSStatus_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetLocalWebServiceConfig4AdminResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLocalWebServiceConfig4Admin(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetLocalWebServiceConfig4AdminResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetLocalWebServiceConfig4AdminResult, OperationIDs.OPID_asnMgmtGetLocalWebServiceConfig4Admin, "asnMgmtGetLocalWebServiceConfig4Admin", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetLocalWebServiceConfig4AdminResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEUCWebServiceConfig4Admin, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetWebServiceConfig4Admin(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEUCWebServiceConfig4Admin | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEUCWebServiceConfig4Admin, OperationIDs.OPID_asnMgmtGetWebServiceConfig4Admin, "asnMgmtGetWebServiceConfig4Admin", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEUCWebServiceConfig4Admin_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEUCWebServiceConfig4Admin object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetWebServiceConfig4Admin(argument: ENetUC_Mgmt.AsnMgmtEUCWebServiceConfig4Admin, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetWebServiceConfig4Admin, "asnMgmtSetWebServiceConfig4Admin", Converter.AsnMgmtEUCWebServiceConfig4Admin_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtUCConnectSettings, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUCConnectSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtUCConnectSettings | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtUCConnectSettings, OperationIDs.OPID_asnMgmtGetUCConnectSettings, "asnMgmtGetUCConnectSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtUCConnectSettings_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtUCConnectSettings object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetUCConnectSettings(argument: ENetUC_Mgmt.AsnMgmtUCConnectSettings, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetUCConnectSettings, "asnMgmtSetUCConnectSettings", Converter.AsnMgmtUCConnectSettings_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSendMailArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSendMail(argument: ENetUC_Mgmt.AsnMgmtSendMailArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSendMail, "asnMgmtSendMail", Converter.AsnMgmtSendMailArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSendInviteMailArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSendInviteMail(argument: ENetUC_Mgmt.AsnMgmtSendInviteMailArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSendInviteMail, "asnMgmtSendInviteMail", Converter.AsnMgmtSendInviteMailArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * CtiServer Administrator login
	 *
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEMailConnectorSettings, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetMailSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEMailConnectorSettings | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEMailConnectorSettings, OperationIDs.OPID_asnMgmtGetMailSettings, "asnMgmtGetMailSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEMailConnectorSettings_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * CtiServer Administrator login
	 *
	 * @param argument - An AsnMgmtEMailConnectorSettings object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetMailSettings(argument: ENetUC_Mgmt.AsnMgmtEMailConnectorSettings, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetMailSettings, "asnMgmtSetMailSettings", Converter.AsnMgmtEMailConnectorSettings_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * CtiServer Administrator login
	 *
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtTapiProblemSettings, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetTapiProblemSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtTapiProblemSettings | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtTapiProblemSettings, OperationIDs.OPID_asnMgmtGetTapiProblemSettings, "asnMgmtGetTapiProblemSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtTapiProblemSettings_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * CtiServer Administrator login
	 *
	 * @param argument - An AsnMgmtTapiProblemSettings object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetTapiProblemSettings(argument: ENetUC_Mgmt.AsnMgmtTapiProblemSettings, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetTapiProblemSettings, "asnMgmtSetTapiProblemSettings", Converter.AsnMgmtTapiProblemSettings_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetDatabaseManagerSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetDatabaseManagerSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetDatabaseManagerSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetDatabaseManagerSettingsResult, OperationIDs.OPID_asnMgmtGetDatabaseManagerSettings, "asnMgmtGetDatabaseManagerSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetDatabaseManagerSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetDatabaseManagerSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetDatabaseManagerSettings(argument: ENetUC_Mgmt.AsnMgmtSetDatabaseManagerSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetDatabaseManagerSettings, "asnMgmtSetDatabaseManagerSettings", Converter.AsnMgmtSetDatabaseManagerSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetAvailableDatabasesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetAvailableDatabasesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetAvailableDatabases(argument: ENetUC_Mgmt.AsnMgmtGetAvailableDatabasesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetAvailableDatabasesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetAvailableDatabasesResult, OperationIDs.OPID_asnMgmtGetAvailableDatabases, "asnMgmtGetAvailableDatabases", Converter.AsnMgmtGetAvailableDatabasesArgument_Converter, Converter.AsnMgmtGetAvailableDatabasesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetListeningInterfacesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetListeningInterfaces(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetListeningInterfacesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetListeningInterfacesResult, OperationIDs.OPID_asnMgmtGetListeningInterfaces, "asnMgmtGetListeningInterfaces", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetListeningInterfacesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetListeningInterfacesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetListeningInterfaces(argument: ENetUC_Mgmt.AsnMgmtSetListeningInterfacesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetListeningInterfaces, "asnMgmtSetListeningInterfaces", Converter.AsnMgmtSetListeningInterfacesArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetListeningInterfaceStatusesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetListeningInterfaceStatuses(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetListeningInterfaceStatusesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetListeningInterfaceStatusesResult, OperationIDs.OPID_asnMgmtGetListeningInterfaceStatuses, "asnMgmtGetListeningInterfaceStatuses", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetListeningInterfaceStatusesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtDeleteLogfiles(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtDeleteLogfiles, "asnMgmtDeleteLogfiles", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtAquireLoggerLock(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtAquireLoggerLock, "asnMgmtAquireLoggerLock", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtReleaseLoggerLock(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtReleaseLoggerLock, "asnMgmtReleaseLoggerLock", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetLogFileSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLogFileSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetLogFileSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetLogFileSettingsResult, OperationIDs.OPID_asnMgmtGetLogFileSettings, "asnMgmtGetLogFileSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetLogFileSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetLogFileSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetLogFileSettings(argument: ENetUC_Mgmt.AsnMgmtGetLogFileSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetLogFileSettings, "asnMgmtSetLogFileSettings", Converter.AsnMgmtGetLogFileSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetLocationInformationMgmtArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetLocationInformationMgmtResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLocationInformationMgmt(argument: ENetUC_Mgmt.AsnMgmtGetLocationInformationMgmtArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetLocationInformationMgmtResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetLocationInformationMgmtResult, OperationIDs.OPID_asnMgmtGetLocationInformationMgmt, "asnMgmtGetLocationInformationMgmt", Converter.AsnMgmtGetLocationInformationMgmtArgument_Converter, Converter.AsnMgmtGetLocationInformationMgmtResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetLocationInformationMgmtArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSetLocationInformationMgmtResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetLocationInformationMgmt(argument: ENetUC_Mgmt.AsnMgmtSetLocationInformationMgmtArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSetLocationInformationMgmtResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSetLocationInformationMgmtResult, OperationIDs.OPID_asnMgmtSetLocationInformationMgmt, "asnMgmtSetLocationInformationMgmt", Converter.AsnMgmtSetLocationInformationMgmtArgument_Converter, Converter.AsnMgmtSetLocationInformationMgmtResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtDeleteLocationArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtDeleteLocation(argument: ENetUC_Mgmt.AsnMgmtDeleteLocationArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtDeleteLocation, "asnMgmtDeleteLocation", Converter.AsnMgmtDeleteLocationArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetLocationIDsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetLocationIDsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLocationIDs(argument: ENetROSEInterface.AsnGetLocationIDsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnGetLocationIDsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnGetLocationIDsResult, OperationIDs.OPID_asnMgmtGetLocationIDs, "asnMgmtGetLocationIDs", ENetROSEInterface_Converter.AsnGetLocationIDsArgument_Converter, ENetROSEInterface_Converter.AsnGetLocationIDsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetCSTAServerSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetCSTAServerSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetCSTAServerSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetCSTAServerSettingsResult, OperationIDs.OPID_asnMgmtGetCSTAServerSettings, "asnMgmtGetCSTAServerSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetCSTAServerSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetCSTAServerSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetCSTAServerSettings(argument: ENetUC_Mgmt.AsnMgmtSetCSTAServerSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetCSTAServerSettings, "asnMgmtSetCSTAServerSettings", Converter.AsnMgmtSetCSTAServerSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetSTUNandTURNSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSTUNandTURNSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetSTUNandTURNSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetSTUNandTURNSettingsResult, OperationIDs.OPID_asnMgmtGetSTUNandTURNSettings, "asnMgmtGetSTUNandTURNSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSTUNandTURNSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetSTUNandTURNSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetSTUNandTURNSettings(argument: ENetUC_Mgmt.AsnMgmtSetSTUNandTURNSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetSTUNandTURNSettings, "asnMgmtSetSTUNandTURNSettings", Converter.AsnMgmtSetSTUNandTURNSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetSTUNandTURNConsumerConfigArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetSTUNandTURNConsumerConfigResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSTUNandTURNConsumerConfig(argument: ENetUC_Mgmt.AsnMgmtGetSTUNandTURNConsumerConfigArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetSTUNandTURNConsumerConfigResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetSTUNandTURNConsumerConfigResult, OperationIDs.OPID_asnMgmtGetSTUNandTURNConsumerConfig, "asnMgmtGetSTUNandTURNConsumerConfig", Converter.AsnMgmtGetSTUNandTURNConsumerConfigArgument_Converter, Converter.AsnMgmtGetSTUNandTURNConsumerConfigResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetDBManSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetDBManSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetDBManSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetDBManSettingsResult, OperationIDs.OPID_asnMgmtGetDBManSettings, "asnMgmtGetDBManSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetDBManSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetDBManSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetDBManSettings(argument: ENetUC_Mgmt.AsnMgmtGetDBManSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetDBManSettings, "asnMgmtSetDBManSettings", Converter.AsnMgmtGetDBManSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetXmppSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetXmppSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetXmppSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetXmppSettingsResult, OperationIDs.OPID_asnMgmtGetXmppSettings, "asnMgmtGetXmppSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetXmppSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetXmppSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetXmppSettings(argument: ENetUC_Mgmt.AsnMgmtSetXmppSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetXmppSettings, "asnMgmtSetXmppSettings", Converter.AsnMgmtSetXmppSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetSIPFEDSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSIPFEDSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetSIPFEDSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetSIPFEDSettingsResult, OperationIDs.OPID_asnMgmtGetSIPFEDSettings, "asnMgmtGetSIPFEDSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetSIPFEDSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetSIPFEDSettings(argument: ENetUC_Mgmt.AsnMgmtSetSIPFEDSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetSIPFEDSettings, "asnMgmtSetSIPFEDSettings", Converter.AsnMgmtSetSIPFEDSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetSIPFEDPubIPAdrResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSIPFEDPubIPAdr(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetSIPFEDPubIPAdrResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetSIPFEDPubIPAdrResult, OperationIDs.OPID_asnMgmtGetSIPFEDPubIPAdr, "asnMgmtGetSIPFEDPubIPAdr", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDPubIPAdrResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtStartSipFedXmppDiagnosticsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtStartSipFedXmppDiagnostics(argument: ENetUC_Mgmt.AsnMgmtStartSipFedXmppDiagnosticsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtStartSipFedXmppDiagnostics, "asnMgmtStartSipFedXmppDiagnostics", Converter.AsnMgmtStartSipFedXmppDiagnosticsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetSIPFEDSrvStateResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSIPFEDSrvState(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetSIPFEDSrvStateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetSIPFEDSrvStateResult, OperationIDs.OPID_asnMgmtGetSIPFEDSrvState, "asnMgmtGetSIPFEDSrvState", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDSrvStateResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetSIPFEDNetStateResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSIPFEDNetState(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetSIPFEDNetStateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetSIPFEDNetStateResult, OperationIDs.OPID_asnMgmtGetSIPFEDNetState, "asnMgmtGetSIPFEDNetState", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDNetStateResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetSIPGatewaySettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSIPGatewaySettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetSIPGatewaySettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetSIPGatewaySettingsResult, OperationIDs.OPID_asnMgmtGetSIPGatewaySettings, "asnMgmtGetSIPGatewaySettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPGatewaySettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetSIPGatewaySettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetSIPGatewaySettings(argument: ENetUC_Mgmt.AsnMgmtSetSIPGatewaySettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetSIPGatewaySettings, "asnMgmtSetSIPGatewaySettings", Converter.AsnMgmtSetSIPGatewaySettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetSIPFEDNetStateResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSIPGatewayNetState(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetSIPFEDNetStateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetSIPFEDNetStateResult, OperationIDs.OPID_asnMgmtGetSIPGatewayNetState, "asnMgmtGetSIPGatewayNetState", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDNetStateResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetSIPGatewaySettingsV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSetSIPGatewaySettingsV2Result, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetSIPGatewaySettingsV2(argument: ENetUC_Mgmt.AsnMgmtSetSIPGatewaySettingsV2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSetSIPGatewaySettingsV2Result | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSetSIPGatewaySettingsV2Result, OperationIDs.OPID_asnMgmtSetSIPGatewaySettingsV2, "asnMgmtSetSIPGatewaySettingsV2", Converter.AsnMgmtSetSIPGatewaySettingsV2Argument_Converter, Converter.AsnMgmtSetSIPGatewaySettingsV2Result_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetCallRecorderSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetCallRecorderSettings(argument: ENetUC_Mgmt.AsnMgmtSetCallRecorderSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetCallRecorderSettings, "asnMgmtSetCallRecorderSettings", Converter.AsnMgmtSetCallRecorderSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetCallRecorderSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetCallRecorderSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetCallRecorderSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetCallRecorderSettingsResult, OperationIDs.OPID_asnMgmtGetCallRecorderSettings, "asnMgmtGetCallRecorderSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetCallRecorderSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * CtiServer Administrator login
	 *
	 * @param argument - An AsnMgmtLoginArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtLoginResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtLogin(argument: ENetUC_Mgmt.AsnMgmtLoginArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtLoginResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtLoginResult, OperationIDs.OPID_asnMgmtLogin, "asnMgmtLogin", Converter.AsnMgmtLoginArgument_Converter, Converter.AsnMgmtLoginResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtChangeLoginArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtChangeLogin(argument: ENetUC_Mgmt.AsnMgmtChangeLoginArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtChangeLogin, "asnMgmtChangeLogin", Converter.AsnMgmtChangeLoginArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnLoginV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnLoginV2Result, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtLoginV2(argument: ENetUC_Common_Auth.AsnLoginV2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Common_Auth.AsnLoginV2Result | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Common_Auth.AsnLoginV2Result, OperationIDs.OPID_asnMgmtLoginV2, "asnMgmtLoginV2", ENetUC_Common_Auth_Converter.AsnLoginV2Argument_Converter, ENetUC_Common_Auth_Converter.AsnLoginV2Result_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnNegotiateInterfaceVersionArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnNegotiateInterfaceVersionResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtNegotiateInterfaceVersion(argument: ENetUC_Transport.AsnNegotiateInterfaceVersionArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Transport.AsnNegotiateInterfaceVersionResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Transport.AsnNegotiateInterfaceVersionResult, OperationIDs.OPID_asnMgmtNegotiateInterfaceVersion, "asnMgmtNegotiateInterfaceVersion", ENetUC_Transport_Converter.AsnNegotiateInterfaceVersionArgument_Converter, ENetUC_Transport_Converter.AsnNegotiateInterfaceVersionResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtMonGetServerStatisticsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtMonGetServerStatistics(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtMonGetServerStatisticsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtMonGetServerStatisticsResult, OperationIDs.OPID_asnMgmtMonGetServerStatistics, "asnMgmtMonGetServerStatistics", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtMonGetServerStatisticsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSaveSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSaveSettings(argument: ENetUC_Mgmt.AsnMgmtSaveSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSaveSettings, "asnMgmtSaveSettings", Converter.AsnMgmtSaveSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Request to start TLS
	 * After calling this function, the server switches to TLS mode. The server now expects that client to start a TLS handshake.
	 *
	 * @param argument - An AsnMgmtStartTLSArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtStartTLSResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtStartTLS(argument: ENetUC_Mgmt.AsnMgmtStartTLSArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtStartTLSResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtStartTLSResult, OperationIDs.OPID_asnMgmtStartTLS, "asnMgmtStartTLS", Converter.AsnMgmtStartTLSArgument_Converter, Converter.AsnMgmtStartTLSResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Request server version
	 * Request Interface and server versions.
	 *
	 * @param argument - An AsnMgmtGetServerVersionArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetServerVersionResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetServerVersion(argument: ENetUC_Mgmt.AsnMgmtGetServerVersionArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetServerVersionResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetServerVersionResult, OperationIDs.OPID_asnMgmtGetServerVersion, "asnMgmtGetServerVersion", Converter.AsnMgmtGetServerVersionArgument_Converter, Converter.AsnMgmtGetServerVersionResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Request server Type and Features.
	 * This function is used to determin what kind of server type is running and what features the server has.
	 * There are several kinds of similar server types and different features (OEM versions).
	 *
	 * @param argument - An AsnMgmtGetCtiServerTypeArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetCtiServerTypeResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetCtiServerType(argument: ENetUC_Mgmt.AsnMgmtGetCtiServerTypeArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetCtiServerTypeResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetCtiServerTypeResult, OperationIDs.OPID_asnMgmtGetCtiServerType, "asnMgmtGetCtiServerType", Converter.AsnMgmtGetCtiServerTypeArgument_Converter, Converter.AsnMgmtGetCtiServerTypeResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetIPInterfaceListResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetIPInterfaceList(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetIPInterfaceListResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetIPInterfaceListResult, OperationIDs.OPID_asnMgmtGetIPInterfaceList, "asnMgmtGetIPInterfaceList", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetIPInterfaceListResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtCleanupJournal(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtCleanupJournal, "asnMgmtCleanupJournal", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtRestartServer(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtRestartServer, "asnMgmtRestartServer", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtRestartServerAndInstallDatabaseUpdates(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtRestartServerAndInstallDatabaseUpdates, "asnMgmtRestartServerAndInstallDatabaseUpdates", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtFullSyncContactCache(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtFullSyncContactCache, "asnMgmtFullSyncContactCache", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSendPushCheckResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSendPushCheck(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSendPushCheckResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSendPushCheckResult, OperationIDs.OPID_asnMgmtSendPushCheck, "asnMgmtSendPushCheck", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtSendPushCheckResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetUCCheckServerCookieArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetUCCheckServerCookie(argument: ENetUC_Mgmt.AsnMgmtSetUCCheckServerCookieArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetUCCheckServerCookie, "asnMgmtSetUCCheckServerCookie", Converter.AsnMgmtSetUCCheckServerCookieArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtCommitSaveSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtCommitSaveSettings, "asnMgmtCommitSaveSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetNotificationSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetNotificationSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetNotificationSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetNotificationSettingsResult, OperationIDs.OPID_asnMgmtGetNotificationSettings, "asnMgmtGetNotificationSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetNotificationSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetNotificationSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetNotificationSettings(argument: ENetUC_Mgmt.AsnMgmtSetNotificationSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetNotificationSettings, "asnMgmtSetNotificationSettings", Converter.AsnMgmtSetNotificationSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtFetchMetaDNsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtFetchMetaDNsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtFetchMetaDNs(argument: ENetUC_Mgmt.AsnMgmtFetchMetaDNsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtFetchMetaDNsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtFetchMetaDNsResult, OperationIDs.OPID_asnMgmtFetchMetaDNs, "asnMgmtFetchMetaDNs", Converter.AsnMgmtFetchMetaDNsArgument_Converter, Converter.AsnMgmtFetchMetaDNsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnSetMetaSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnSetMetaSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetMetaSettings(argument: ENetROSEInterface.AsnSetMetaSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnSetMetaSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnSetMetaSettingsResult, OperationIDs.OPID_asnMgmtSetMetaSettings, "asnMgmtSetMetaSettings", ENetROSEInterface_Converter.AsnSetMetaSettingsArgument_Converter, ENetROSEInterface_Converter.AsnSetMetaSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnSetMetaSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnSetMetaSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetMetaPhoneBooksSettings(argument: ENetROSEInterface.AsnSetMetaSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnSetMetaSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnSetMetaSettingsResult, OperationIDs.OPID_asnMgmtSetMetaPhoneBooksSettings, "asnMgmtSetMetaPhoneBooksSettings", ENetROSEInterface_Converter.AsnSetMetaSettingsArgument_Converter, ENetROSEInterface_Converter.AsnSetMetaSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetMetaSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetMetaSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetMetaSettings(argument: ENetROSEInterface.AsnGetMetaSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnGetMetaSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnGetMetaSettingsResult, OperationIDs.OPID_asnMgmtGetMetaSettings, "asnMgmtGetMetaSettings", ENetROSEInterface_Converter.AsnGetMetaSettingsArgument_Converter, ENetROSEInterface_Converter.AsnGetMetaSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetMetaSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetMetaSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetMetaPhoneBooksSettings(argument: ENetROSEInterface.AsnGetMetaSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnGetMetaSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnGetMetaSettingsResult, OperationIDs.OPID_asnMgmtGetMetaPhoneBooksSettings, "asnMgmtGetMetaPhoneBooksSettings", ENetROSEInterface_Converter.AsnGetMetaSettingsArgument_Converter, ENetROSEInterface_Converter.AsnGetMetaSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetAvailableCertificatesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetAvailableCertificates(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetAvailableCertificatesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetAvailableCertificatesResult, OperationIDs.OPID_asnMgmtGetAvailableCertificates, "asnMgmtGetAvailableCertificates", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetAvailableCertificatesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetSoftwareProfilesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSoftwareProfiles(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetSoftwareProfilesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetSoftwareProfilesResult, OperationIDs.OPID_asnMgmtGetSoftwareProfiles, "asnMgmtGetSoftwareProfiles", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSoftwareProfilesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetSoftwareProfilesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetSoftwareProfiles(argument: ENetUC_Mgmt.AsnMgmtSetSoftwareProfilesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetSoftwareProfiles, "asnMgmtSetSoftwareProfiles", Converter.AsnMgmtSetSoftwareProfilesArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetGlobalGroupingAttributesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetGlobalGroupingAttributes(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetGlobalGroupingAttributesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetGlobalGroupingAttributesResult, OperationIDs.OPID_asnMgmtGetGlobalGroupingAttributes, "asnMgmtGetGlobalGroupingAttributes", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetGlobalGroupingAttributesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetGlobalGroupingAttributesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetGlobalGroupingAttributes(argument: ENetUC_Mgmt.AsnMgmtSetGlobalGroupingAttributesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetGlobalGroupingAttributes, "asnMgmtSetGlobalGroupingAttributes", Converter.AsnMgmtSetGlobalGroupingAttributesArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetUserXmlClientContentArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetUserXmlClientContentResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUserXmlClientContent(argument: ENetUC_Mgmt.AsnMgmtGetUserXmlClientContentArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetUserXmlClientContentResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetUserXmlClientContentResult, OperationIDs.OPID_asnMgmtGetUserXmlClientContent, "asnMgmtGetUserXmlClientContent", Converter.AsnMgmtGetUserXmlClientContentArgument_Converter, Converter.AsnMgmtGetUserXmlClientContentResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetUserXmlClientContentArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetUserXmlClientContent(argument: ENetUC_Mgmt.AsnMgmtSetUserXmlClientContentArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetUserXmlClientContent, "asnMgmtSetUserXmlClientContent", Converter.AsnMgmtSetUserXmlClientContentArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetUserDefinedCustomFieldsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUserDefinedCustomFields(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetUserDefinedCustomFieldsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetUserDefinedCustomFieldsResult, OperationIDs.OPID_asnMgmtGetUserDefinedCustomFields, "asnMgmtGetUserDefinedCustomFields", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetUserDefinedCustomFieldsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetUserDefinedCustomFieldsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetUserDefinedCustomFields(argument: ENetUC_Mgmt.AsnMgmtSetUserDefinedCustomFieldsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetUserDefinedCustomFields, "asnMgmtSetUserDefinedCustomFields", Converter.AsnMgmtSetUserDefinedCustomFieldsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetSIPFEDXmppDiagnosticResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetSIPFEDXmppDiagnostic(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetSIPFEDXmppDiagnosticResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetSIPFEDXmppDiagnosticResult, OperationIDs.OPID_asnMgmtGetSIPFEDXmppDiagnostic, "asnMgmtGetSIPFEDXmppDiagnostic", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDXmppDiagnosticResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetLineForwardingArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetLineForwardingResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetLineForwarding(argument: ENetUC_Mgmt.AsnMgmtGetLineForwardingArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetLineForwardingResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetLineForwardingResult, OperationIDs.OPID_asnMgmtGetLineForwarding, "asnMgmtGetLineForwarding", Converter.AsnMgmtGetLineForwardingArgument_Converter, Converter.AsnMgmtGetLineForwardingResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetLineForwardingArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetLineForwarding(argument: ENetUC_Mgmt.AsnMgmtSetLineForwardingArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetLineForwarding, "asnMgmtSetLineForwarding", Converter.AsnMgmtSetLineForwardingArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetXMLAvailableLanguagesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetXMLAvailableLanguages(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetXMLAvailableLanguagesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetXMLAvailableLanguagesResult, OperationIDs.OPID_asnMgmtGetXMLAvailableLanguages, "asnMgmtGetXMLAvailableLanguages", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetXMLAvailableLanguagesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Start Upgrade on Server running in administrative Mode.
	 * This function is used to start the chat database conversion when server is ugraded from version 5 to 6.
	 * Progress is reported back to Admin with OPID_asnMgmtUpgradeProgress Events
	 *
	 * @param argument - An AsnMgmtUpgradeStartArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtUpgradeStartResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtUpgradeStart(argument: ENetUC_Mgmt.AsnMgmtUpgradeStartArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtUpgradeStartResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtUpgradeStartResult, OperationIDs.OPID_asnMgmtUpgradeStart, "asnMgmtUpgradeStart", Converter.AsnMgmtUpgradeStartArgument_Converter, Converter.AsnMgmtUpgradeStartResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Get the List of Push Service Device Registrations
	 * This function initiates the Transfer of the currently active Push Service Devices.
	 * The Events, that send the result content are sent before this operation returns.
	 *
	 * @param argument - An AsnMgmtGetPushServiceDevicesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetPushServiceDevicesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetPushServiceDevices(argument: ENetUC_Mgmt.AsnMgmtGetPushServiceDevicesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetPushServiceDevicesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetPushServiceDevicesResult, OperationIDs.OPID_asnMgmtGetPushServiceDevices, "asnMgmtGetPushServiceDevices", Converter.AsnMgmtGetPushServiceDevicesArgument_Converter, Converter.AsnMgmtGetPushServiceDevicesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Delete an active Push Service Device Registration
	 * This function deletes the Device Registration.
	 *
	 * @param argument - An AsnMgmtDeletePushServiceDeviceArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtDeletePushServiceDeviceResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtDeletePushServiceDevice(argument: ENetUC_Mgmt.AsnMgmtDeletePushServiceDeviceArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtDeletePushServiceDeviceResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtDeletePushServiceDeviceResult, OperationIDs.OPID_asnMgmtDeletePushServiceDevice, "asnMgmtDeletePushServiceDevice", Converter.AsnMgmtDeletePushServiceDeviceArgument_Converter, Converter.AsnMgmtDeletePushServiceDeviceResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetPhoneJournalSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSetPhoneJournalSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetPhoneJournalSettings(argument: ENetUC_Mgmt.AsnMgmtSetPhoneJournalSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSetPhoneJournalSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSetPhoneJournalSettingsResult, OperationIDs.OPID_asnMgmtSetPhoneJournalSettings, "asnMgmtSetPhoneJournalSettings", Converter.AsnMgmtSetPhoneJournalSettingsArgument_Converter, Converter.AsnMgmtSetPhoneJournalSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetPhoneJournalSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetPhoneJournalSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetPhoneJournalSettings(argument: ENetUC_Mgmt.AsnMgmtGetPhoneJournalSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetPhoneJournalSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetPhoneJournalSettingsResult, OperationIDs.OPID_asnMgmtGetPhoneJournalSettings, "asnMgmtGetPhoneJournalSettings", Converter.AsnMgmtGetPhoneJournalSettingsArgument_Converter, Converter.AsnMgmtGetPhoneJournalSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminAddComputerProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminAddComputerProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtAddComputerProfile(argument: ENetUC_Admin.AsnAdminAddComputerProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminAddComputerProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminAddComputerProfileResult, OperationIDs.OPID_asnMgmtAddComputerProfile, "asnMgmtAddComputerProfile", ENetUC_Admin_Converter.AsnAdminAddComputerProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminAddComputerProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminGetComputerProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminGetComputerProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetComputerProfile(argument: ENetUC_Admin.AsnAdminGetComputerProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminGetComputerProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminGetComputerProfileResult, OperationIDs.OPID_asnMgmtGetComputerProfile, "asnMgmtGetComputerProfile", ENetUC_Admin_Converter.AsnAdminGetComputerProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminGetComputerProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminSetComputerProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminSetComputerProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetComputerProfile(argument: ENetUC_Admin.AsnAdminSetComputerProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminSetComputerProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminSetComputerProfileResult, OperationIDs.OPID_asnMgmtSetComputerProfile, "asnMgmtSetComputerProfile", ENetUC_Admin_Converter.AsnAdminSetComputerProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminSetComputerProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminAddGroupProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminAddGroupProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtAddGroupProfile(argument: ENetUC_Admin.AsnAdminAddGroupProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminAddGroupProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminAddGroupProfileResult, OperationIDs.OPID_asnMgmtAddGroupProfile, "asnMgmtAddGroupProfile", ENetUC_Admin_Converter.AsnAdminAddGroupProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminAddGroupProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminRemoveGroupProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminRemoveGroupProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtRemoveGroupProfile(argument: ENetUC_Admin.AsnAdminRemoveGroupProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminRemoveGroupProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminRemoveGroupProfileResult, OperationIDs.OPID_asnMgmtRemoveGroupProfile, "asnMgmtRemoveGroupProfile", ENetUC_Admin_Converter.AsnAdminRemoveGroupProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminRemoveGroupProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminFindGroupProfilesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminFindGroupProfilesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtFindGroupProfiles(argument: ENetUC_Admin.AsnAdminFindGroupProfilesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminFindGroupProfilesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminFindGroupProfilesResult, OperationIDs.OPID_asnMgmtFindGroupProfiles, "asnMgmtFindGroupProfiles", ENetUC_Admin_Converter.AsnAdminFindGroupProfilesArgument_Converter, ENetUC_Admin_Converter.AsnAdminFindGroupProfilesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetGroupProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSetGroupProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetGroupProfile(argument: ENetUC_Mgmt.AsnMgmtSetGroupProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSetGroupProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSetGroupProfileResult, OperationIDs.OPID_asnMgmtSetGroupProfile, "asnMgmtSetGroupProfile", Converter.AsnMgmtSetGroupProfileArgument_Converter, Converter.AsnMgmtSetGroupProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminAddUserProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminAddUserProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtAddUserProfile(argument: ENetUC_Admin.AsnAdminAddUserProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminAddUserProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminAddUserProfileResult, OperationIDs.OPID_asnMgmtAddUserProfile, "asnMgmtAddUserProfile", ENetUC_Admin_Converter.AsnAdminAddUserProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminAddUserProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminRemoveUserProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminRemoveUserProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtRemoveUserProfile(argument: ENetUC_Admin.AsnAdminRemoveUserProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminRemoveUserProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminRemoveUserProfileResult, OperationIDs.OPID_asnMgmtRemoveUserProfile, "asnMgmtRemoveUserProfile", ENetUC_Admin_Converter.AsnAdminRemoveUserProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminRemoveUserProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminGetUserProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminGetUserProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUserProfile(argument: ENetUC_Admin.AsnAdminGetUserProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminGetUserProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminGetUserProfileResult, OperationIDs.OPID_asnMgmtGetUserProfile, "asnMgmtGetUserProfile", ENetUC_Admin_Converter.AsnAdminGetUserProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminGetUserProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetUserManagerSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetUserManagerSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUserManagerSettings(argument: ENetUC_Admin.AsnGetUserManagerSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnGetUserManagerSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnGetUserManagerSettingsResult, OperationIDs.OPID_asnMgmtGetUserManagerSettings, "asnMgmtGetUserManagerSettings", ENetUC_Admin_Converter.AsnGetUserManagerSettingsArgument_Converter, ENetUC_Admin_Converter.AsnGetUserManagerSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetAvailableLinesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetAvailableLinesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetAvailableLines(argument: ENetUC_Admin.AsnGetAvailableLinesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnGetAvailableLinesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnGetAvailableLinesResult, OperationIDs.OPID_asnMgmtGetAvailableLines, "asnMgmtGetAvailableLines", ENetUC_Admin_Converter.AsnGetAvailableLinesArgument_Converter, ENetUC_Admin_Converter.AsnGetAvailableLinesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetNetworkInterfacePortsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetNetworkInterfacePortsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetNetworkInterfacePorts(argument: ENetUC_Admin.AsnGetNetworkInterfacePortsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnGetNetworkInterfacePortsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnGetNetworkInterfacePortsResult, OperationIDs.OPID_asnMgmtGetNetworkInterfacePorts, "asnMgmtGetNetworkInterfacePorts", ENetUC_Admin_Converter.AsnGetNetworkInterfacePortsArgument_Converter, ENetUC_Admin_Converter.AsnGetNetworkInterfacePortsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * operations
	 *
	 * @param argument - An AsnMgmtChatSettings object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetChatSettings(argument: ENetUC_Mgmt.AsnMgmtChatSettings, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetChatSettings, "asnMgmtSetChatSettings", Converter.AsnMgmtChatSettings_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtChatSettings, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetChatSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtChatSettings | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtChatSettings, OperationIDs.OPID_asnMgmtGetChatSettings, "asnMgmtGetChatSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtChatSettings_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtMeshControllerSettings object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetMeshSettings(argument: ENetUC_Mgmt.AsnMgmtMeshControllerSettings, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetMeshSettings, "asnMgmtSetMeshSettings", Converter.AsnMgmtMeshControllerSettings_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtMeshControllerSettings, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetMeshSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtMeshControllerSettings | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtMeshControllerSettings, OperationIDs.OPID_asnMgmtGetMeshSettings, "asnMgmtGetMeshSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtMeshControllerSettings_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetMeshNodeConfigsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetMeshNodeConfigs(argument: ENetUC_Mgmt.AsnMgmtSetMeshNodeConfigsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetMeshNodeConfigs, "asnMgmtSetMeshNodeConfigs", Converter.AsnMgmtSetMeshNodeConfigsArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetMeshNodeConfigsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetMeshNodeConfigs(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetMeshNodeConfigsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetMeshNodeConfigsResult, OperationIDs.OPID_asnMgmtGetMeshNodeConfigs, "asnMgmtGetMeshNodeConfigs", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetMeshNodeConfigsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetMeshNodeStatusesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetMeshNodeStatuses(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetMeshNodeStatusesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetMeshNodeStatusesResult, OperationIDs.OPID_asnMgmtGetMeshNodeStatuses, "asnMgmtGetMeshNodeStatuses", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetMeshNodeStatusesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Subscribe ConnectionInformationChanges
	 *
	 * @param argument - An AsnMgmtSubscribeConnectionInformationChangesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSubscribeConnectionInformationChangesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSubscribeConnectionInformationChanges(argument: ENetUC_Mgmt.AsnMgmtSubscribeConnectionInformationChangesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSubscribeConnectionInformationChangesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSubscribeConnectionInformationChangesResult, OperationIDs.OPID_asnMgmtSubscribeConnectionInformationChanges, "asnMgmtSubscribeConnectionInformationChanges", Converter.AsnMgmtSubscribeConnectionInformationChangesArgument_Converter, Converter.AsnMgmtSubscribeConnectionInformationChangesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * UnSubscribe from capability changes
	 *
	 * @param argument - An AsnMgmtUnSubscribeConnectionInformationChangesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtUnSubscribeConnectionInformationChangesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtUnSubscribeConnectionInformationChanges(argument: ENetUC_Mgmt.AsnMgmtUnSubscribeConnectionInformationChangesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtUnSubscribeConnectionInformationChangesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtUnSubscribeConnectionInformationChangesResult, OperationIDs.OPID_asnMgmtUnSubscribeConnectionInformationChanges, "asnMgmtUnSubscribeConnectionInformationChanges", Converter.AsnMgmtUnSubscribeConnectionInformationChangesArgument_Converter, Converter.AsnMgmtUnSubscribeConnectionInformationChangesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * UnSubscribe from capability changes
	 *
	 * @param argument - An AsnMgmtDisconnectClientArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtDisconnectClientResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtDisconnectClient(argument: ENetUC_Mgmt.AsnMgmtDisconnectClientArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtDisconnectClientResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtDisconnectClientResult, OperationIDs.OPID_asnMgmtDisconnectClient, "asnMgmtDisconnectClient", Converter.AsnMgmtDisconnectClientArgument_Converter, Converter.AsnMgmtDisconnectClientResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGDPREraseArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGDPREraseResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGDPRErase(argument: ENetUC_Mgmt.AsnMgmtGDPREraseArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGDPREraseResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGDPREraseResult, OperationIDs.OPID_asnMgmtGDPRErase, "asnMgmtGDPRErase", Converter.AsnMgmtGDPREraseArgument_Converter, Converter.AsnMgmtGDPREraseResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * GDPR function for finding more specific GDPR contact entries.
	 *
	 * @param argument - An AsnMgmtGDPRFindContactsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGDPRFindContactsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGDPRFindContacts(argument: ENetUC_Mgmt.AsnMgmtGDPRFindContactsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGDPRFindContactsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGDPRFindContactsResult, OperationIDs.OPID_asnMgmtGDPRFindContacts, "asnMgmtGDPRFindContacts", Converter.AsnMgmtGDPRFindContactsArgument_Converter, Converter.AsnMgmtGDPRFindContactsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Check if Database Update is Running
	 * This function is used to check if a Database Update is running in background after Server Start
	 * Progress is reported back to Admin with OPID_asnMgmtUpdateDatabaseProgress Events
	 *
	 * @param argument - An AsnMgmtDatabaseUpdateInProgressArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtDatabaseUpdateInProgressResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtDatabaseUpdateInProgress(argument: ENetUC_Mgmt.AsnMgmtDatabaseUpdateInProgressArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtDatabaseUpdateInProgressResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtDatabaseUpdateInProgressResult, OperationIDs.OPID_asnMgmtDatabaseUpdateInProgress, "asnMgmtDatabaseUpdateInProgress", Converter.AsnMgmtDatabaseUpdateInProgressArgument_Converter, Converter.AsnMgmtDatabaseUpdateInProgressResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Retrieve the Settings of the BinaryTransferManager
	 *
	 * @param argument - An AsnMgmtGetBinaryTransferSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetBinaryTransferSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetBinaryTransferSettings(argument: ENetUC_Mgmt.AsnMgmtGetBinaryTransferSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetBinaryTransferSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetBinaryTransferSettingsResult, OperationIDs.OPID_asnMgmtGetBinaryTransferSettings, "asnMgmtGetBinaryTransferSettings", Converter.AsnMgmtGetBinaryTransferSettingsArgument_Converter, Converter.AsnMgmtGetBinaryTransferSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Set the Settings of the BinaryTransferManager
	 *
	 * @param argument - An AsnMgmtSetBinaryTransferSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSetBinaryTransferSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetBinaryTransferSettings(argument: ENetUC_Mgmt.AsnMgmtSetBinaryTransferSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSetBinaryTransferSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSetBinaryTransferSettingsResult, OperationIDs.OPID_asnMgmtSetBinaryTransferSettings, "asnMgmtSetBinaryTransferSettings", Converter.AsnMgmtSetBinaryTransferSettingsArgument_Converter, Converter.AsnMgmtSetBinaryTransferSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Subscribe ConnectionInformationChanges
	 *
	 * @param argument - An AsnMgmtGetConnectionOptionsDNSArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetConnectionOptionsDNSResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetConnectionOptionsDNS(argument: ENetUC_Mgmt.AsnMgmtGetConnectionOptionsDNSArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetConnectionOptionsDNSResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetConnectionOptionsDNSResult, OperationIDs.OPID_asnMgmtGetConnectionOptionsDNS, "asnMgmtGetConnectionOptionsDNS", Converter.AsnMgmtGetConnectionOptionsDNSArgument_Converter, Converter.AsnMgmtGetConnectionOptionsDNSResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Retrieve the Settings of the ConfigurationManager
	 *
	 * @param argument - An AsnMgmtGetConfigurationManagerSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetConfigurationManagerSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetConfigurationManagerSettings(argument: ENetUC_Mgmt.AsnMgmtGetConfigurationManagerSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetConfigurationManagerSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetConfigurationManagerSettingsResult, OperationIDs.OPID_asnMgmtGetConfigurationManagerSettings, "asnMgmtGetConfigurationManagerSettings", Converter.AsnMgmtGetConfigurationManagerSettingsArgument_Converter, Converter.AsnMgmtGetConfigurationManagerSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Set the Settings of the ConfigurationManager
	 *
	 * @param argument - An AsnMgmtSetConfigurationManagerSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSetConfigurationManagerSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetConfigurationManagerSettings(argument: ENetUC_Mgmt.AsnMgmtSetConfigurationManagerSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSetConfigurationManagerSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSetConfigurationManagerSettingsResult, OperationIDs.OPID_asnMgmtSetConfigurationManagerSettings, "asnMgmtSetConfigurationManagerSettings", Converter.AsnMgmtSetConfigurationManagerSettingsArgument_Converter, Converter.AsnMgmtSetConfigurationManagerSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Delete the given configuration setting from storage (i.e. from xml or remote db)
	 *
	 * @param argument - An AsnMgmtDirectPersistDeleteSettingArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtDirectPersistDeleteSetting(argument: ENetUC_Mgmt.AsnMgmtDirectPersistDeleteSettingArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtDirectPersistDeleteSetting, "asnMgmtDirectPersistDeleteSetting", Converter.AsnMgmtDirectPersistDeleteSettingArgument_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Test if configuration manager can connect with the database (via web service)
	 *
	 * @param argument - An AsnMgmtTestConfigurationManagerDBArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtTestConfigurationManagerDBResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtTestConfigurationManagerDB(argument: ENetUC_Mgmt.AsnMgmtTestConfigurationManagerDBArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtTestConfigurationManagerDBResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtTestConfigurationManagerDBResult, OperationIDs.OPID_asnMgmtTestConfigurationManagerDB, "asnMgmtTestConfigurationManagerDB", Converter.AsnMgmtTestConfigurationManagerDBArgument_Converter, Converter.AsnMgmtTestConfigurationManagerDBResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Get UserManager Connection status
	 *
	 * @param argument - An AsnMgmtGetUserManagerConnectionStatusArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetUserManagerConnectionStatusResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetUserManagerConnectionStatus(argument: ENetUC_Mgmt.AsnMgmtGetUserManagerConnectionStatusArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetUserManagerConnectionStatusResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetUserManagerConnectionStatusResult, OperationIDs.OPID_asnMgmtGetUserManagerConnectionStatus, "asnMgmtGetUserManagerConnectionStatus", Converter.AsnMgmtGetUserManagerConnectionStatusArgument_Converter, Converter.AsnMgmtGetUserManagerConnectionStatusResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtClientPersistenceDeleteArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtClientPersistenceDeleteResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtClientPersistenceDelete(argument: ENetUC_Mgmt.AsnMgmtClientPersistenceDeleteArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtClientPersistenceDeleteResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtClientPersistenceDeleteResult, OperationIDs.OPID_asnMgmtClientPersistenceDelete, "asnMgmtClientPersistenceDelete", Converter.AsnMgmtClientPersistenceDeleteArgument_Converter, Converter.AsnMgmtClientPersistenceDeleteResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtClientPersistenceCreateArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtClientPersistenceCreateResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtClientPersistenceCreate(argument: ENetUC_Mgmt.AsnMgmtClientPersistenceCreateArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtClientPersistenceCreateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtClientPersistenceCreateResult, OperationIDs.OPID_asnMgmtClientPersistenceCreate, "asnMgmtClientPersistenceCreate", Converter.AsnMgmtClientPersistenceCreateArgument_Converter, Converter.AsnMgmtClientPersistenceCreateResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Get configuration manager status (i.e. multi server status)
	 *
	 * @param argument - An AsnMgmtGetConfigurationManagerStatusArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetConfigurationManagerStatusResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetConfigurationManagerStatus(argument: ENetUC_Mgmt.AsnMgmtGetConfigurationManagerStatusArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetConfigurationManagerStatusResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetConfigurationManagerStatusResult, OperationIDs.OPID_asnMgmtGetConfigurationManagerStatus, "asnMgmtGetConfigurationManagerStatus", Converter.AsnMgmtGetConfigurationManagerStatusArgument_Converter, Converter.AsnMgmtGetConfigurationManagerStatusResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Get configuration manager server list (all servers participating in multiserver verbund)
	 * If a ucserver connects to a remote database ist is automatically added to this server list
	 *
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetConfigurationManagerServerListResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetConfigurationManagerServerList(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetConfigurationManagerServerListResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetConfigurationManagerServerListResult, OperationIDs.OPID_asnMgmtGetConfigurationManagerServerList, "asnMgmtGetConfigurationManagerServerList", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetConfigurationManagerServerListResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtCleanupBinaryTransferFilesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtCleanupBinaryTransferFilesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtCleanupBinaryTransferFiles(argument: ENetUC_Mgmt.AsnMgmtCleanupBinaryTransferFilesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtCleanupBinaryTransferFilesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtCleanupBinaryTransferFilesResult, OperationIDs.OPID_asnMgmtCleanupBinaryTransferFiles, "asnMgmtCleanupBinaryTransferFiles", Converter.AsnMgmtCleanupBinaryTransferFilesArgument_Converter, Converter.AsnMgmtCleanupBinaryTransferFilesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetPresenceDomainArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSetPresenceDomainResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetPresenceDomain(argument: ENetUC_Mgmt.AsnMgmtSetPresenceDomainArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSetPresenceDomainResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSetPresenceDomainResult, OperationIDs.OPID_asnMgmtSetPresenceDomain, "asnMgmtSetPresenceDomain", Converter.AsnMgmtSetPresenceDomainArgument_Converter, Converter.AsnMgmtSetPresenceDomainResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetAdminUserManagerSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetAdminUserManagerSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetAdminUserManagerSettings(argument: ENetUC_Mgmt.AsnMgmtGetAdminUserManagerSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetAdminUserManagerSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetAdminUserManagerSettingsResult, OperationIDs.OPID_asnMgmtGetAdminUserManagerSettings, "asnMgmtGetAdminUserManagerSettings", Converter.AsnMgmtGetAdminUserManagerSettingsArgument_Converter, Converter.AsnMgmtGetAdminUserManagerSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtSetAdminUserManagerSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtSetAdminUserManagerSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetAdminUserManagerSettings(argument: ENetUC_Mgmt.AsnMgmtSetAdminUserManagerSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtSetAdminUserManagerSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtSetAdminUserManagerSettingsResult, OperationIDs.OPID_asnMgmtSetAdminUserManagerSettings, "asnMgmtSetAdminUserManagerSettings", Converter.AsnMgmtSetAdminUserManagerSettingsArgument_Converter, Converter.AsnMgmtSetAdminUserManagerSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetAdminUserRightsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtGetAdminUserRightsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetAdminUserRights(argument: ENetUC_Mgmt.AsnMgmtGetAdminUserRightsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtGetAdminUserRightsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtGetAdminUserRightsResult, OperationIDs.OPID_asnMgmtGetAdminUserRights, "asnMgmtGetAdminUserRights", Converter.AsnMgmtGetAdminUserRightsArgument_Converter, Converter.AsnMgmtGetAdminUserRightsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Set the settings for the entra id replicator
	 *
	 * @added 01.07.2024
	 *
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEntraIdSettings, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtGetEntraIdSettings(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEntraIdSettings | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEntraIdSettings, OperationIDs.OPID_asnMgmtGetEntraIdSettings, "asnMgmtGetEntraIdSettings", Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEntraIdSettings_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Get the current settings from the entra id replicator
	 *
	 * @added 01.07.2024
	 *
	 * @param argument - An AsnMgmtEntraIdSettings object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnMgmtEmpty, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnMgmtSetEntraIdSettings(argument: ENetUC_Mgmt.AsnMgmtEntraIdSettings, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Mgmt.AsnMgmtEmpty | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Mgmt.AsnMgmtEmpty, OperationIDs.OPID_asnMgmtSetEntraIdSettings, "asnMgmtSetEntraIdSettings", Converter.AsnMgmtEntraIdSettings_Converter, Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * You have called asnMgmtGetUserProfiles() and get your results here (50 user profiles every this event)
	 *
	 * @param argument - An AsnMgmtGetUserProfilesResultArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtGetUserProfilesResult(argument: ENetUC_Mgmt.AsnMgmtGetUserProfilesResultArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtGetUserProfilesResult, "asnMgmtGetUserProfilesResult", Converter.AsnMgmtGetUserProfilesResultArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetUserListEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtGetUserListEvent(argument: ENetUC_Mgmt.AsnMgmtGetUserListEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtGetUserListEvent, "asnMgmtGetUserListEvent", Converter.AsnMgmtGetUserListEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetGroupsEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtGetGroupsEvent(argument: ENetUC_Mgmt.AsnMgmtGetGroupsEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtGetGroupsEvent, "asnMgmtGetGroupsEvent", Converter.AsnMgmtGetGroupsEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtComputerFoundEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtComputerFoundEvent(argument: ENetUC_Mgmt.AsnMgmtComputerFoundEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtComputerFoundEvent, "asnMgmtComputerFoundEvent", Converter.AsnMgmtComputerFoundEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtSoftwarePacketsChanged(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtSoftwarePacketsChanged, "asnMgmtSoftwarePacketsChanged", Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Software install status on a computer changed event
	 * This event is fired when the software install state onm a computer changed.
	 * This happens during a remote software install operation or a client software update procedure.
	 *
	 * @param argument - An AsnMgmtSoftwareStatusComputerChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtSoftwareStatusComputerChanged(argument: ENetUC_Mgmt.AsnMgmtSoftwareStatusComputerChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtSoftwareStatusComputerChanged, "asnMgmtSoftwareStatusComputerChanged", Converter.AsnMgmtSoftwareStatusComputerChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEUCWebServicesStatus object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtUpdateSoftwareStatusComputerChanged(argument: ENetUC_Mgmt.AsnMgmtEUCWebServicesStatus, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtUpdateSoftwareStatusComputerChanged, "asnMgmtUpdateSoftwareStatusComputerChanged", Converter.AsnMgmtEUCWebServicesStatus_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtGetLineStatesEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtGetLineStatesEvent(argument: ENetUC_Mgmt.AsnMgmtGetLineStatesEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtGetLineStatesEvent, "asnMgmtGetLineStatesEvent", Converter.AsnMgmtGetLineStatesEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Line State changed event
	 * This event is fired from the server to the client.
	 * It indicates, that the state of a CTI line has changed.
	 *
	 * @param argument - An AsnMgmtLineStateChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtLineStateChanged(argument: ENetUC_Mgmt.AsnMgmtLineStateChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtLineStateChanged, "asnMgmtLineStateChanged", Converter.AsnMgmtLineStateChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtOnLineRemovedEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnLineRemovedEvent(argument: ENetUC_Mgmt.AsnMgmtOnLineRemovedEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnLineRemovedEvent, "asnMgmtOnLineRemovedEvent", Converter.AsnMgmtOnLineRemovedEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtOnLineAddedEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnLineAddedEvent(argument: ENetUC_Mgmt.AsnMgmtOnLineAddedEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnLineAddedEvent, "asnMgmtOnLineAddedEvent", Converter.AsnMgmtOnLineAddedEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtOnLineConfigChangedEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnLineConfigChangedEvent(argument: ENetUC_Mgmt.AsnMgmtOnLineConfigChangedEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnLineConfigChangedEvent, "asnMgmtOnLineConfigChangedEvent", Converter.AsnMgmtOnLineConfigChangedEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtOnLineCapsChangedEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnLineCapsChangedEvent(argument: ENetUC_Mgmt.AsnMgmtOnLineCapsChangedEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnLineCapsChangedEvent, "asnMgmtOnLineCapsChangedEvent", Converter.AsnMgmtOnLineCapsChangedEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Wird als Antwort auf asnMgmtGetLinesForSource geschickt
	 *
	 * @param argument - An AsnMgmtOnCtiLineFoundEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnCtiLineFoundEvent(argument: ENetUC_Mgmt.AsnMgmtOnCtiLineFoundEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnCtiLineFoundEvent, "asnMgmtOnCtiLineFoundEvent", Converter.AsnMgmtOnCtiLineFoundEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtOnLineGroupAddedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnLineGroupAdded(argument: ENetUC_Mgmt.AsnMgmtOnLineGroupAddedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnLineGroupAdded, "asnMgmtOnLineGroupAdded", Converter.AsnMgmtOnLineGroupAddedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtOnLineGroupChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnLineGroupConfigChangedEvent(argument: ENetUC_Mgmt.AsnMgmtOnLineGroupChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnLineGroupConfigChangedEvent, "asnMgmtOnLineGroupConfigChangedEvent", Converter.AsnMgmtOnLineGroupChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtOnLineGroupRemovedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnLineGroupRemoved(argument: ENetUC_Mgmt.AsnMgmtOnLineGroupRemovedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnLineGroupRemoved, "asnMgmtOnLineGroupRemoved", Converter.AsnMgmtOnLineGroupRemovedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtOnLineEvent4AdminEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnLineEvent4AdminEvent(argument: ENetUC_Mgmt.AsnMgmtOnLineEvent4AdminEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnLineEvent4AdminEvent, "asnMgmtOnLineEvent4AdminEvent", Converter.AsnMgmtOnLineEvent4AdminEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtOnLicensesHaveChangedEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnLicensesHaveChangedEvent(argument: ENetUC_Mgmt.AsnMgmtOnLicensesHaveChangedEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnLicensesHaveChangedEvent, "asnMgmtOnLicensesHaveChangedEvent", Converter.AsnMgmtOnLicensesHaveChangedEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEUCWebServicesStatus object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtUCWebServiceStatusChanged(argument: ENetUC_Mgmt.AsnMgmtEUCWebServicesStatus, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtUCWebServiceStatusChanged, "asnMgmtUCWebServiceStatusChanged", Converter.AsnMgmtEUCWebServicesStatus_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtOnListenInterfaceStatusesEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnListenInterfaceStatusesEvent(argument: ENetUC_Mgmt.AsnMgmtOnListenInterfaceStatusesEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesEvent, "asnMgmtOnListenInterfaceStatusesEvent", Converter.AsnMgmtOnListenInterfaceStatusesEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtOnListenInterfaceStatusesChangedEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtOnListenInterfaceStatusesChangedEvent(argument: ENetUC_Mgmt.AsnMgmtOnListenInterfaceStatusesChangedEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesChangedEvent, "asnMgmtOnListenInterfaceStatusesChangedEvent", Converter.AsnMgmtOnListenInterfaceStatusesChangedEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Location changed event
	 * This event is fired from the server to the client.
	 * It indicates, that the location information for the given locationID has changed.
	 * The client should reload the location information.
	 *
	 * @param argument - An AsnMgmtLocationChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtLocationChanged(argument: ENetUC_Mgmt.AsnMgmtLocationChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtLocationChanged, "asnMgmtLocationChanged", Converter.AsnMgmtLocationChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtFederationServerStatusChanged(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtFederationServerStatusChanged, "asnMgmtFederationServerStatusChanged", Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtFederationServerDiagnosticComplete(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtFederationServerDiagnosticComplete, "asnMgmtFederationServerDiagnosticComplete", Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Progress Event for Upgrade
	 * This event is sent periodically during Upgrade. Receiver can update a progress bar in the UI with this information.
	 *
	 * @param argument - An AsnMgmtUpgradeProgressArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtUpgradeProgress(argument: ENetUC_Mgmt.AsnMgmtUpgradeProgressArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtUpgradeProgress, "asnMgmtUpgradeProgress", Converter.AsnMgmtUpgradeProgressArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Event that contains the results of asnMgmtGetPushServiceDevices
	 * This event contains the data requested by asnMgmtGetPushServiceDevices.
	 * This event is fired multiple times, until bLastSegment is TRUE.
	 * The u8sCrossRefID matches the u8sCrossRefID from the asnMgmtGetPushServiceDevicesResult
	 *
	 * @param argument - An AsnMgmtPushServiceDevicesResultArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtPushServiceDevicesResult(argument: ENetUC_Mgmt.AsnMgmtPushServiceDevicesResultArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtPushServiceDevicesResult, "asnMgmtPushServiceDevicesResult", Converter.AsnMgmtPushServiceDevicesResultArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Event that contains changed Push Service Devices
	 * This event is fired when a Push Service Device Property Changes.
	 *
	 * @param argument - An AsnMgmtPushServiceDeviceChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtPushServiceDeviceChanged(argument: ENetUC_Mgmt.AsnMgmtPushServiceDeviceChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtPushServiceDeviceChanged, "asnMgmtPushServiceDeviceChanged", Converter.AsnMgmtPushServiceDeviceChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtRemoveComputerProfileEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtRemoveComputerProfileEvent(argument: ENetUC_Mgmt.AsnMgmtRemoveComputerProfileEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtRemoveComputerProfileEvent, "asnMgmtRemoveComputerProfileEvent", Converter.AsnMgmtRemoveComputerProfileEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtRemoveGroupProfileEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtRemoveGroupProfileEvent(argument: ENetUC_Mgmt.AsnMgmtRemoveGroupProfileEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtRemoveGroupProfileEvent, "asnMgmtRemoveGroupProfileEvent", Converter.AsnMgmtRemoveGroupProfileEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtRemoveUserProfileEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtRemoveUserProfileEvent(argument: ENetUC_Mgmt.AsnMgmtRemoveUserProfileEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtRemoveUserProfileEvent, "asnMgmtRemoveUserProfileEvent", Converter.AsnMgmtRemoveUserProfileEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtMeshNodeStatus object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtMeshNodeStatusChanged(argument: ENetUC_Mgmt.AsnMgmtMeshNodeStatus, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtMeshNodeStatusChanged, "asnMgmtMeshNodeStatusChanged", Converter.AsnMgmtMeshNodeStatus_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtEmpty object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtMeshUpdateConnections(argument: ENetUC_Mgmt.AsnMgmtEmpty, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtMeshUpdateConnections, "asnMgmtMeshUpdateConnections", Converter.AsnMgmtEmpty_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnMgmtConnectionInformationChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtConnectionInformationChanged(argument: ENetUC_Mgmt.AsnMgmtConnectionInformationChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtConnectionInformationChanged, "asnMgmtConnectionInformationChanged", Converter.AsnMgmtConnectionInformationChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Progress Event for Database Update
	 * This event is sent periodically during Databse Update. Receiver can update a progress bar in the UI with this information.
	 *
	 * @param argument - An AsnMgmtUpdateDatabaseProgressArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtUpdateDatabaseProgress(argument: ENetUC_Mgmt.AsnMgmtUpdateDatabaseProgressArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtUpdateDatabaseProgress, "asnMgmtUpdateDatabaseProgress", Converter.AsnMgmtUpdateDatabaseProgressArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Event to send AD Connection status
	 * This event will be sent to ucadmin if the status changes
	 *
	 * @param argument - An AsnMgmtUserManagerConnectionStatusChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtUserManagerConnectionStatusChanged(argument: ENetUC_Mgmt.AsnMgmtUserManagerConnectionStatusChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtUserManagerConnectionStatusChanged, "asnMgmtUserManagerConnectionStatusChanged", Converter.AsnMgmtUserManagerConnectionStatusChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Event to send configuration manager status
	 * This event will be sent to ucadmin if the status changes
	 *
	 * @param argument - An AsnMgmtConfigurationManagerStatusChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtConfigurationManagerStatusChanged(argument: ENetUC_Mgmt.AsnMgmtConfigurationManagerStatusChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtConfigurationManagerStatusChanged, "asnMgmtConfigurationManagerStatusChanged", Converter.AsnMgmtConfigurationManagerStatusChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Event to send configuration manager server list (all servers participating in multiserver verbund)
	 * If a ucserver connects to a remote database ist is automatically added to this server list
	 * This event will be sent to ucadmin if the server list is changed
	 *
	 * @param argument - An AsnMgmtConfigurationManagerServerListChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnMgmtConfigurationManagerServerListChanged(argument: ENetUC_Mgmt.AsnMgmtConfigurationManagerServerListChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnMgmtConfigurationManagerServerListChanged, "asnMgmtConfigurationManagerServerListChanged", Converter.AsnMgmtConfigurationManagerServerListChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEOnInvokeswitchCase]
	/**
	 * This is the central onInvoke method that is called whenever a method of this module is called.
	 * Based on the operationID we step into the decoding of the method argument and call the method in the handler.
	 * The result is then again encoded and send to the other side.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the metho in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled, ROSEResult for the invoke result, ROSEError for an error or undefined if an event was called
	 */
	public async onInvoke(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_MgmtROSE_Handler): Promise<ROSEReject | ROSEResult | ROSEError | undefined> {
		switch (invoke.operationID) {
			case OperationIDs.OPID_asnMgmtSetUserProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetUserProfile, ENetUC_Admin.AsnAdminSetUserProfileArgument, ENetUC_Admin_Converter.AsnAdminSetUserProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminSetUserProfileResult_Converter, handler, handler.onInvoke_asnMgmtSetUserProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtSetUserProfilesList:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetUserProfilesList, ENetUC_Admin.AsnAdminSetUserProfilesListArgument, ENetUC_Admin_Converter.AsnAdminSetUserProfilesListArgument_Converter, ENetUC_Admin_Converter.AsnAdminSetUserProfilesListResult_Converter, handler, handler.onInvoke_asnMgmtSetUserProfilesList, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUserProfiles:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUserProfiles, ENetUC_Mgmt.AsnMgmtGetUserProfilesArgument, Converter.AsnMgmtGetUserProfilesArgument_Converter, Converter.AsnMgmtGetUserProfilesResult_Converter, handler, handler.onInvoke_asnMgmtGetUserProfiles, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUsers:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUsers, ENetUC_Mgmt.AsnMgmtGetUsersArgument, Converter.AsnMgmtGetUsersArgument_Converter, Converter.AsnMgmtGetUsersResult_Converter, handler, handler.onInvoke_asnMgmtGetUsers, invokeContext);
			case OperationIDs.OPID_asnMgmtReloadUserConfig:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtReloadUserConfig, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtReloadUserConfig, invokeContext);
			case OperationIDs.OPID_asnMgmtUpdateActiveUserProfiles:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtUpdateActiveUserProfiles, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtUpdateActiveUserProfiles, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUMMode:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUMMode, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetUMModeResult_Converter, handler, handler.onInvoke_asnMgmtGetUMMode, invokeContext);
			case OperationIDs.OPID_asnMgmtSetUMMode:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetUMMode, ENetUC_Mgmt.AsnMgmtSetUMModeArgument, Converter.AsnMgmtSetUMModeArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetUMMode, invokeContext);
			case OperationIDs.OPID_asnMgmtTestUMInterface:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtTestUMInterface, ENetUC_Mgmt.AsnMgmtTestUMInterfaceArgument, Converter.AsnMgmtTestUMInterfaceArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtTestUMInterface, invokeContext);
			case OperationIDs.OPID_asnMgmtUserProfileGetLargeImage:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtUserProfileGetLargeImage, ENetUC_Mgmt.AsnMgmtUserProfileGetLargeImageArgument, Converter.AsnMgmtUserProfileGetLargeImageArgument_Converter, Converter.AsnMgmtUserProfileGetLargeImageResult_Converter, handler, handler.onInvoke_asnMgmtUserProfileGetLargeImage, invokeContext);
			case OperationIDs.OPID_asnMgmtSubscribeUserGroupComputerModifiedEvents:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSubscribeUserGroupComputerModifiedEvents, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSubscribeUserGroupComputerModifiedEvents, invokeContext);
			case OperationIDs.OPID_asnMgmtUnsubscribeUserGroupComputerModifiedEvents:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtUnsubscribeUserGroupComputerModifiedEvents, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtUnsubscribeUserGroupComputerModifiedEvents, invokeContext);
			case OperationIDs.OPID_asnMgmtGetGroups:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetGroups, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetGroupsResult_Converter, handler, handler.onInvoke_asnMgmtGetGroups, invokeContext);
			case OperationIDs.OPID_asnMgmtRemoveGroup:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtRemoveGroup, ENetUC_Mgmt.AsnMgmtRemoveGroupArgument, Converter.AsnMgmtRemoveGroupArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtRemoveGroup, invokeContext);
			case OperationIDs.OPID_asnMgmtGetGroupAgentPublicPresence:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetGroupAgentPublicPresence, ENetUC_Mgmt.AsnMgmtGetGroupAgentPublicPresenceArgument, Converter.AsnMgmtGetGroupAgentPublicPresenceArgument_Converter, Converter.AsnMgmtGetGroupAgentPublicPresenceResult_Converter, handler, handler.onInvoke_asnMgmtGetGroupAgentPublicPresence, invokeContext);
			case OperationIDs.OPID_asnMgmtGetComputers:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetComputers, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetComputersResult_Converter, handler, handler.onInvoke_asnMgmtGetComputers, invokeContext);
			case OperationIDs.OPID_asnMgmtRefreshComputerStatus:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtRefreshComputerStatus, ENetUC_Mgmt.AsnMgmtRefreshComputerStatusArgument, Converter.AsnMgmtRefreshComputerStatusArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtRefreshComputerStatus, invokeContext);
			case OperationIDs.OPID_asnMgmtClearComputerStatus:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtClearComputerStatus, ENetUC_Mgmt.AsnMgmtClearComputerStatusArgument, Converter.AsnMgmtClearComputerStatusArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtClearComputerStatus, invokeContext);
			case OperationIDs.OPID_asnMgmtRemoveComputer:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtRemoveComputer, ENetUC_Mgmt.AsnMgmtRemoveComputerArgument, Converter.AsnMgmtRemoveComputerArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtRemoveComputer, invokeContext);
			case OperationIDs.OPID_asnMgmtSetSMSManagerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetSMSManagerSettings, ENetUC_Mgmt.AsnMgmtSMSManagerSettings, Converter.AsnMgmtSMSManagerSettings_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetSMSManagerSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSMSManagerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSMSManagerSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtSMSManagerSettings_Converter, handler, handler.onInvoke_asnMgmtGetSMSManagerSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSMSProvider:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSMSProvider, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtWebSMSProviderList_Converter, handler, handler.onInvoke_asnMgmtGetSMSProvider, invokeContext);
			case OperationIDs.OPID_asnMgmtSendSMS:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSendSMS, ENetUC_Mgmt.AsnMgmtSendSMSArgument, Converter.AsnMgmtSendSMSArgument_Converter, Converter.AsnMgmtSendSMSResult_Converter, handler, handler.onInvoke_asnMgmtSendSMS, invokeContext);
			case OperationIDs.OPID_asnMgmtGetGoogleClientID:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetGoogleClientID, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGoogleClientID_Converter, handler, handler.onInvoke_asnMgmtGetGoogleClientID, invokeContext);
			case OperationIDs.OPID_asnMgmtSetGoogleClientID:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetGoogleClientID, ENetUC_Mgmt.AsnMgmtGoogleClientID, Converter.AsnMgmtGoogleClientID_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetGoogleClientID, invokeContext);
			case OperationIDs.OPID_asnMgmtGetClientInstallProfileComputerNames:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetClientInstallProfileComputerNames, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetClientInstallProfileComputerNamesResult_Converter, handler, handler.onInvoke_asnMgmtGetClientInstallProfileComputerNames, invokeContext);
			case OperationIDs.OPID_asnMgmtSendBroadcast:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSendBroadcast, ENetUC_Mgmt.AsnMgmtSendBroadcastArgument, Converter.AsnMgmtSendBroadcastArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSendBroadcast, invokeContext);
			case OperationIDs.OPID_asnMgmtGetClientInstallProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetClientInstallProfile, ENetUC_Mgmt.AsnMgmtGetClientInstallProfileArgument, Converter.AsnMgmtGetClientInstallProfileArgument_Converter, Converter.AsnMgmtGetClientInstallProfileResult_Converter, handler, handler.onInvoke_asnMgmtGetClientInstallProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtSetClientInstallProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetClientInstallProfile, ENetUC_Mgmt.AsnMgmtSetClientInstallProfileArgument, Converter.AsnMgmtSetClientInstallProfileArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetClientInstallProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtGetAvailableUpdates:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetAvailableUpdates, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetAvailableUpdatesResult_Converter, handler, handler.onInvoke_asnMgmtGetAvailableUpdates, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUpdateServiceSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUpdateServiceSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtUpdateServiceSettings_Converter, handler, handler.onInvoke_asnMgmtGetUpdateServiceSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetUpdateServiceSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetUpdateServiceSettings, ENetUC_Mgmt.AsnMgmtUpdateServiceSettings, Converter.AsnMgmtUpdateServiceSettings_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetUpdateServiceSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtConResetLine:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtConResetLine, ENetUC_Mgmt.AsnMgmtConResetLineArgument, Converter.AsnMgmtConResetLineArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtConResetLine, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLineSources:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLineSources, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetLineSourcesResult_Converter, handler, handler.onInvoke_asnMgmtGetLineSources, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLineSourceDeviceIDs:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLineSourceDeviceIDs, ENetUC_Mgmt.AsnMgmtGetLineSourceDeviceIDsArgument, Converter.AsnMgmtGetLineSourceDeviceIDsArgument_Converter, Converter.AsnMgmtGetLineSourceDeviceIDsResult_Converter, handler, handler.onInvoke_asnMgmtGetLineSourceDeviceIDs, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLinesForSource:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLinesForSource, ENetUC_Mgmt.AsnMgmtGetLinesForSourceArgument, Converter.AsnMgmtGetLinesForSourceArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtGetLinesForSource, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLineStates:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLineStates, ENetUC_Mgmt.AsnMgmtGetLineStatesArgument, Converter.AsnMgmtGetLineStatesArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtGetLineStates, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLineGroups:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLineGroups, ENetUC_Mgmt.AsnMgmtGetLineGroupsArgument, Converter.AsnMgmtGetLineGroupsArgument_Converter, Converter.AsnMgmtGetLineGroupsResult_Converter, handler, handler.onInvoke_asnMgmtGetLineGroups, invokeContext);
			case OperationIDs.OPID_asnMgmtUnsubscribeLineEvents:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtUnsubscribeLineEvents, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtUnsubscribeLineEvents, invokeContext);
			case OperationIDs.OPID_asnMgmtSubscribeLineEvents:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSubscribeLineEvents, ENetUC_Mgmt.AsnMgmtSubscribeLineEventsArgument, Converter.AsnMgmtSubscribeLineEventsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSubscribeLineEvents, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLineConfig:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLineConfig, ENetUC_Mgmt.AsnMgmtGetLineConfigArgument, Converter.AsnMgmtGetLineConfigArgument_Converter, Converter.AsnMgmtGetLineConfigResult_Converter, handler, handler.onInvoke_asnMgmtGetLineConfig, invokeContext);
			case OperationIDs.OPID_asnMgmtSetLineConfig:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetLineConfig, ENetUC_Mgmt.AsnMgmtSetLineConfigArgument, Converter.AsnMgmtSetLineConfigArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetLineConfig, invokeContext);
			case OperationIDs.OPID_asnMgmtDeleteLine:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtDeleteLine, ENetUC_Mgmt.AsnMgmtDeleteLineArgument, Converter.AsnMgmtDeleteLineArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtDeleteLine, invokeContext);
			case OperationIDs.OPID_asnMgmtETapiUIDllCallback:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtETapiUIDllCallback, ENetUC_Mgmt.AsnMgmtETapiUIDllCallbackArgument, Converter.AsnMgmtETapiUIDllCallbackArgument_Converter, Converter.AsnMgmtETapiUIDllCallbackResult_Converter, handler, handler.onInvoke_asnMgmtETapiUIDllCallback, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLineGroupConfig:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLineGroupConfig, ENetUC_Mgmt.AsnMgmtGetLineGroupConfigArgument, Converter.AsnMgmtGetLineGroupConfigArgument_Converter, Converter.AsnMgmtGetLineGroupConfigResult_Converter, handler, handler.onInvoke_asnMgmtGetLineGroupConfig, invokeContext);
			case OperationIDs.OPID_asnMgmtSetLineGroupConfig:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetLineGroupConfig, ENetUC_Mgmt.AsnMgmtSetLineGroupConfigArgument, Converter.AsnMgmtSetLineGroupConfigArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetLineGroupConfig, invokeContext);
			case OperationIDs.OPID_asnMgmtRequestPBXLineExists:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtRequestPBXLineExists, ENetUC_Mgmt.AsnMgmtRequestPBXLineExistsArgument, Converter.AsnMgmtRequestPBXLineExistsArgument_Converter, Converter.AsnMgmtRequestPBXLineExistsResult_Converter, handler, handler.onInvoke_asnMgmtRequestPBXLineExists, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUMInterfaceSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUMInterfaceSettings, ENetUC_Mgmt.AsnMgmtGetUMInterfaceSettingsArgument, Converter.AsnMgmtGetUMInterfaceSettingsArgument_Converter, Converter.AsnMgmtGetUMInterfaceSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetUMInterfaceSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetUMInterfaceSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetUMInterfaceSettings, ENetUC_Mgmt.AsnMgmtSetUMInterfaceSettingsArgument, Converter.AsnMgmtSetUMInterfaceSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetUMInterfaceSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUMSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUMSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetUMSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetUMSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetUMSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetUMSettings, ENetUC_Mgmt.AsnMgmtSetUMSettingsArgument, Converter.AsnMgmtSetUMSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetUMSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtAddLicense:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtAddLicense, ENetUC_Mgmt.AsnMgmtAddLicenseArgument, Converter.AsnMgmtAddLicenseArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtAddLicense, invokeContext);
			case OperationIDs.OPID_asnMgmtRemoveLicense:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtRemoveLicense, ENetUC_Mgmt.AsnMgmtRemoveLicenseArgument, Converter.AsnMgmtRemoveLicenseArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtRemoveLicense, invokeContext);
			case OperationIDs.OPID_asnMgmtSetLicenseGenuineStatus:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetLicenseGenuineStatus, ENetUC_Mgmt.AsnMgmtSetLicenseGenuineStatusArgument, Converter.AsnMgmtSetLicenseGenuineStatusArgument_Converter, Converter.AsnMgmtSetLicenseGenuineStatusResult_Converter, handler, handler.onInvoke_asnMgmtSetLicenseGenuineStatus, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLicense:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLicense, ENetUC_Mgmt.AsnMgmtGetLicenseArgument, Converter.AsnMgmtGetLicenseArgument_Converter, Converter.AsnMgmtGetLicenseResult_Converter, handler, handler.onInvoke_asnMgmtGetLicense, invokeContext);
			case OperationIDs.OPID_asnMgmtGetHasCurrentVersionLicenses:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetHasCurrentVersionLicenses, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetHasCurrentVersionLicensesResult_Converter, handler, handler.onInvoke_asnMgmtGetHasCurrentVersionLicenses, invokeContext);
			case OperationIDs.OPID_asnMgmtGetNumLicenses:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetNumLicenses, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetNumLicensesResult_Converter, handler, handler.onInvoke_asnMgmtGetNumLicenses, invokeContext);
			case OperationIDs.OPID_asnMgmtGetRemainingTrialDays:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetRemainingTrialDays, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetRemainingTrialDaysResult_Converter, handler, handler.onInvoke_asnMgmtGetRemainingTrialDays, invokeContext);
			case OperationIDs.OPID_asnMgmtGetHWID:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetHWID, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetHWIDResult_Converter, handler, handler.onInvoke_asnMgmtGetHWID, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUCWebServicesStatus:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUCWebServicesStatus, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEUCWebServicesStatus_Converter, handler, handler.onInvoke_asnMgmtGetUCWebServicesStatus, invokeContext);
			case OperationIDs.OPID_asnMgmtVerifyUCWebServicesConfig:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtVerifyUCWebServicesConfig, ENetUC_Mgmt.AsnMgmtEUCWebServiceConfig, Converter.AsnMgmtEUCWebServiceConfig_Converter, Converter.AsnMgmtEUCWSStatus_Converter, handler, handler.onInvoke_asnMgmtVerifyUCWebServicesConfig, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLocalWebServiceConfig4Admin:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLocalWebServiceConfig4Admin, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetLocalWebServiceConfig4AdminResult_Converter, handler, handler.onInvoke_asnMgmtGetLocalWebServiceConfig4Admin, invokeContext);
			case OperationIDs.OPID_asnMgmtGetWebServiceConfig4Admin:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetWebServiceConfig4Admin, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEUCWebServiceConfig4Admin_Converter, handler, handler.onInvoke_asnMgmtGetWebServiceConfig4Admin, invokeContext);
			case OperationIDs.OPID_asnMgmtSetWebServiceConfig4Admin:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetWebServiceConfig4Admin, ENetUC_Mgmt.AsnMgmtEUCWebServiceConfig4Admin, Converter.AsnMgmtEUCWebServiceConfig4Admin_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetWebServiceConfig4Admin, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUCConnectSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUCConnectSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtUCConnectSettings_Converter, handler, handler.onInvoke_asnMgmtGetUCConnectSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetUCConnectSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetUCConnectSettings, ENetUC_Mgmt.AsnMgmtUCConnectSettings, Converter.AsnMgmtUCConnectSettings_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetUCConnectSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSendMail:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSendMail, ENetUC_Mgmt.AsnMgmtSendMailArgument, Converter.AsnMgmtSendMailArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSendMail, invokeContext);
			case OperationIDs.OPID_asnMgmtSendInviteMail:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSendInviteMail, ENetUC_Mgmt.AsnMgmtSendInviteMailArgument, Converter.AsnMgmtSendInviteMailArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSendInviteMail, invokeContext);
			case OperationIDs.OPID_asnMgmtGetMailSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetMailSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEMailConnectorSettings_Converter, handler, handler.onInvoke_asnMgmtGetMailSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetMailSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetMailSettings, ENetUC_Mgmt.AsnMgmtEMailConnectorSettings, Converter.AsnMgmtEMailConnectorSettings_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetMailSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetTapiProblemSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetTapiProblemSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtTapiProblemSettings_Converter, handler, handler.onInvoke_asnMgmtGetTapiProblemSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetTapiProblemSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetTapiProblemSettings, ENetUC_Mgmt.AsnMgmtTapiProblemSettings, Converter.AsnMgmtTapiProblemSettings_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetTapiProblemSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetDatabaseManagerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetDatabaseManagerSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetDatabaseManagerSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetDatabaseManagerSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetDatabaseManagerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetDatabaseManagerSettings, ENetUC_Mgmt.AsnMgmtSetDatabaseManagerSettingsArgument, Converter.AsnMgmtSetDatabaseManagerSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetDatabaseManagerSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetAvailableDatabases:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetAvailableDatabases, ENetUC_Mgmt.AsnMgmtGetAvailableDatabasesArgument, Converter.AsnMgmtGetAvailableDatabasesArgument_Converter, Converter.AsnMgmtGetAvailableDatabasesResult_Converter, handler, handler.onInvoke_asnMgmtGetAvailableDatabases, invokeContext);
			case OperationIDs.OPID_asnMgmtGetListeningInterfaces:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetListeningInterfaces, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetListeningInterfacesResult_Converter, handler, handler.onInvoke_asnMgmtGetListeningInterfaces, invokeContext);
			case OperationIDs.OPID_asnMgmtSetListeningInterfaces:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetListeningInterfaces, ENetUC_Mgmt.AsnMgmtSetListeningInterfacesArgument, Converter.AsnMgmtSetListeningInterfacesArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetListeningInterfaces, invokeContext);
			case OperationIDs.OPID_asnMgmtGetListeningInterfaceStatuses:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetListeningInterfaceStatuses, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetListeningInterfaceStatusesResult_Converter, handler, handler.onInvoke_asnMgmtGetListeningInterfaceStatuses, invokeContext);
			case OperationIDs.OPID_asnMgmtDeleteLogfiles:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtDeleteLogfiles, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtDeleteLogfiles, invokeContext);
			case OperationIDs.OPID_asnMgmtAquireLoggerLock:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtAquireLoggerLock, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtAquireLoggerLock, invokeContext);
			case OperationIDs.OPID_asnMgmtReleaseLoggerLock:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtReleaseLoggerLock, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtReleaseLoggerLock, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLogFileSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLogFileSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetLogFileSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetLogFileSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetLogFileSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetLogFileSettings, ENetUC_Mgmt.AsnMgmtGetLogFileSettingsArgument, Converter.AsnMgmtGetLogFileSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetLogFileSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLocationInformationMgmt:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLocationInformationMgmt, ENetUC_Mgmt.AsnMgmtGetLocationInformationMgmtArgument, Converter.AsnMgmtGetLocationInformationMgmtArgument_Converter, Converter.AsnMgmtGetLocationInformationMgmtResult_Converter, handler, handler.onInvoke_asnMgmtGetLocationInformationMgmt, invokeContext);
			case OperationIDs.OPID_asnMgmtSetLocationInformationMgmt:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetLocationInformationMgmt, ENetUC_Mgmt.AsnMgmtSetLocationInformationMgmtArgument, Converter.AsnMgmtSetLocationInformationMgmtArgument_Converter, Converter.AsnMgmtSetLocationInformationMgmtResult_Converter, handler, handler.onInvoke_asnMgmtSetLocationInformationMgmt, invokeContext);
			case OperationIDs.OPID_asnMgmtDeleteLocation:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtDeleteLocation, ENetUC_Mgmt.AsnMgmtDeleteLocationArgument, Converter.AsnMgmtDeleteLocationArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtDeleteLocation, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLocationIDs:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLocationIDs, ENetROSEInterface.AsnGetLocationIDsArgument, ENetROSEInterface_Converter.AsnGetLocationIDsArgument_Converter, ENetROSEInterface_Converter.AsnGetLocationIDsResult_Converter, handler, handler.onInvoke_asnMgmtGetLocationIDs, invokeContext);
			case OperationIDs.OPID_asnMgmtGetCSTAServerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetCSTAServerSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetCSTAServerSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetCSTAServerSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetCSTAServerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetCSTAServerSettings, ENetUC_Mgmt.AsnMgmtSetCSTAServerSettingsArgument, Converter.AsnMgmtSetCSTAServerSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetCSTAServerSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSTUNandTURNSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSTUNandTURNSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSTUNandTURNSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetSTUNandTURNSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetSTUNandTURNSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetSTUNandTURNSettings, ENetUC_Mgmt.AsnMgmtSetSTUNandTURNSettingsArgument, Converter.AsnMgmtSetSTUNandTURNSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetSTUNandTURNSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSTUNandTURNConsumerConfig:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSTUNandTURNConsumerConfig, ENetUC_Mgmt.AsnMgmtGetSTUNandTURNConsumerConfigArgument, Converter.AsnMgmtGetSTUNandTURNConsumerConfigArgument_Converter, Converter.AsnMgmtGetSTUNandTURNConsumerConfigResult_Converter, handler, handler.onInvoke_asnMgmtGetSTUNandTURNConsumerConfig, invokeContext);
			case OperationIDs.OPID_asnMgmtGetDBManSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetDBManSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetDBManSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetDBManSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetDBManSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetDBManSettings, ENetUC_Mgmt.AsnMgmtGetDBManSettingsArgument, Converter.AsnMgmtGetDBManSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetDBManSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetXmppSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetXmppSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetXmppSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetXmppSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetXmppSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetXmppSettings, ENetUC_Mgmt.AsnMgmtSetXmppSettingsArgument, Converter.AsnMgmtSetXmppSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetXmppSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSIPFEDSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSIPFEDSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetSIPFEDSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetSIPFEDSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetSIPFEDSettings, ENetUC_Mgmt.AsnMgmtSetSIPFEDSettingsArgument, Converter.AsnMgmtSetSIPFEDSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetSIPFEDSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSIPFEDPubIPAdr:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSIPFEDPubIPAdr, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDPubIPAdrResult_Converter, handler, handler.onInvoke_asnMgmtGetSIPFEDPubIPAdr, invokeContext);
			case OperationIDs.OPID_asnMgmtStartSipFedXmppDiagnostics:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtStartSipFedXmppDiagnostics, ENetUC_Mgmt.AsnMgmtStartSipFedXmppDiagnosticsArgument, Converter.AsnMgmtStartSipFedXmppDiagnosticsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtStartSipFedXmppDiagnostics, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSIPFEDSrvState:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSIPFEDSrvState, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDSrvStateResult_Converter, handler, handler.onInvoke_asnMgmtGetSIPFEDSrvState, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSIPFEDNetState:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSIPFEDNetState, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDNetStateResult_Converter, handler, handler.onInvoke_asnMgmtGetSIPFEDNetState, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSIPGatewaySettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSIPGatewaySettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPGatewaySettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetSIPGatewaySettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetSIPGatewaySettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetSIPGatewaySettings, ENetUC_Mgmt.AsnMgmtSetSIPGatewaySettingsArgument, Converter.AsnMgmtSetSIPGatewaySettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetSIPGatewaySettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSIPGatewayNetState:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSIPGatewayNetState, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDNetStateResult_Converter, handler, handler.onInvoke_asnMgmtGetSIPGatewayNetState, invokeContext);
			case OperationIDs.OPID_asnMgmtSetSIPGatewaySettingsV2:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetSIPGatewaySettingsV2, ENetUC_Mgmt.AsnMgmtSetSIPGatewaySettingsV2Argument, Converter.AsnMgmtSetSIPGatewaySettingsV2Argument_Converter, Converter.AsnMgmtSetSIPGatewaySettingsV2Result_Converter, handler, handler.onInvoke_asnMgmtSetSIPGatewaySettingsV2, invokeContext);
			case OperationIDs.OPID_asnMgmtSetCallRecorderSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetCallRecorderSettings, ENetUC_Mgmt.AsnMgmtSetCallRecorderSettingsArgument, Converter.AsnMgmtSetCallRecorderSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetCallRecorderSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetCallRecorderSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetCallRecorderSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetCallRecorderSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetCallRecorderSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtLogin:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtLogin, ENetUC_Mgmt.AsnMgmtLoginArgument, Converter.AsnMgmtLoginArgument_Converter, Converter.AsnMgmtLoginResult_Converter, handler, handler.onInvoke_asnMgmtLogin, invokeContext);
			case OperationIDs.OPID_asnMgmtChangeLogin:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtChangeLogin, ENetUC_Mgmt.AsnMgmtChangeLoginArgument, Converter.AsnMgmtChangeLoginArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtChangeLogin, invokeContext);
			case OperationIDs.OPID_asnMgmtLoginV2:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtLoginV2, ENetUC_Common_Auth.AsnLoginV2Argument, ENetUC_Common_Auth_Converter.AsnLoginV2Argument_Converter, ENetUC_Common_Auth_Converter.AsnLoginV2Result_Converter, handler, handler.onInvoke_asnMgmtLoginV2, invokeContext);
			case OperationIDs.OPID_asnMgmtNegotiateInterfaceVersion:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtNegotiateInterfaceVersion, ENetUC_Transport.AsnNegotiateInterfaceVersionArgument, ENetUC_Transport_Converter.AsnNegotiateInterfaceVersionArgument_Converter, ENetUC_Transport_Converter.AsnNegotiateInterfaceVersionResult_Converter, handler, handler.onInvoke_asnMgmtNegotiateInterfaceVersion, invokeContext);
			case OperationIDs.OPID_asnMgmtMonGetServerStatistics:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtMonGetServerStatistics, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtMonGetServerStatisticsResult_Converter, handler, handler.onInvoke_asnMgmtMonGetServerStatistics, invokeContext);
			case OperationIDs.OPID_asnMgmtSaveSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSaveSettings, ENetUC_Mgmt.AsnMgmtSaveSettingsArgument, Converter.AsnMgmtSaveSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSaveSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtStartTLS:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtStartTLS, ENetUC_Mgmt.AsnMgmtStartTLSArgument, Converter.AsnMgmtStartTLSArgument_Converter, Converter.AsnMgmtStartTLSResult_Converter, handler, handler.onInvoke_asnMgmtStartTLS, invokeContext);
			case OperationIDs.OPID_asnMgmtGetServerVersion:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetServerVersion, ENetUC_Mgmt.AsnMgmtGetServerVersionArgument, Converter.AsnMgmtGetServerVersionArgument_Converter, Converter.AsnMgmtGetServerVersionResult_Converter, handler, handler.onInvoke_asnMgmtGetServerVersion, invokeContext);
			case OperationIDs.OPID_asnMgmtGetCtiServerType:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetCtiServerType, ENetUC_Mgmt.AsnMgmtGetCtiServerTypeArgument, Converter.AsnMgmtGetCtiServerTypeArgument_Converter, Converter.AsnMgmtGetCtiServerTypeResult_Converter, handler, handler.onInvoke_asnMgmtGetCtiServerType, invokeContext);
			case OperationIDs.OPID_asnMgmtGetIPInterfaceList:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetIPInterfaceList, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetIPInterfaceListResult_Converter, handler, handler.onInvoke_asnMgmtGetIPInterfaceList, invokeContext);
			case OperationIDs.OPID_asnMgmtCleanupJournal:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtCleanupJournal, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtCleanupJournal, invokeContext);
			case OperationIDs.OPID_asnMgmtRestartServer:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtRestartServer, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtRestartServer, invokeContext);
			case OperationIDs.OPID_asnMgmtRestartServerAndInstallDatabaseUpdates:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtRestartServerAndInstallDatabaseUpdates, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtRestartServerAndInstallDatabaseUpdates, invokeContext);
			case OperationIDs.OPID_asnMgmtFullSyncContactCache:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtFullSyncContactCache, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtFullSyncContactCache, invokeContext);
			case OperationIDs.OPID_asnMgmtSendPushCheck:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSendPushCheck, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtSendPushCheckResult_Converter, handler, handler.onInvoke_asnMgmtSendPushCheck, invokeContext);
			case OperationIDs.OPID_asnMgmtSetUCCheckServerCookie:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetUCCheckServerCookie, ENetUC_Mgmt.AsnMgmtSetUCCheckServerCookieArgument, Converter.AsnMgmtSetUCCheckServerCookieArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetUCCheckServerCookie, invokeContext);
			case OperationIDs.OPID_asnMgmtCommitSaveSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtCommitSaveSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtCommitSaveSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetNotificationSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetNotificationSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetNotificationSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetNotificationSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetNotificationSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetNotificationSettings, ENetUC_Mgmt.AsnMgmtSetNotificationSettingsArgument, Converter.AsnMgmtSetNotificationSettingsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetNotificationSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtFetchMetaDNs:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtFetchMetaDNs, ENetUC_Mgmt.AsnMgmtFetchMetaDNsArgument, Converter.AsnMgmtFetchMetaDNsArgument_Converter, Converter.AsnMgmtFetchMetaDNsResult_Converter, handler, handler.onInvoke_asnMgmtFetchMetaDNs, invokeContext);
			case OperationIDs.OPID_asnMgmtSetMetaSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetMetaSettings, ENetROSEInterface.AsnSetMetaSettingsArgument, ENetROSEInterface_Converter.AsnSetMetaSettingsArgument_Converter, ENetROSEInterface_Converter.AsnSetMetaSettingsResult_Converter, handler, handler.onInvoke_asnMgmtSetMetaSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetMetaPhoneBooksSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetMetaPhoneBooksSettings, ENetROSEInterface.AsnSetMetaSettingsArgument, ENetROSEInterface_Converter.AsnSetMetaSettingsArgument_Converter, ENetROSEInterface_Converter.AsnSetMetaSettingsResult_Converter, handler, handler.onInvoke_asnMgmtSetMetaPhoneBooksSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetMetaSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetMetaSettings, ENetROSEInterface.AsnGetMetaSettingsArgument, ENetROSEInterface_Converter.AsnGetMetaSettingsArgument_Converter, ENetROSEInterface_Converter.AsnGetMetaSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetMetaSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetMetaPhoneBooksSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetMetaPhoneBooksSettings, ENetROSEInterface.AsnGetMetaSettingsArgument, ENetROSEInterface_Converter.AsnGetMetaSettingsArgument_Converter, ENetROSEInterface_Converter.AsnGetMetaSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetMetaPhoneBooksSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetAvailableCertificates:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetAvailableCertificates, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetAvailableCertificatesResult_Converter, handler, handler.onInvoke_asnMgmtGetAvailableCertificates, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSoftwareProfiles:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSoftwareProfiles, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSoftwareProfilesResult_Converter, handler, handler.onInvoke_asnMgmtGetSoftwareProfiles, invokeContext);
			case OperationIDs.OPID_asnMgmtSetSoftwareProfiles:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetSoftwareProfiles, ENetUC_Mgmt.AsnMgmtSetSoftwareProfilesArgument, Converter.AsnMgmtSetSoftwareProfilesArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetSoftwareProfiles, invokeContext);
			case OperationIDs.OPID_asnMgmtGetGlobalGroupingAttributes:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetGlobalGroupingAttributes, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetGlobalGroupingAttributesResult_Converter, handler, handler.onInvoke_asnMgmtGetGlobalGroupingAttributes, invokeContext);
			case OperationIDs.OPID_asnMgmtSetGlobalGroupingAttributes:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetGlobalGroupingAttributes, ENetUC_Mgmt.AsnMgmtSetGlobalGroupingAttributesArgument, Converter.AsnMgmtSetGlobalGroupingAttributesArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetGlobalGroupingAttributes, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUserXmlClientContent:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUserXmlClientContent, ENetUC_Mgmt.AsnMgmtGetUserXmlClientContentArgument, Converter.AsnMgmtGetUserXmlClientContentArgument_Converter, Converter.AsnMgmtGetUserXmlClientContentResult_Converter, handler, handler.onInvoke_asnMgmtGetUserXmlClientContent, invokeContext);
			case OperationIDs.OPID_asnMgmtSetUserXmlClientContent:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetUserXmlClientContent, ENetUC_Mgmt.AsnMgmtSetUserXmlClientContentArgument, Converter.AsnMgmtSetUserXmlClientContentArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetUserXmlClientContent, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUserDefinedCustomFields:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUserDefinedCustomFields, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetUserDefinedCustomFieldsResult_Converter, handler, handler.onInvoke_asnMgmtGetUserDefinedCustomFields, invokeContext);
			case OperationIDs.OPID_asnMgmtSetUserDefinedCustomFields:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetUserDefinedCustomFields, ENetUC_Mgmt.AsnMgmtSetUserDefinedCustomFieldsArgument, Converter.AsnMgmtSetUserDefinedCustomFieldsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetUserDefinedCustomFields, invokeContext);
			case OperationIDs.OPID_asnMgmtGetSIPFEDXmppDiagnostic:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetSIPFEDXmppDiagnostic, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetSIPFEDXmppDiagnosticResult_Converter, handler, handler.onInvoke_asnMgmtGetSIPFEDXmppDiagnostic, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLineForwarding:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetLineForwarding, ENetUC_Mgmt.AsnMgmtGetLineForwardingArgument, Converter.AsnMgmtGetLineForwardingArgument_Converter, Converter.AsnMgmtGetLineForwardingResult_Converter, handler, handler.onInvoke_asnMgmtGetLineForwarding, invokeContext);
			case OperationIDs.OPID_asnMgmtSetLineForwarding:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetLineForwarding, ENetUC_Mgmt.AsnMgmtSetLineForwardingArgument, Converter.AsnMgmtSetLineForwardingArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetLineForwarding, invokeContext);
			case OperationIDs.OPID_asnMgmtGetXMLAvailableLanguages:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetXMLAvailableLanguages, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetXMLAvailableLanguagesResult_Converter, handler, handler.onInvoke_asnMgmtGetXMLAvailableLanguages, invokeContext);
			case OperationIDs.OPID_asnMgmtUpgradeStart:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtUpgradeStart, ENetUC_Mgmt.AsnMgmtUpgradeStartArgument, Converter.AsnMgmtUpgradeStartArgument_Converter, Converter.AsnMgmtUpgradeStartResult_Converter, handler, handler.onInvoke_asnMgmtUpgradeStart, invokeContext);
			case OperationIDs.OPID_asnMgmtGetPushServiceDevices:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetPushServiceDevices, ENetUC_Mgmt.AsnMgmtGetPushServiceDevicesArgument, Converter.AsnMgmtGetPushServiceDevicesArgument_Converter, Converter.AsnMgmtGetPushServiceDevicesResult_Converter, handler, handler.onInvoke_asnMgmtGetPushServiceDevices, invokeContext);
			case OperationIDs.OPID_asnMgmtDeletePushServiceDevice:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtDeletePushServiceDevice, ENetUC_Mgmt.AsnMgmtDeletePushServiceDeviceArgument, Converter.AsnMgmtDeletePushServiceDeviceArgument_Converter, Converter.AsnMgmtDeletePushServiceDeviceResult_Converter, handler, handler.onInvoke_asnMgmtDeletePushServiceDevice, invokeContext);
			case OperationIDs.OPID_asnMgmtSetPhoneJournalSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetPhoneJournalSettings, ENetUC_Mgmt.AsnMgmtSetPhoneJournalSettingsArgument, Converter.AsnMgmtSetPhoneJournalSettingsArgument_Converter, Converter.AsnMgmtSetPhoneJournalSettingsResult_Converter, handler, handler.onInvoke_asnMgmtSetPhoneJournalSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetPhoneJournalSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetPhoneJournalSettings, ENetUC_Mgmt.AsnMgmtGetPhoneJournalSettingsArgument, Converter.AsnMgmtGetPhoneJournalSettingsArgument_Converter, Converter.AsnMgmtGetPhoneJournalSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetPhoneJournalSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtAddComputerProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtAddComputerProfile, ENetUC_Admin.AsnAdminAddComputerProfileArgument, ENetUC_Admin_Converter.AsnAdminAddComputerProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminAddComputerProfileResult_Converter, handler, handler.onInvoke_asnMgmtAddComputerProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtGetComputerProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetComputerProfile, ENetUC_Admin.AsnAdminGetComputerProfileArgument, ENetUC_Admin_Converter.AsnAdminGetComputerProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminGetComputerProfileResult_Converter, handler, handler.onInvoke_asnMgmtGetComputerProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtSetComputerProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetComputerProfile, ENetUC_Admin.AsnAdminSetComputerProfileArgument, ENetUC_Admin_Converter.AsnAdminSetComputerProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminSetComputerProfileResult_Converter, handler, handler.onInvoke_asnMgmtSetComputerProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtAddGroupProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtAddGroupProfile, ENetUC_Admin.AsnAdminAddGroupProfileArgument, ENetUC_Admin_Converter.AsnAdminAddGroupProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminAddGroupProfileResult_Converter, handler, handler.onInvoke_asnMgmtAddGroupProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtRemoveGroupProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtRemoveGroupProfile, ENetUC_Admin.AsnAdminRemoveGroupProfileArgument, ENetUC_Admin_Converter.AsnAdminRemoveGroupProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminRemoveGroupProfileResult_Converter, handler, handler.onInvoke_asnMgmtRemoveGroupProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtFindGroupProfiles:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtFindGroupProfiles, ENetUC_Admin.AsnAdminFindGroupProfilesArgument, ENetUC_Admin_Converter.AsnAdminFindGroupProfilesArgument_Converter, ENetUC_Admin_Converter.AsnAdminFindGroupProfilesResult_Converter, handler, handler.onInvoke_asnMgmtFindGroupProfiles, invokeContext);
			case OperationIDs.OPID_asnMgmtSetGroupProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetGroupProfile, ENetUC_Mgmt.AsnMgmtSetGroupProfileArgument, Converter.AsnMgmtSetGroupProfileArgument_Converter, Converter.AsnMgmtSetGroupProfileResult_Converter, handler, handler.onInvoke_asnMgmtSetGroupProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtAddUserProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtAddUserProfile, ENetUC_Admin.AsnAdminAddUserProfileArgument, ENetUC_Admin_Converter.AsnAdminAddUserProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminAddUserProfileResult_Converter, handler, handler.onInvoke_asnMgmtAddUserProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtRemoveUserProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtRemoveUserProfile, ENetUC_Admin.AsnAdminRemoveUserProfileArgument, ENetUC_Admin_Converter.AsnAdminRemoveUserProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminRemoveUserProfileResult_Converter, handler, handler.onInvoke_asnMgmtRemoveUserProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUserProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUserProfile, ENetUC_Admin.AsnAdminGetUserProfileArgument, ENetUC_Admin_Converter.AsnAdminGetUserProfileArgument_Converter, ENetUC_Admin_Converter.AsnAdminGetUserProfileResult_Converter, handler, handler.onInvoke_asnMgmtGetUserProfile, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUserManagerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUserManagerSettings, ENetUC_Admin.AsnGetUserManagerSettingsArgument, ENetUC_Admin_Converter.AsnGetUserManagerSettingsArgument_Converter, ENetUC_Admin_Converter.AsnGetUserManagerSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetUserManagerSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetAvailableLines:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetAvailableLines, ENetUC_Admin.AsnGetAvailableLinesArgument, ENetUC_Admin_Converter.AsnGetAvailableLinesArgument_Converter, ENetUC_Admin_Converter.AsnGetAvailableLinesResult_Converter, handler, handler.onInvoke_asnMgmtGetAvailableLines, invokeContext);
			case OperationIDs.OPID_asnMgmtGetNetworkInterfacePorts:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetNetworkInterfacePorts, ENetUC_Admin.AsnGetNetworkInterfacePortsArgument, ENetUC_Admin_Converter.AsnGetNetworkInterfacePortsArgument_Converter, ENetUC_Admin_Converter.AsnGetNetworkInterfacePortsResult_Converter, handler, handler.onInvoke_asnMgmtGetNetworkInterfacePorts, invokeContext);
			case OperationIDs.OPID_asnMgmtSetChatSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetChatSettings, ENetUC_Mgmt.AsnMgmtChatSettings, Converter.AsnMgmtChatSettings_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetChatSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetChatSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetChatSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtChatSettings_Converter, handler, handler.onInvoke_asnMgmtGetChatSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetMeshSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetMeshSettings, ENetUC_Mgmt.AsnMgmtMeshControllerSettings, Converter.AsnMgmtMeshControllerSettings_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetMeshSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetMeshSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetMeshSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtMeshControllerSettings_Converter, handler, handler.onInvoke_asnMgmtGetMeshSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetMeshNodeConfigs:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetMeshNodeConfigs, ENetUC_Mgmt.AsnMgmtSetMeshNodeConfigsArgument, Converter.AsnMgmtSetMeshNodeConfigsArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetMeshNodeConfigs, invokeContext);
			case OperationIDs.OPID_asnMgmtGetMeshNodeConfigs:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetMeshNodeConfigs, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetMeshNodeConfigsResult_Converter, handler, handler.onInvoke_asnMgmtGetMeshNodeConfigs, invokeContext);
			case OperationIDs.OPID_asnMgmtGetMeshNodeStatuses:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetMeshNodeStatuses, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetMeshNodeStatusesResult_Converter, handler, handler.onInvoke_asnMgmtGetMeshNodeStatuses, invokeContext);
			case OperationIDs.OPID_asnMgmtSubscribeConnectionInformationChanges:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSubscribeConnectionInformationChanges, ENetUC_Mgmt.AsnMgmtSubscribeConnectionInformationChangesArgument, Converter.AsnMgmtSubscribeConnectionInformationChangesArgument_Converter, Converter.AsnMgmtSubscribeConnectionInformationChangesResult_Converter, handler, handler.onInvoke_asnMgmtSubscribeConnectionInformationChanges, invokeContext);
			case OperationIDs.OPID_asnMgmtUnSubscribeConnectionInformationChanges:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtUnSubscribeConnectionInformationChanges, ENetUC_Mgmt.AsnMgmtUnSubscribeConnectionInformationChangesArgument, Converter.AsnMgmtUnSubscribeConnectionInformationChangesArgument_Converter, Converter.AsnMgmtUnSubscribeConnectionInformationChangesResult_Converter, handler, handler.onInvoke_asnMgmtUnSubscribeConnectionInformationChanges, invokeContext);
			case OperationIDs.OPID_asnMgmtDisconnectClient:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtDisconnectClient, ENetUC_Mgmt.AsnMgmtDisconnectClientArgument, Converter.AsnMgmtDisconnectClientArgument_Converter, Converter.AsnMgmtDisconnectClientResult_Converter, handler, handler.onInvoke_asnMgmtDisconnectClient, invokeContext);
			case OperationIDs.OPID_asnMgmtGDPRErase:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGDPRErase, ENetUC_Mgmt.AsnMgmtGDPREraseArgument, Converter.AsnMgmtGDPREraseArgument_Converter, Converter.AsnMgmtGDPREraseResult_Converter, handler, handler.onInvoke_asnMgmtGDPRErase, invokeContext);
			case OperationIDs.OPID_asnMgmtGDPRFindContacts:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGDPRFindContacts, ENetUC_Mgmt.AsnMgmtGDPRFindContactsArgument, Converter.AsnMgmtGDPRFindContactsArgument_Converter, Converter.AsnMgmtGDPRFindContactsResult_Converter, handler, handler.onInvoke_asnMgmtGDPRFindContacts, invokeContext);
			case OperationIDs.OPID_asnMgmtDatabaseUpdateInProgress:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtDatabaseUpdateInProgress, ENetUC_Mgmt.AsnMgmtDatabaseUpdateInProgressArgument, Converter.AsnMgmtDatabaseUpdateInProgressArgument_Converter, Converter.AsnMgmtDatabaseUpdateInProgressResult_Converter, handler, handler.onInvoke_asnMgmtDatabaseUpdateInProgress, invokeContext);
			case OperationIDs.OPID_asnMgmtGetBinaryTransferSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetBinaryTransferSettings, ENetUC_Mgmt.AsnMgmtGetBinaryTransferSettingsArgument, Converter.AsnMgmtGetBinaryTransferSettingsArgument_Converter, Converter.AsnMgmtGetBinaryTransferSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetBinaryTransferSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetBinaryTransferSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetBinaryTransferSettings, ENetUC_Mgmt.AsnMgmtSetBinaryTransferSettingsArgument, Converter.AsnMgmtSetBinaryTransferSettingsArgument_Converter, Converter.AsnMgmtSetBinaryTransferSettingsResult_Converter, handler, handler.onInvoke_asnMgmtSetBinaryTransferSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetConnectionOptionsDNS:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetConnectionOptionsDNS, ENetUC_Mgmt.AsnMgmtGetConnectionOptionsDNSArgument, Converter.AsnMgmtGetConnectionOptionsDNSArgument_Converter, Converter.AsnMgmtGetConnectionOptionsDNSResult_Converter, handler, handler.onInvoke_asnMgmtGetConnectionOptionsDNS, invokeContext);
			case OperationIDs.OPID_asnMgmtGetConfigurationManagerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetConfigurationManagerSettings, ENetUC_Mgmt.AsnMgmtGetConfigurationManagerSettingsArgument, Converter.AsnMgmtGetConfigurationManagerSettingsArgument_Converter, Converter.AsnMgmtGetConfigurationManagerSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetConfigurationManagerSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetConfigurationManagerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetConfigurationManagerSettings, ENetUC_Mgmt.AsnMgmtSetConfigurationManagerSettingsArgument, Converter.AsnMgmtSetConfigurationManagerSettingsArgument_Converter, Converter.AsnMgmtSetConfigurationManagerSettingsResult_Converter, handler, handler.onInvoke_asnMgmtSetConfigurationManagerSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtDirectPersistDeleteSetting:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtDirectPersistDeleteSetting, ENetUC_Mgmt.AsnMgmtDirectPersistDeleteSettingArgument, Converter.AsnMgmtDirectPersistDeleteSettingArgument_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtDirectPersistDeleteSetting, invokeContext);
			case OperationIDs.OPID_asnMgmtTestConfigurationManagerDB:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtTestConfigurationManagerDB, ENetUC_Mgmt.AsnMgmtTestConfigurationManagerDBArgument, Converter.AsnMgmtTestConfigurationManagerDBArgument_Converter, Converter.AsnMgmtTestConfigurationManagerDBResult_Converter, handler, handler.onInvoke_asnMgmtTestConfigurationManagerDB, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUserManagerConnectionStatus:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetUserManagerConnectionStatus, ENetUC_Mgmt.AsnMgmtGetUserManagerConnectionStatusArgument, Converter.AsnMgmtGetUserManagerConnectionStatusArgument_Converter, Converter.AsnMgmtGetUserManagerConnectionStatusResult_Converter, handler, handler.onInvoke_asnMgmtGetUserManagerConnectionStatus, invokeContext);
			case OperationIDs.OPID_asnMgmtClientPersistenceDelete:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtClientPersistenceDelete, ENetUC_Mgmt.AsnMgmtClientPersistenceDeleteArgument, Converter.AsnMgmtClientPersistenceDeleteArgument_Converter, Converter.AsnMgmtClientPersistenceDeleteResult_Converter, handler, handler.onInvoke_asnMgmtClientPersistenceDelete, invokeContext);
			case OperationIDs.OPID_asnMgmtClientPersistenceCreate:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtClientPersistenceCreate, ENetUC_Mgmt.AsnMgmtClientPersistenceCreateArgument, Converter.AsnMgmtClientPersistenceCreateArgument_Converter, Converter.AsnMgmtClientPersistenceCreateResult_Converter, handler, handler.onInvoke_asnMgmtClientPersistenceCreate, invokeContext);
			case OperationIDs.OPID_asnMgmtGetConfigurationManagerStatus:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetConfigurationManagerStatus, ENetUC_Mgmt.AsnMgmtGetConfigurationManagerStatusArgument, Converter.AsnMgmtGetConfigurationManagerStatusArgument_Converter, Converter.AsnMgmtGetConfigurationManagerStatusResult_Converter, handler, handler.onInvoke_asnMgmtGetConfigurationManagerStatus, invokeContext);
			case OperationIDs.OPID_asnMgmtGetConfigurationManagerServerList:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetConfigurationManagerServerList, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtGetConfigurationManagerServerListResult_Converter, handler, handler.onInvoke_asnMgmtGetConfigurationManagerServerList, invokeContext);
			case OperationIDs.OPID_asnMgmtCleanupBinaryTransferFiles:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtCleanupBinaryTransferFiles, ENetUC_Mgmt.AsnMgmtCleanupBinaryTransferFilesArgument, Converter.AsnMgmtCleanupBinaryTransferFilesArgument_Converter, Converter.AsnMgmtCleanupBinaryTransferFilesResult_Converter, handler, handler.onInvoke_asnMgmtCleanupBinaryTransferFiles, invokeContext);
			case OperationIDs.OPID_asnMgmtSetPresenceDomain:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetPresenceDomain, ENetUC_Mgmt.AsnMgmtSetPresenceDomainArgument, Converter.AsnMgmtSetPresenceDomainArgument_Converter, Converter.AsnMgmtSetPresenceDomainResult_Converter, handler, handler.onInvoke_asnMgmtSetPresenceDomain, invokeContext);
			case OperationIDs.OPID_asnMgmtGetAdminUserManagerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetAdminUserManagerSettings, ENetUC_Mgmt.AsnMgmtGetAdminUserManagerSettingsArgument, Converter.AsnMgmtGetAdminUserManagerSettingsArgument_Converter, Converter.AsnMgmtGetAdminUserManagerSettingsResult_Converter, handler, handler.onInvoke_asnMgmtGetAdminUserManagerSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetAdminUserManagerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetAdminUserManagerSettings, ENetUC_Mgmt.AsnMgmtSetAdminUserManagerSettingsArgument, Converter.AsnMgmtSetAdminUserManagerSettingsArgument_Converter, Converter.AsnMgmtSetAdminUserManagerSettingsResult_Converter, handler, handler.onInvoke_asnMgmtSetAdminUserManagerSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetAdminUserRights:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetAdminUserRights, ENetUC_Mgmt.AsnMgmtGetAdminUserRightsArgument, Converter.AsnMgmtGetAdminUserRightsArgument_Converter, Converter.AsnMgmtGetAdminUserRightsResult_Converter, handler, handler.onInvoke_asnMgmtGetAdminUserRights, invokeContext);
			case OperationIDs.OPID_asnMgmtGetEntraIdSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtGetEntraIdSettings, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, Converter.AsnMgmtEntraIdSettings_Converter, handler, handler.onInvoke_asnMgmtGetEntraIdSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtSetEntraIdSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnMgmtSetEntraIdSettings, ENetUC_Mgmt.AsnMgmtEntraIdSettings, Converter.AsnMgmtEntraIdSettings_Converter, Converter.AsnMgmtEmpty_Converter, handler, handler.onInvoke_asnMgmtSetEntraIdSettings, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUserProfilesResult:
			case OperationIDs.OPID_asnMgmtGetUserListEvent:
			case OperationIDs.OPID_asnMgmtGetGroupsEvent:
			case OperationIDs.OPID_asnMgmtComputerFoundEvent:
			case OperationIDs.OPID_asnMgmtSoftwarePacketsChanged:
			case OperationIDs.OPID_asnMgmtSoftwareStatusComputerChanged:
			case OperationIDs.OPID_asnMgmtUpdateSoftwareStatusComputerChanged:
			case OperationIDs.OPID_asnMgmtGetLineStatesEvent:
			case OperationIDs.OPID_asnMgmtLineStateChanged:
			case OperationIDs.OPID_asnMgmtOnLineRemovedEvent:
			case OperationIDs.OPID_asnMgmtOnLineAddedEvent:
			case OperationIDs.OPID_asnMgmtOnLineConfigChangedEvent:
			case OperationIDs.OPID_asnMgmtOnLineCapsChangedEvent:
			case OperationIDs.OPID_asnMgmtOnCtiLineFoundEvent:
			case OperationIDs.OPID_asnMgmtOnLineGroupAdded:
			case OperationIDs.OPID_asnMgmtOnLineGroupConfigChangedEvent:
			case OperationIDs.OPID_asnMgmtOnLineGroupRemoved:
			case OperationIDs.OPID_asnMgmtOnLineEvent4AdminEvent:
			case OperationIDs.OPID_asnMgmtOnLicensesHaveChangedEvent:
			case OperationIDs.OPID_asnMgmtUCWebServiceStatusChanged:
			case OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesEvent:
			case OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesChangedEvent:
			case OperationIDs.OPID_asnMgmtLocationChanged:
			case OperationIDs.OPID_asnMgmtFederationServerStatusChanged:
			case OperationIDs.OPID_asnMgmtFederationServerDiagnosticComplete:
			case OperationIDs.OPID_asnMgmtUpgradeProgress:
			case OperationIDs.OPID_asnMgmtPushServiceDevicesResult:
			case OperationIDs.OPID_asnMgmtPushServiceDeviceChanged:
			case OperationIDs.OPID_asnMgmtRemoveComputerProfileEvent:
			case OperationIDs.OPID_asnMgmtRemoveGroupProfileEvent:
			case OperationIDs.OPID_asnMgmtRemoveUserProfileEvent:
			case OperationIDs.OPID_asnMgmtMeshNodeStatusChanged:
			case OperationIDs.OPID_asnMgmtMeshUpdateConnections:
			case OperationIDs.OPID_asnMgmtConnectionInformationChanged:
			case OperationIDs.OPID_asnMgmtUpdateDatabaseProgress:
			case OperationIDs.OPID_asnMgmtUserManagerConnectionStatusChanged:
			case OperationIDs.OPID_asnMgmtConfigurationManagerStatusChanged:
			case OperationIDs.OPID_asnMgmtConfigurationManagerServerListChanged:
				return this.onEvent(invoke, invokeContext, handler);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_MgmtROSE`);
		}
	}

	// [PrintTSROSEOnEventSwitchCase]
	/**
	 * This is the onEvent method that is called whenever an event is called in this module.
	 * It is called from the onInvoke in case of an event is being called.
	 * Depending on the handleEvents flag the event is either handled or cached.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the method in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled or undefined
	 */
	private async onEvent(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_MgmtROSE_Handler): Promise<ROSEReject | undefined> {
		// If the class says do not handle events and the override flag in the invokeContext has not been set, add the event to the que, otherwise we dispatch it
		if (!this.handleEvents && !invokeContext?.handleEvent) {
			this.transport.log(ELogSeverity.debug, "Adding event to queue", "onEvent", this, { operationName: invoke.operationName, operationID: invoke.operationID });
			this.cachedEvents.push({ invoke, invokeContext, handler });
			return;
		}

		switch (invoke.operationID) {
			case OperationIDs.OPID_asnMgmtGetUserProfilesResult:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtGetUserProfilesResult, ENetUC_Mgmt.AsnMgmtGetUserProfilesResultArgument, Converter.AsnMgmtGetUserProfilesResultArgument_Converter, handler, handler.onEvent_asnMgmtGetUserProfilesResult, invokeContext);
			case OperationIDs.OPID_asnMgmtGetUserListEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtGetUserListEvent, ENetUC_Mgmt.AsnMgmtGetUserListEventArgument, Converter.AsnMgmtGetUserListEventArgument_Converter, handler, handler.onEvent_asnMgmtGetUserListEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtGetGroupsEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtGetGroupsEvent, ENetUC_Mgmt.AsnMgmtGetGroupsEventArgument, Converter.AsnMgmtGetGroupsEventArgument_Converter, handler, handler.onEvent_asnMgmtGetGroupsEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtComputerFoundEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtComputerFoundEvent, ENetUC_Mgmt.AsnMgmtComputerFoundEventArgument, Converter.AsnMgmtComputerFoundEventArgument_Converter, handler, handler.onEvent_asnMgmtComputerFoundEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtSoftwarePacketsChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtSoftwarePacketsChanged, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, handler, handler.onEvent_asnMgmtSoftwarePacketsChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtSoftwareStatusComputerChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtSoftwareStatusComputerChanged, ENetUC_Mgmt.AsnMgmtSoftwareStatusComputerChangedArgument, Converter.AsnMgmtSoftwareStatusComputerChangedArgument_Converter, handler, handler.onEvent_asnMgmtSoftwareStatusComputerChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtUpdateSoftwareStatusComputerChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtUpdateSoftwareStatusComputerChanged, ENetUC_Mgmt.AsnMgmtEUCWebServicesStatus, Converter.AsnMgmtEUCWebServicesStatus_Converter, handler, handler.onEvent_asnMgmtUpdateSoftwareStatusComputerChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtGetLineStatesEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtGetLineStatesEvent, ENetUC_Mgmt.AsnMgmtGetLineStatesEventArgument, Converter.AsnMgmtGetLineStatesEventArgument_Converter, handler, handler.onEvent_asnMgmtGetLineStatesEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtLineStateChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtLineStateChanged, ENetUC_Mgmt.AsnMgmtLineStateChangedArgument, Converter.AsnMgmtLineStateChangedArgument_Converter, handler, handler.onEvent_asnMgmtLineStateChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtOnLineRemovedEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnLineRemovedEvent, ENetUC_Mgmt.AsnMgmtOnLineRemovedEventArgument, Converter.AsnMgmtOnLineRemovedEventArgument_Converter, handler, handler.onEvent_asnMgmtOnLineRemovedEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtOnLineAddedEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnLineAddedEvent, ENetUC_Mgmt.AsnMgmtOnLineAddedEventArgument, Converter.AsnMgmtOnLineAddedEventArgument_Converter, handler, handler.onEvent_asnMgmtOnLineAddedEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtOnLineConfigChangedEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnLineConfigChangedEvent, ENetUC_Mgmt.AsnMgmtOnLineConfigChangedEventArgument, Converter.AsnMgmtOnLineConfigChangedEventArgument_Converter, handler, handler.onEvent_asnMgmtOnLineConfigChangedEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtOnLineCapsChangedEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnLineCapsChangedEvent, ENetUC_Mgmt.AsnMgmtOnLineCapsChangedEventArgument, Converter.AsnMgmtOnLineCapsChangedEventArgument_Converter, handler, handler.onEvent_asnMgmtOnLineCapsChangedEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtOnCtiLineFoundEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnCtiLineFoundEvent, ENetUC_Mgmt.AsnMgmtOnCtiLineFoundEventArgument, Converter.AsnMgmtOnCtiLineFoundEventArgument_Converter, handler, handler.onEvent_asnMgmtOnCtiLineFoundEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtOnLineGroupAdded:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnLineGroupAdded, ENetUC_Mgmt.AsnMgmtOnLineGroupAddedArgument, Converter.AsnMgmtOnLineGroupAddedArgument_Converter, handler, handler.onEvent_asnMgmtOnLineGroupAdded, invokeContext);
			case OperationIDs.OPID_asnMgmtOnLineGroupConfigChangedEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnLineGroupConfigChangedEvent, ENetUC_Mgmt.AsnMgmtOnLineGroupChangedArgument, Converter.AsnMgmtOnLineGroupChangedArgument_Converter, handler, handler.onEvent_asnMgmtOnLineGroupConfigChangedEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtOnLineGroupRemoved:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnLineGroupRemoved, ENetUC_Mgmt.AsnMgmtOnLineGroupRemovedArgument, Converter.AsnMgmtOnLineGroupRemovedArgument_Converter, handler, handler.onEvent_asnMgmtOnLineGroupRemoved, invokeContext);
			case OperationIDs.OPID_asnMgmtOnLineEvent4AdminEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnLineEvent4AdminEvent, ENetUC_Mgmt.AsnMgmtOnLineEvent4AdminEventArgument, Converter.AsnMgmtOnLineEvent4AdminEventArgument_Converter, handler, handler.onEvent_asnMgmtOnLineEvent4AdminEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtOnLicensesHaveChangedEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnLicensesHaveChangedEvent, ENetUC_Mgmt.AsnMgmtOnLicensesHaveChangedEventArgument, Converter.AsnMgmtOnLicensesHaveChangedEventArgument_Converter, handler, handler.onEvent_asnMgmtOnLicensesHaveChangedEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtUCWebServiceStatusChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtUCWebServiceStatusChanged, ENetUC_Mgmt.AsnMgmtEUCWebServicesStatus, Converter.AsnMgmtEUCWebServicesStatus_Converter, handler, handler.onEvent_asnMgmtUCWebServiceStatusChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesEvent, ENetUC_Mgmt.AsnMgmtOnListenInterfaceStatusesEventArgument, Converter.AsnMgmtOnListenInterfaceStatusesEventArgument_Converter, handler, handler.onEvent_asnMgmtOnListenInterfaceStatusesEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesChangedEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtOnListenInterfaceStatusesChangedEvent, ENetUC_Mgmt.AsnMgmtOnListenInterfaceStatusesChangedEventArgument, Converter.AsnMgmtOnListenInterfaceStatusesChangedEventArgument_Converter, handler, handler.onEvent_asnMgmtOnListenInterfaceStatusesChangedEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtLocationChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtLocationChanged, ENetUC_Mgmt.AsnMgmtLocationChangedArgument, Converter.AsnMgmtLocationChangedArgument_Converter, handler, handler.onEvent_asnMgmtLocationChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtFederationServerStatusChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtFederationServerStatusChanged, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, handler, handler.onEvent_asnMgmtFederationServerStatusChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtFederationServerDiagnosticComplete:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtFederationServerDiagnosticComplete, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, handler, handler.onEvent_asnMgmtFederationServerDiagnosticComplete, invokeContext);
			case OperationIDs.OPID_asnMgmtUpgradeProgress:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtUpgradeProgress, ENetUC_Mgmt.AsnMgmtUpgradeProgressArgument, Converter.AsnMgmtUpgradeProgressArgument_Converter, handler, handler.onEvent_asnMgmtUpgradeProgress, invokeContext);
			case OperationIDs.OPID_asnMgmtPushServiceDevicesResult:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtPushServiceDevicesResult, ENetUC_Mgmt.AsnMgmtPushServiceDevicesResultArgument, Converter.AsnMgmtPushServiceDevicesResultArgument_Converter, handler, handler.onEvent_asnMgmtPushServiceDevicesResult, invokeContext);
			case OperationIDs.OPID_asnMgmtPushServiceDeviceChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtPushServiceDeviceChanged, ENetUC_Mgmt.AsnMgmtPushServiceDeviceChangedArgument, Converter.AsnMgmtPushServiceDeviceChangedArgument_Converter, handler, handler.onEvent_asnMgmtPushServiceDeviceChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtRemoveComputerProfileEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtRemoveComputerProfileEvent, ENetUC_Mgmt.AsnMgmtRemoveComputerProfileEventArgument, Converter.AsnMgmtRemoveComputerProfileEventArgument_Converter, handler, handler.onEvent_asnMgmtRemoveComputerProfileEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtRemoveGroupProfileEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtRemoveGroupProfileEvent, ENetUC_Mgmt.AsnMgmtRemoveGroupProfileEventArgument, Converter.AsnMgmtRemoveGroupProfileEventArgument_Converter, handler, handler.onEvent_asnMgmtRemoveGroupProfileEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtRemoveUserProfileEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtRemoveUserProfileEvent, ENetUC_Mgmt.AsnMgmtRemoveUserProfileEventArgument, Converter.AsnMgmtRemoveUserProfileEventArgument_Converter, handler, handler.onEvent_asnMgmtRemoveUserProfileEvent, invokeContext);
			case OperationIDs.OPID_asnMgmtMeshNodeStatusChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtMeshNodeStatusChanged, ENetUC_Mgmt.AsnMgmtMeshNodeStatus, Converter.AsnMgmtMeshNodeStatus_Converter, handler, handler.onEvent_asnMgmtMeshNodeStatusChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtMeshUpdateConnections:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtMeshUpdateConnections, ENetUC_Mgmt.AsnMgmtEmpty, Converter.AsnMgmtEmpty_Converter, handler, handler.onEvent_asnMgmtMeshUpdateConnections, invokeContext);
			case OperationIDs.OPID_asnMgmtConnectionInformationChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtConnectionInformationChanged, ENetUC_Mgmt.AsnMgmtConnectionInformationChangedArgument, Converter.AsnMgmtConnectionInformationChangedArgument_Converter, handler, handler.onEvent_asnMgmtConnectionInformationChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtUpdateDatabaseProgress:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtUpdateDatabaseProgress, ENetUC_Mgmt.AsnMgmtUpdateDatabaseProgressArgument, Converter.AsnMgmtUpdateDatabaseProgressArgument_Converter, handler, handler.onEvent_asnMgmtUpdateDatabaseProgress, invokeContext);
			case OperationIDs.OPID_asnMgmtUserManagerConnectionStatusChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtUserManagerConnectionStatusChanged, ENetUC_Mgmt.AsnMgmtUserManagerConnectionStatusChangedArgument, Converter.AsnMgmtUserManagerConnectionStatusChangedArgument_Converter, handler, handler.onEvent_asnMgmtUserManagerConnectionStatusChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtConfigurationManagerStatusChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtConfigurationManagerStatusChanged, ENetUC_Mgmt.AsnMgmtConfigurationManagerStatusChangedArgument, Converter.AsnMgmtConfigurationManagerStatusChangedArgument_Converter, handler, handler.onEvent_asnMgmtConfigurationManagerStatusChanged, invokeContext);
			case OperationIDs.OPID_asnMgmtConfigurationManagerServerListChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnMgmtConfigurationManagerServerListChanged, ENetUC_Mgmt.AsnMgmtConfigurationManagerServerListChangedArgument, Converter.AsnMgmtConfigurationManagerServerListChangedArgument_Converter, handler, handler.onEvent_asnMgmtConfigurationManagerServerListChanged, invokeContext);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_MgmtROSE`);
		}
	}
}
