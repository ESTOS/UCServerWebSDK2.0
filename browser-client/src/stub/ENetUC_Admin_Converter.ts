// [PrintTSConverterCode]
// [PrintTSConverterComments]
/*
 * ENetUC_Admin_Converter.ts
 * "UC-Server-Access-Protocol-Admin" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */

// [PrintTSConverterImports]
import { ConverterError, ConverterErrorType, ConverterErrors, TSConverter, IDecodeContext, IEncodeContext, INamedType } from "./TSConverterBase";
import * as ENetUC_Admin from "./ENetUC_Admin";
// [PrintTSImports]
import * as asn1ts from "@estos/asn1ts";
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_AsnContact from "./ENetUC_Common_AsnContact";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";
import * as ENetUC_Common_AsnContact_Converter from "./ENetUC_Common_AsnContact_Converter";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_Admin_Converter";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSEncoderDecoderCode]
export class AsnAdminFindUserArgumentChoice_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminFindUserArgumentChoice, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminFindUserArgumentChoice & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindUserArgumentChoice");

		const t = {} as ENetUC_Admin.AsnAdminFindUserArgumentChoice & INamedType;

		// [Print_JSON_EncoderChoiceDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminFindUserArgumentChoice";
		if (s.all === null)
			TSConverter.fillJSONParam(s, t, "all", "null", errors, newContext);
		else if (s.u8sPhoneNumber != null)
			TSConverter.fillJSONParam(s, t, "u8sPhoneNumber", "string", errors, newContext);
		else
			errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "property missing"));

		if (errors.validateResult(newContext, "AsnAdminFindUserArgumentChoice"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindUserArgumentChoice | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindUserArgumentChoice");

		let t: ENetUC_Admin.AsnAdminFindUserArgumentChoice | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminFindUserArgumentChoice>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminFindUserArgumentChoice["initEmpty"].call(0);
			// [Print_JSON_DecoderChoiceDefCode]
			if (s.all !== undefined) {
				if (TSConverter.validateParam(s, "all", "null", errors, newContext))
					t.all = s.all;
			} else if (s.u8sPhoneNumber !== undefined) {
				if (TSConverter.validateParam(s, "u8sPhoneNumber", "string", errors, newContext))
					t.u8sPhoneNumber = s.u8sPhoneNumber;
			} else if (!(optional === true))
				errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "Property has not been filled"));
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserArgumentChoice"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminFindUserArgumentChoice | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.BaseBlock | undefined {
		name ||= "AsnAdminFindUserArgumentChoice";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		let t: asn1ts.BaseBlock | undefined;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindUserArgumentChoice");

		// [Print_BER_EncoderChoiceDefCode]
		if (TSConverter.validateParam(s, "all", "null", errors, newContext, true))
			t = new asn1ts.Null({ name: "all", idBlock: { optionalID: 0 } });
		else if (TSConverter.validateParam(s, "u8sPhoneNumber", "string", errors, newContext, true))
			t = new asn1ts.Utf8String({ value: s.u8sPhoneNumber, name: "u8sPhoneNumber", idBlock: { optionalID: 1 } });
		else
			errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "property missing"));

		if (errors.validateResult(newContext, "AsnAdminFindUserArgumentChoice"))
			return t;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindUserArgumentChoice | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindUserArgumentChoice");

		let t: ENetUC_Admin.AsnAdminFindUserArgumentChoice | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminFindUserArgumentChoice.getASN1Schema, data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminFindUserArgumentChoice["initEmpty"].call(0);
			// [Print_BER_DecoderChoiceDefCode]
			if (s.choiceName === "all" && asn1ts.Null.typeGuard(s)) {
				const _all = s.getValue();
				if (TSConverter.validateParamType(_all, "all", "null", errors, newContext, false))
					t.all = _all;
			} else if (s.choiceName === "u8sPhoneNumber" && asn1ts.Utf8String.typeGuard(s)) {
				const _u8sPhoneNumber = s.getValue();
				if (TSConverter.validateParamType(_u8sPhoneNumber, "u8sPhoneNumber", "string", errors, newContext, false))
					t.u8sPhoneNumber = _u8sPhoneNumber;
			} else if (!(optional === true))
				errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "Property has not been filled"));
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserArgumentChoice"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminGetUserProfileArgumentChoice_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetUserProfileArgumentChoice");

		const t = {} as ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice & INamedType;

		// [Print_JSON_EncoderChoiceDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminGetUserProfileArgumentChoice";
		if (s.defaultprofile === null)
			TSConverter.fillJSONParam(s, t, "defaultprofile", "null", errors, newContext);
		else if (s.u8sClientUsername != null)
			TSConverter.fillJSONParam(s, t, "u8sClientUsername", "string", errors, newContext);
		else
			errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "property missing"));

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileArgumentChoice"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetUserProfileArgumentChoice");

		let t: ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice["initEmpty"].call(0);
			// [Print_JSON_DecoderChoiceDefCode]
			if (s.defaultprofile !== undefined) {
				if (TSConverter.validateParam(s, "defaultprofile", "null", errors, newContext))
					t.defaultprofile = s.defaultprofile;
			} else if (s.u8sClientUsername !== undefined) {
				if (TSConverter.validateParam(s, "u8sClientUsername", "string", errors, newContext))
					t.u8sClientUsername = s.u8sClientUsername;
			} else if (!(optional === true))
				errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "Property has not been filled"));
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileArgumentChoice"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.BaseBlock | undefined {
		name ||= "AsnAdminGetUserProfileArgumentChoice";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		let t: asn1ts.BaseBlock | undefined;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetUserProfileArgumentChoice");

		// [Print_BER_EncoderChoiceDefCode]
		if (TSConverter.validateParam(s, "defaultprofile", "null", errors, newContext, true))
			t = new asn1ts.Null({ name: "defaultprofile", idBlock: { optionalID: 0 } });
		else if (TSConverter.validateParam(s, "u8sClientUsername", "string", errors, newContext, true))
			t = new asn1ts.Utf8String({ value: s.u8sClientUsername, name: "u8sClientUsername", idBlock: { optionalID: 1 } });
		else
			errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "property missing"));

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileArgumentChoice"))
			return t;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetUserProfileArgumentChoice");

		let t: ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice.getASN1Schema, data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminGetUserProfileArgumentChoice["initEmpty"].call(0);
			// [Print_BER_DecoderChoiceDefCode]
			if (s.choiceName === "defaultprofile" && asn1ts.Null.typeGuard(s)) {
				const _defaultprofile = s.getValue();
				if (TSConverter.validateParamType(_defaultprofile, "defaultprofile", "null", errors, newContext, false))
					t.defaultprofile = _defaultprofile;
			} else if (s.choiceName === "u8sClientUsername" && asn1ts.Utf8String.typeGuard(s)) {
				const _u8sClientUsername = s.getValue();
				if (TSConverter.validateParamType(_u8sClientUsername, "u8sClientUsername", "string", errors, newContext, false))
					t.u8sClientUsername = _u8sClientUsername;
			} else if (!(optional === true))
				errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "Property has not been filled"));
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileArgumentChoice"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminLoginArgumentChoice_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminLoginArgumentChoice, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminLoginArgumentChoice & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminLoginArgumentChoice");

		const t = {} as ENetUC_Admin.AsnAdminLoginArgumentChoice & INamedType;

		// [Print_JSON_EncoderChoiceDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminLoginArgumentChoice";
		if (s.u8sAdminPassword != null)
			TSConverter.fillJSONParam(s, t, "u8sAdminPassword", "string", errors, newContext);
		else if (s.u8sAdminPasswordCrypted != null)
			TSConverter.fillJSONParam(s, t, "u8sAdminPasswordCrypted", "string", errors, newContext);
		else
			errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "property missing"));

		if (errors.validateResult(newContext, "AsnAdminLoginArgumentChoice"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminLoginArgumentChoice | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminLoginArgumentChoice");

		let t: ENetUC_Admin.AsnAdminLoginArgumentChoice | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminLoginArgumentChoice>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminLoginArgumentChoice["initEmpty"].call(0);
			// [Print_JSON_DecoderChoiceDefCode]
			if (s.u8sAdminPassword !== undefined) {
				if (TSConverter.validateParam(s, "u8sAdminPassword", "string", errors, newContext))
					t.u8sAdminPassword = s.u8sAdminPassword;
			} else if (s.u8sAdminPasswordCrypted !== undefined) {
				if (TSConverter.validateParam(s, "u8sAdminPasswordCrypted", "string", errors, newContext))
					t.u8sAdminPasswordCrypted = s.u8sAdminPasswordCrypted;
			} else if (!(optional === true))
				errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "Property has not been filled"));
		}

		if (errors.validateResult(newContext, "AsnAdminLoginArgumentChoice"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminLoginArgumentChoice | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.BaseBlock | undefined {
		name ||= "AsnAdminLoginArgumentChoice";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		let t: asn1ts.BaseBlock | undefined;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminLoginArgumentChoice");

		// [Print_BER_EncoderChoiceDefCode]
		if (TSConverter.validateParam(s, "u8sAdminPassword", "string", errors, newContext, true))
			t = new asn1ts.Utf8String({ value: s.u8sAdminPassword, name: "u8sAdminPassword", idBlock: { optionalID: 0 } });
		else if (TSConverter.validateParam(s, "u8sAdminPasswordCrypted", "string", errors, newContext, true))
			t = new asn1ts.Utf8String({ value: s.u8sAdminPasswordCrypted, name: "u8sAdminPasswordCrypted", idBlock: { optionalID: 1 } });
		else
			errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "property missing"));

		if (errors.validateResult(newContext, "AsnAdminLoginArgumentChoice"))
			return t;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminLoginArgumentChoice | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminLoginArgumentChoice");

		let t: ENetUC_Admin.AsnAdminLoginArgumentChoice | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminLoginArgumentChoice.getASN1Schema, data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminLoginArgumentChoice["initEmpty"].call(0);
			// [Print_BER_DecoderChoiceDefCode]
			if (s.choiceName === "u8sAdminPassword" && asn1ts.Utf8String.typeGuard(s)) {
				const _u8sAdminPassword = s.getValue();
				if (TSConverter.validateParamType(_u8sAdminPassword, "u8sAdminPassword", "string", errors, newContext, false))
					t.u8sAdminPassword = _u8sAdminPassword;
			} else if (s.choiceName === "u8sAdminPasswordCrypted" && asn1ts.Utf8String.typeGuard(s)) {
				const _u8sAdminPasswordCrypted = s.getValue();
				if (TSConverter.validateParamType(_u8sAdminPasswordCrypted, "u8sAdminPasswordCrypted", "string", errors, newContext, false))
					t.u8sAdminPasswordCrypted = _u8sAdminPasswordCrypted;
			} else if (!(optional === true))
				errors.push(new ConverterError(ConverterErrorType.PROPERTY_MISSING, newContext.context, "Property has not been filled"));
		}

		if (errors.validateResult(newContext, "AsnAdminLoginArgumentChoice"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnUserMonitorLine_Converter {
	public static toJSON(s: ENetUC_Admin.AsnUserMonitorLine, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnUserMonitorLine & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUserMonitorLine");

		const t = {} as ENetUC_Admin.AsnUserMonitorLine & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnUserMonitorLine";
		TSConverter.fillJSONParam(s, t, "u8sPhoneNumber", "string", errors, newContext);

		if (errors.validateResult(newContext, "AsnUserMonitorLine"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnUserMonitorLine | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUserMonitorLine");

		let t: ENetUC_Admin.AsnUserMonitorLine | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnUserMonitorLine>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnUserMonitorLine["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sPhoneNumber", "string", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnUserMonitorLine"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnUserMonitorLine | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnUserMonitorLine";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUserMonitorLine");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sPhoneNumber", "string", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sPhoneNumber, name: "u8sPhoneNumber" }));
		}

		if (errors.validateResult(newContext, "AsnUserMonitorLine"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnUserMonitorLine | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUserMonitorLine");

		let t: ENetUC_Admin.AsnUserMonitorLine | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnUserMonitorLine.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnUserMonitorLine["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sPhoneNumber", "Utf8String", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnUserMonitorLine"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnSetUserProfilesErrorListItem_Converter {
	public static toJSON(s: ENetUC_Admin.AsnSetUserProfilesErrorListItem, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnSetUserProfilesErrorListItem & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnSetUserProfilesErrorListItem");

		const t = {} as ENetUC_Admin.AsnSetUserProfilesErrorListItem & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnSetUserProfilesErrorListItem";
		TSConverter.fillJSONParam(s, t, "u8sUserName", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iErrorDetail", "number", errors, newContext);

		if (errors.validateResult(newContext, "AsnSetUserProfilesErrorListItem"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnSetUserProfilesErrorListItem | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnSetUserProfilesErrorListItem");

		let t: ENetUC_Admin.AsnSetUserProfilesErrorListItem | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnSetUserProfilesErrorListItem>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnSetUserProfilesErrorListItem["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sUserName", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iErrorDetail", "number", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnSetUserProfilesErrorListItem"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnSetUserProfilesErrorListItem | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnSetUserProfilesErrorListItem";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnSetUserProfilesErrorListItem");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sUserName", "string", errors, newContext);
		TSConverter.validateParam(s, "iErrorDetail", "number", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sUserName, name: "u8sUserName" }));
			t.push(new asn1ts.Integer({ value: s.iErrorDetail, name: "iErrorDetail" }));
		}

		if (errors.validateResult(newContext, "AsnSetUserProfilesErrorListItem"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnSetUserProfilesErrorListItem | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnSetUserProfilesErrorListItem");

		let t: ENetUC_Admin.AsnSetUserProfilesErrorListItem | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnSetUserProfilesErrorListItem.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnSetUserProfilesErrorListItem["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sUserName", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iErrorDetail", "Integer", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnSetUserProfilesErrorListItem"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminGetUserProfilesArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminGetUserProfilesArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminGetUserProfilesArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetUserProfilesArgument");

		const t = {} as ENetUC_Admin.AsnAdminGetUserProfilesArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminGetUserProfilesArgument";
		TSConverter.fillJSONParam(s, t, "iActiveUsersOnly", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iFilterOnlineState", "number", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminGetUserProfilesArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetUserProfilesArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetUserProfilesArgument");

		let t: ENetUC_Admin.AsnAdminGetUserProfilesArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminGetUserProfilesArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminGetUserProfilesArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "iActiveUsersOnly", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iFilterOnlineState", "number", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfilesArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminGetUserProfilesArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminGetUserProfilesArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetUserProfilesArgument");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "iActiveUsersOnly", "number", errors, newContext);
		TSConverter.validateParam(s, "iFilterOnlineState", "number", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Integer({ value: s.iActiveUsersOnly, name: "iActiveUsersOnly" }));
			t.push(new asn1ts.Integer({ value: s.iFilterOnlineState, name: "iFilterOnlineState" }));
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfilesArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetUserProfilesArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetUserProfilesArgument");

		let t: ENetUC_Admin.AsnAdminGetUserProfilesArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminGetUserProfilesArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminGetUserProfilesArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "iActiveUsersOnly", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iFilterOnlineState", "Integer", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfilesArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetUserProfileResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetUserProfileResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetUserProfileResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetUserProfileResult");

		const t = {} as ENetUC_Admin.AsnAdminSetUserProfileResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetUserProfileResult";
		TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminSetUserProfileResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetUserProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetUserProfileResult");

		let t: ENetUC_Admin.AsnAdminSetUserProfileResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetUserProfileResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetUserProfileResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfileResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetUserProfileResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetUserProfileResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetUserProfileResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "bSuccess", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.bSuccess, name: "bSuccess" }));
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfileResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetUserProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetUserProfileResult");

		let t: ENetUC_Admin.AsnAdminSetUserProfileResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetUserProfileResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetUserProfileResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "bSuccess", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfileResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminRemoveUserProfileResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminRemoveUserProfileResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminRemoveUserProfileResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveUserProfileResult");

		const t = {} as ENetUC_Admin.AsnAdminRemoveUserProfileResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminRemoveUserProfileResult";
		TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminRemoveUserProfileResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveUserProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveUserProfileResult");

		let t: ENetUC_Admin.AsnAdminRemoveUserProfileResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminRemoveUserProfileResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminRemoveUserProfileResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveUserProfileResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminRemoveUserProfileResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminRemoveUserProfileResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveUserProfileResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "bSuccess", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.bSuccess, name: "bSuccess" }));
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveUserProfileResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveUserProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveUserProfileResult");

		let t: ENetUC_Admin.AsnAdminRemoveUserProfileResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminRemoveUserProfileResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminRemoveUserProfileResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "bSuccess", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveUserProfileResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminAddUserProfileResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminAddUserProfileResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminAddUserProfileResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddUserProfileResult");

		const t = {} as ENetUC_Admin.AsnAdminAddUserProfileResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminAddUserProfileResult";
		TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminAddUserProfileResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddUserProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddUserProfileResult");

		let t: ENetUC_Admin.AsnAdminAddUserProfileResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminAddUserProfileResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminAddUserProfileResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminAddUserProfileResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminAddUserProfileResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminAddUserProfileResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddUserProfileResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "bSuccess", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.bSuccess, name: "bSuccess" }));
		}

		if (errors.validateResult(newContext, "AsnAdminAddUserProfileResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddUserProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddUserProfileResult");

		let t: ENetUC_Admin.AsnAdminAddUserProfileResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminAddUserProfileResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminAddUserProfileResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "bSuccess", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminAddUserProfileResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminGetComputerProfileArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminGetComputerProfileArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminGetComputerProfileArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetComputerProfileArgument");

		const t = {} as ENetUC_Admin.AsnAdminGetComputerProfileArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminGetComputerProfileArgument";
		TSConverter.fillJSONParam(s, t, "u8sClientComputerName", "string", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminGetComputerProfileArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetComputerProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetComputerProfileArgument");

		let t: ENetUC_Admin.AsnAdminGetComputerProfileArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminGetComputerProfileArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminGetComputerProfileArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sClientComputerName", "string", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminGetComputerProfileArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminGetComputerProfileArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminGetComputerProfileArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetComputerProfileArgument");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sClientComputerName", "string", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sClientComputerName, name: "u8sClientComputerName" }));
		}

		if (errors.validateResult(newContext, "AsnAdminGetComputerProfileArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetComputerProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetComputerProfileArgument");

		let t: ENetUC_Admin.AsnAdminGetComputerProfileArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminGetComputerProfileArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminGetComputerProfileArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sClientComputerName", "Utf8String", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminGetComputerProfileArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetComputerProfileResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetComputerProfileResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetComputerProfileResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetComputerProfileResult");

		const t = {} as ENetUC_Admin.AsnAdminSetComputerProfileResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetComputerProfileResult";
		TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminSetComputerProfileResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetComputerProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetComputerProfileResult");

		let t: ENetUC_Admin.AsnAdminSetComputerProfileResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetComputerProfileResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetComputerProfileResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminSetComputerProfileResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetComputerProfileResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetComputerProfileResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetComputerProfileResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "bSuccess", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.bSuccess, name: "bSuccess" }));
		}

		if (errors.validateResult(newContext, "AsnAdminSetComputerProfileResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetComputerProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetComputerProfileResult");

		let t: ENetUC_Admin.AsnAdminSetComputerProfileResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetComputerProfileResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetComputerProfileResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "bSuccess", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminSetComputerProfileResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminAddComputerProfileResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminAddComputerProfileResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminAddComputerProfileResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddComputerProfileResult");

		const t = {} as ENetUC_Admin.AsnAdminAddComputerProfileResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminAddComputerProfileResult";
		TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminAddComputerProfileResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddComputerProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddComputerProfileResult");

		let t: ENetUC_Admin.AsnAdminAddComputerProfileResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminAddComputerProfileResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminAddComputerProfileResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminAddComputerProfileResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminAddComputerProfileResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminAddComputerProfileResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddComputerProfileResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "bSuccess", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.bSuccess, name: "bSuccess" }));
		}

		if (errors.validateResult(newContext, "AsnAdminAddComputerProfileResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddComputerProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddComputerProfileResult");

		let t: ENetUC_Admin.AsnAdminAddComputerProfileResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminAddComputerProfileResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminAddComputerProfileResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "bSuccess", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminAddComputerProfileResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminFindUserProfile_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminFindUserProfile, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminFindUserProfile & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindUserProfile");

		const t = {} as ENetUC_Admin.AsnAdminFindUserProfile & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminFindUserProfile";
		TSConverter.fillJSONParam(s, t, "u8sDNPath", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sUserName", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sFirstName", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sLastName", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sDisplayName", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sPhonePrimary", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sPhoneSecondary", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iCtiEnabled", "number", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminFindUserProfile"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindUserProfile | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindUserProfile");

		let t: ENetUC_Admin.AsnAdminFindUserProfile | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminFindUserProfile>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminFindUserProfile["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sDNPath", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sUserName", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sFirstName", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sLastName", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sDisplayName", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sPhonePrimary", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sPhoneSecondary", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iCtiEnabled", "number", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserProfile"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminFindUserProfile | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminFindUserProfile";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindUserProfile");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sDNPath", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sUserName", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sFirstName", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sLastName", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sDisplayName", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sPhonePrimary", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sPhoneSecondary", "string", errors, newContext);
		TSConverter.validateParam(s, "iCtiEnabled", "number", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sDNPath, name: "u8sDNPath" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sUserName, name: "u8sUserName" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sFirstName, name: "u8sFirstName" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sLastName, name: "u8sLastName" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sDisplayName, name: "u8sDisplayName" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sPhonePrimary, name: "u8sPhonePrimary" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sPhoneSecondary, name: "u8sPhoneSecondary" }));
			t.push(new asn1ts.Integer({ value: s.iCtiEnabled, name: "iCtiEnabled" }));
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserProfile"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindUserProfile | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindUserProfile");

		let t: ENetUC_Admin.AsnAdminFindUserProfile | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminFindUserProfile.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminFindUserProfile["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sDNPath", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sUserName", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sFirstName", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sLastName", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sDisplayName", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sPhonePrimary", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sPhoneSecondary", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iCtiEnabled", "Integer", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserProfile"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnGroupProfile_Converter {
	public static toJSON(s: ENetUC_Admin.AsnGroupProfile, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnGroupProfile & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGroupProfile");

		const t = {} as ENetUC_Admin.AsnGroupProfile & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnGroupProfile";
		TSConverter.fillJSONParam(s, t, "iEnabled", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sDNPath", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sGroupName", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sobjectGUID", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sPhoneNumber", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sPhoneSecondary", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sGroupLeaderDN", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sGroupCoLeaderDN", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iGroupStaticRights", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iGroupStaticRights2", "number", errors, newContext, true);
		const _asnGroupRightDetails = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRights_Converter.toJSON(s.asnGroupRightDetails, errors, newContext, "asnGroupRightDetails");
		if (_asnGroupRightDetails)
			t.asnGroupRightDetails = _asnGroupRightDetails;
		const _asnGroupLeaderRightDetails = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRights_Converter.toJSON(s.asnGroupLeaderRightDetails, errors, newContext, "asnGroupLeaderRightDetails");
		if (_asnGroupLeaderRightDetails)
			t.asnGroupLeaderRightDetails = _asnGroupLeaderRightDetails;
		const _listUserDNs = ENetUC_Common_Converter.UTF8StringList_Converter.toJSON(s.listUserDNs, errors, newContext, "listUserDNs");
		if (_listUserDNs)
			t.listUserDNs = _listUserDNs;
		TSConverter.fillJSONParam(s, t, "u8sObjectSid", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iGroupProfileVersion", "number", errors, newContext);
		if (s.asnUserPropertyBag) {
			const _asnUserPropertyBag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.toJSON(s.asnUserPropertyBag, errors, newContext, "asnUserPropertyBag");
			if (_asnUserPropertyBag)
				t.asnUserPropertyBag = _asnUserPropertyBag;
		}
		TSConverter.fillJSONParam(s, t, "u8sSIPURI", "string", errors, newContext, true);
		TSConverter.fillJSONParam(s, t, "u8sMailAddress", "string", errors, newContext, true);
		if (s.optionalParams) {
			const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toJSON(s.optionalParams, errors, newContext, "optionalParams");
			if (_optionalParams)
				t.optionalParams = _optionalParams;
		}

		if (errors.validateResult(newContext, "AsnGroupProfile"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGroupProfile | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGroupProfile");

		let t: ENetUC_Admin.AsnGroupProfile | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnGroupProfile>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnGroupProfile["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "iEnabled", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sDNPath", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sGroupName", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sobjectGUID", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sPhoneNumber", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sPhoneSecondary", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sGroupLeaderDN", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sGroupCoLeaderDN", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iGroupStaticRights", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iGroupStaticRights2", "number", errors, newContext, true);
			const _asngrouprightdetails = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRights_Converter.fromJSON(s.asnGroupRightDetails, errors, newContext, "asnGroupRightDetails", false);
			if (_asngrouprightdetails)
				t.asnGroupRightDetails = _asngrouprightdetails;
			const _asngroupleaderrightdetails = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRights_Converter.fromJSON(s.asnGroupLeaderRightDetails, errors, newContext, "asnGroupLeaderRightDetails", false);
			if (_asngroupleaderrightdetails)
				t.asnGroupLeaderRightDetails = _asngroupleaderrightdetails;
			const _listuserdns = ENetUC_Common_Converter.UTF8StringList_Converter.fromJSON(s.listUserDNs, errors, newContext, "listUserDNs", false);
			if (_listuserdns)
				t.listUserDNs = _listuserdns;
			TSConverter.fillJSONParam(s, t, "u8sObjectSid", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iGroupProfileVersion", "number", errors, newContext, false);
			const _asnuserpropertybag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.fromJSON(s.asnUserPropertyBag, errors, newContext, "asnUserPropertyBag", true);
			if (_asnuserpropertybag)
				t.asnUserPropertyBag = _asnuserpropertybag;
			TSConverter.fillJSONParam(s, t, "u8sSIPURI", "string", errors, newContext, true);
			TSConverter.fillJSONParam(s, t, "u8sMailAddress", "string", errors, newContext, true);
			const _optionalparams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromJSON(s.optionalParams, errors, newContext, "optionalParams", true);
			if (_optionalparams)
				t.optionalParams = _optionalparams;
		}

		if (errors.validateResult(newContext, "AsnGroupProfile"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnGroupProfile | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnGroupProfile";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGroupProfile");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "iEnabled", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sDNPath", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sGroupName", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sobjectGUID", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sPhoneNumber", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sPhoneSecondary", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sGroupLeaderDN", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sGroupCoLeaderDN", "string", errors, newContext);
		TSConverter.validateParam(s, "iGroupStaticRights", "number", errors, newContext);
		TSConverter.validateParam(s, "iGroupStaticRights2", "number", errors, newContext, true);
		const _asnGroupRightDetails = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRights_Converter.toBER(s.asnGroupRightDetails, errors, newContext, "asnGroupRightDetails");
		const _asnGroupLeaderRightDetails = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRights_Converter.toBER(s.asnGroupLeaderRightDetails, errors, newContext, "asnGroupLeaderRightDetails");
		const _listUserDNs = ENetUC_Common_Converter.UTF8StringList_Converter.toBER(s.listUserDNs, errors, newContext, "listUserDNs");
		TSConverter.validateParam(s, "u8sObjectSid", "string", errors, newContext);
		TSConverter.validateParam(s, "iGroupProfileVersion", "number", errors, newContext);
		const _asnUserPropertyBag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.toBER(s.asnUserPropertyBag, errors, newContext, "asnUserPropertyBag", 1);
		TSConverter.validateParam(s, "u8sSIPURI", "string", errors, newContext, true);
		TSConverter.validateParam(s, "u8sMailAddress", "string", errors, newContext, true);
		const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toBER(s.optionalParams, errors, newContext, "optionalParams", 4);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Integer({ value: s.iEnabled, name: "iEnabled" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sDNPath, name: "u8sDNPath" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sGroupName, name: "u8sGroupName" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sobjectGUID, name: "u8sobjectGUID" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sPhoneNumber, name: "u8sPhoneNumber" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sPhoneSecondary, name: "u8sPhoneSecondary" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sGroupLeaderDN, name: "u8sGroupLeaderDN" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sGroupCoLeaderDN, name: "u8sGroupCoLeaderDN" }));
			t.push(new asn1ts.Integer({ value: s.iGroupStaticRights, name: "iGroupStaticRights" }));
			if (s.iGroupStaticRights2 !== undefined)
				t.push(new asn1ts.Integer({ value: s.iGroupStaticRights2, name: "iGroupStaticRights2", idBlock: { optionalID: 0 } }));
			if (_asnGroupRightDetails)
				t.push(_asnGroupRightDetails);
			if (_asnGroupLeaderRightDetails)
				t.push(_asnGroupLeaderRightDetails);
			if (_listUserDNs)
				t.push(_listUserDNs);
			t.push(new asn1ts.Utf8String({ value: s.u8sObjectSid, name: "u8sObjectSid" }));
			t.push(new asn1ts.Integer({ value: s.iGroupProfileVersion, name: "iGroupProfileVersion" }));
			if (_asnUserPropertyBag)
				t.push(_asnUserPropertyBag);
			if (s.u8sSIPURI !== undefined)
				t.push(new asn1ts.Utf8String({ value: s.u8sSIPURI, name: "u8sSIPURI", idBlock: { optionalID: 2 } }));
			if (s.u8sMailAddress !== undefined)
				t.push(new asn1ts.Utf8String({ value: s.u8sMailAddress, name: "u8sMailAddress", idBlock: { optionalID: 3 } }));
			if (_optionalParams)
				t.push(_optionalParams);
		}

		if (errors.validateResult(newContext, "AsnGroupProfile"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGroupProfile | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGroupProfile");

		let t: ENetUC_Admin.AsnGroupProfile | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnGroupProfile.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnGroupProfile["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "iEnabled", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sDNPath", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sGroupName", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sobjectGUID", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sPhoneNumber", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sPhoneSecondary", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sGroupLeaderDN", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sGroupCoLeaderDN", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iGroupStaticRights", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iGroupStaticRights2", "Integer", errors, newContext, true);
			const _asngrouprightdetails = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRights_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "asnGroupRightDetails"), errors, newContext, "asnGroupRightDetails");
			if (_asngrouprightdetails)
				t.asnGroupRightDetails = _asngrouprightdetails;
			const _asngroupleaderrightdetails = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRights_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "asnGroupLeaderRightDetails"), errors, newContext, "asnGroupLeaderRightDetails");
			if (_asngroupleaderrightdetails)
				t.asnGroupLeaderRightDetails = _asngroupleaderrightdetails;
			const _listuserdns = ENetUC_Common_Converter.UTF8StringList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "listUserDNs"), errors, newContext, "listUserDNs");
			if (_listuserdns)
				t.listUserDNs = _listuserdns;
			TSConverter.fillASN1Param(s, t, "u8sObjectSid", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iGroupProfileVersion", "Integer", errors, newContext);
			t.asnUserPropertyBag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "asnUserPropertyBag"), errors, newContext, "asnUserPropertyBag", true);
			TSConverter.fillASN1Param(s, t, "u8sSIPURI", "Utf8String", errors, newContext, true);
			TSConverter.fillASN1Param(s, t, "u8sMailAddress", "Utf8String", errors, newContext, true);
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "optionalParams"), errors, newContext, "optionalParams", true);
		}

		if (errors.validateResult(newContext, "AsnGroupProfile"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminFindGroupProfilesArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminFindGroupProfilesArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminFindGroupProfilesArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindGroupProfilesArgument");

		const t = {} as ENetUC_Admin.AsnAdminFindGroupProfilesArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminFindGroupProfilesArgument";
		TSConverter.fillJSONParam(s, t, "iSearchFilter", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sStringParameter", "string", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminFindGroupProfilesArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindGroupProfilesArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindGroupProfilesArgument");

		let t: ENetUC_Admin.AsnAdminFindGroupProfilesArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminFindGroupProfilesArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminFindGroupProfilesArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "iSearchFilter", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sStringParameter", "string", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminFindGroupProfilesArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminFindGroupProfilesArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminFindGroupProfilesArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindGroupProfilesArgument");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "iSearchFilter", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sStringParameter", "string", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Integer({ value: s.iSearchFilter, name: "iSearchFilter" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sStringParameter, name: "u8sStringParameter" }));
		}

		if (errors.validateResult(newContext, "AsnAdminFindGroupProfilesArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindGroupProfilesArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindGroupProfilesArgument");

		let t: ENetUC_Admin.AsnAdminFindGroupProfilesArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminFindGroupProfilesArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminFindGroupProfilesArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "iSearchFilter", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sStringParameter", "Utf8String", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminFindGroupProfilesArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetGroupProfileResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetGroupProfileResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetGroupProfileResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetGroupProfileResult");

		const t = {} as ENetUC_Admin.AsnAdminSetGroupProfileResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetGroupProfileResult";
		TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminSetGroupProfileResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetGroupProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetGroupProfileResult");

		let t: ENetUC_Admin.AsnAdminSetGroupProfileResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetGroupProfileResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetGroupProfileResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminSetGroupProfileResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetGroupProfileResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetGroupProfileResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetGroupProfileResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "bSuccess", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.bSuccess, name: "bSuccess" }));
		}

		if (errors.validateResult(newContext, "AsnAdminSetGroupProfileResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetGroupProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetGroupProfileResult");

		let t: ENetUC_Admin.AsnAdminSetGroupProfileResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetGroupProfileResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetGroupProfileResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "bSuccess", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminSetGroupProfileResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminAddGroupProfileResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminAddGroupProfileResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminAddGroupProfileResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddGroupProfileResult");

		const t = {} as ENetUC_Admin.AsnAdminAddGroupProfileResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminAddGroupProfileResult";
		TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminAddGroupProfileResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddGroupProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddGroupProfileResult");

		let t: ENetUC_Admin.AsnAdminAddGroupProfileResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminAddGroupProfileResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminAddGroupProfileResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminAddGroupProfileResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminAddGroupProfileResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminAddGroupProfileResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddGroupProfileResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "bSuccess", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.bSuccess, name: "bSuccess" }));
		}

		if (errors.validateResult(newContext, "AsnAdminAddGroupProfileResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddGroupProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddGroupProfileResult");

		let t: ENetUC_Admin.AsnAdminAddGroupProfileResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminAddGroupProfileResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminAddGroupProfileResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "bSuccess", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminAddGroupProfileResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminRemoveGroupProfileResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminRemoveGroupProfileResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminRemoveGroupProfileResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveGroupProfileResult");

		const t = {} as ENetUC_Admin.AsnAdminRemoveGroupProfileResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminRemoveGroupProfileResult";
		TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminRemoveGroupProfileResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveGroupProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveGroupProfileResult");

		let t: ENetUC_Admin.AsnAdminRemoveGroupProfileResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminRemoveGroupProfileResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminRemoveGroupProfileResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveGroupProfileResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminRemoveGroupProfileResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminRemoveGroupProfileResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveGroupProfileResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "bSuccess", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.bSuccess, name: "bSuccess" }));
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveGroupProfileResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveGroupProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveGroupProfileResult");

		let t: ENetUC_Admin.AsnAdminRemoveGroupProfileResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminRemoveGroupProfileResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminRemoveGroupProfileResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "bSuccess", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveGroupProfileResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnGetDatabaseManagerSettingsArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetDatabaseManagerSettingsArgument");

		const t = {} as ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnGetDatabaseManagerSettingsArgument";

		if (errors.validateResult(newContext, "AsnGetDatabaseManagerSettingsArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetDatabaseManagerSettingsArgument");

		let t: ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
		}

		if (errors.validateResult(newContext, "AsnGetDatabaseManagerSettingsArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnGetDatabaseManagerSettingsArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetDatabaseManagerSettingsArgument");

		// [Print_BER_EncoderSeqDefCode]

		if (errors.validateResult(newContext, "AsnGetDatabaseManagerSettingsArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetDatabaseManagerSettingsArgument");

		let t: ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
		}

		if (errors.validateResult(newContext, "AsnGetDatabaseManagerSettingsArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnGetDatabaseManagerSettingsResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnGetDatabaseManagerSettingsResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnGetDatabaseManagerSettingsResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetDatabaseManagerSettingsResult");

		const t = {} as ENetUC_Admin.AsnGetDatabaseManagerSettingsResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnGetDatabaseManagerSettingsResult";
		TSConverter.fillJSONParam(s, t, "u8sEngine", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sServer", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sFilePath", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sLoginName", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sPassword", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sDatabaseName", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sOfflineTable", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sJournalTable", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sTrackerTable", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sConversationTable", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sAppointmentTable", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sTaskTable", "string", errors, newContext);

		if (errors.validateResult(newContext, "AsnGetDatabaseManagerSettingsResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetDatabaseManagerSettingsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetDatabaseManagerSettingsResult");

		let t: ENetUC_Admin.AsnGetDatabaseManagerSettingsResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnGetDatabaseManagerSettingsResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnGetDatabaseManagerSettingsResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sEngine", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sServer", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sFilePath", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sLoginName", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sPassword", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sDatabaseName", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sOfflineTable", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sJournalTable", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sTrackerTable", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sConversationTable", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sAppointmentTable", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sTaskTable", "string", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnGetDatabaseManagerSettingsResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnGetDatabaseManagerSettingsResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnGetDatabaseManagerSettingsResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetDatabaseManagerSettingsResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sEngine", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sServer", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sFilePath", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sLoginName", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sPassword", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sDatabaseName", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sOfflineTable", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sJournalTable", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sTrackerTable", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sConversationTable", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sAppointmentTable", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sTaskTable", "string", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sEngine, name: "u8sEngine" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sServer, name: "u8sServer" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sFilePath, name: "u8sFilePath" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sLoginName, name: "u8sLoginName" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sPassword, name: "u8sPassword" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sDatabaseName, name: "u8sDatabaseName" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sOfflineTable, name: "u8sOfflineTable" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sJournalTable, name: "u8sJournalTable" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sTrackerTable, name: "u8sTrackerTable" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sConversationTable, name: "u8sConversationTable" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sAppointmentTable, name: "u8sAppointmentTable" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sTaskTable, name: "u8sTaskTable" }));
		}

		if (errors.validateResult(newContext, "AsnGetDatabaseManagerSettingsResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetDatabaseManagerSettingsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetDatabaseManagerSettingsResult");

		let t: ENetUC_Admin.AsnGetDatabaseManagerSettingsResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnGetDatabaseManagerSettingsResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnGetDatabaseManagerSettingsResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sEngine", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sServer", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sFilePath", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sLoginName", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sPassword", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sDatabaseName", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sOfflineTable", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sJournalTable", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sTrackerTable", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sConversationTable", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sAppointmentTable", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sTaskTable", "Utf8String", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnGetDatabaseManagerSettingsResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnGetNetworkInterfacePortsArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnGetNetworkInterfacePortsArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnGetNetworkInterfacePortsArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetNetworkInterfacePortsArgument");

		const t = {} as ENetUC_Admin.AsnGetNetworkInterfacePortsArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnGetNetworkInterfacePortsArgument";

		if (errors.validateResult(newContext, "AsnGetNetworkInterfacePortsArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetNetworkInterfacePortsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetNetworkInterfacePortsArgument");

		let t: ENetUC_Admin.AsnGetNetworkInterfacePortsArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnGetNetworkInterfacePortsArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnGetNetworkInterfacePortsArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
		}

		if (errors.validateResult(newContext, "AsnGetNetworkInterfacePortsArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnGetNetworkInterfacePortsArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnGetNetworkInterfacePortsArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetNetworkInterfacePortsArgument");

		// [Print_BER_EncoderSeqDefCode]

		if (errors.validateResult(newContext, "AsnGetNetworkInterfacePortsArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetNetworkInterfacePortsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetNetworkInterfacePortsArgument");

		let t: ENetUC_Admin.AsnGetNetworkInterfacePortsArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnGetNetworkInterfacePortsArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnGetNetworkInterfacePortsArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
		}

		if (errors.validateResult(newContext, "AsnGetNetworkInterfacePortsArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnGetNetworkInterfacePortsResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnGetNetworkInterfacePortsResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnGetNetworkInterfacePortsResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetNetworkInterfacePortsResult");

		const t = {} as ENetUC_Admin.AsnGetNetworkInterfacePortsResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnGetNetworkInterfacePortsResult";
		TSConverter.fillJSONParam(s, t, "iAdminPort", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sAdminBindAddress", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iNetCtiPort", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sNetCtiBindAddress", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iNetTSPPort", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sNetTSPBindAddress", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iLDAPServerPort", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sLDAPServerBindAddress", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iHTTPServerPort", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sHTTPServerBindAddress", "string", errors, newContext);

		if (errors.validateResult(newContext, "AsnGetNetworkInterfacePortsResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetNetworkInterfacePortsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetNetworkInterfacePortsResult");

		let t: ENetUC_Admin.AsnGetNetworkInterfacePortsResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnGetNetworkInterfacePortsResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnGetNetworkInterfacePortsResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "iAdminPort", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sAdminBindAddress", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iNetCtiPort", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sNetCtiBindAddress", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iNetTSPPort", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sNetTSPBindAddress", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iLDAPServerPort", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sLDAPServerBindAddress", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iHTTPServerPort", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sHTTPServerBindAddress", "string", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnGetNetworkInterfacePortsResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnGetNetworkInterfacePortsResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnGetNetworkInterfacePortsResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetNetworkInterfacePortsResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "iAdminPort", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sAdminBindAddress", "string", errors, newContext);
		TSConverter.validateParam(s, "iNetCtiPort", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sNetCtiBindAddress", "string", errors, newContext);
		TSConverter.validateParam(s, "iNetTSPPort", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sNetTSPBindAddress", "string", errors, newContext);
		TSConverter.validateParam(s, "iLDAPServerPort", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sLDAPServerBindAddress", "string", errors, newContext);
		TSConverter.validateParam(s, "iHTTPServerPort", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sHTTPServerBindAddress", "string", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Integer({ value: s.iAdminPort, name: "iAdminPort" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sAdminBindAddress, name: "u8sAdminBindAddress" }));
			t.push(new asn1ts.Integer({ value: s.iNetCtiPort, name: "iNetCtiPort" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sNetCtiBindAddress, name: "u8sNetCtiBindAddress" }));
			t.push(new asn1ts.Integer({ value: s.iNetTSPPort, name: "iNetTSPPort" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sNetTSPBindAddress, name: "u8sNetTSPBindAddress" }));
			t.push(new asn1ts.Integer({ value: s.iLDAPServerPort, name: "iLDAPServerPort" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sLDAPServerBindAddress, name: "u8sLDAPServerBindAddress" }));
			t.push(new asn1ts.Integer({ value: s.iHTTPServerPort, name: "iHTTPServerPort" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sHTTPServerBindAddress, name: "u8sHTTPServerBindAddress" }));
		}

		if (errors.validateResult(newContext, "AsnGetNetworkInterfacePortsResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetNetworkInterfacePortsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetNetworkInterfacePortsResult");

		let t: ENetUC_Admin.AsnGetNetworkInterfacePortsResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnGetNetworkInterfacePortsResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnGetNetworkInterfacePortsResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "iAdminPort", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sAdminBindAddress", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iNetCtiPort", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sNetCtiBindAddress", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iNetTSPPort", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sNetTSPBindAddress", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iLDAPServerPort", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sLDAPServerBindAddress", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iHTTPServerPort", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sHTTPServerBindAddress", "Utf8String", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnGetNetworkInterfacePortsResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnGetAvailableLinesArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnGetAvailableLinesArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnGetAvailableLinesArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetAvailableLinesArgument");

		const t = {} as ENetUC_Admin.AsnGetAvailableLinesArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnGetAvailableLinesArgument";
		if (s.optionalParams) {
			const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toJSON(s.optionalParams, errors, newContext, "optionalParams");
			if (_optionalParams)
				t.optionalParams = _optionalParams;
		}

		if (errors.validateResult(newContext, "AsnGetAvailableLinesArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetAvailableLinesArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetAvailableLinesArgument");

		let t: ENetUC_Admin.AsnGetAvailableLinesArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnGetAvailableLinesArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnGetAvailableLinesArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _optionalparams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromJSON(s.optionalParams, errors, newContext, "optionalParams", true);
			if (_optionalparams)
				t.optionalParams = _optionalparams;
		}

		if (errors.validateResult(newContext, "AsnGetAvailableLinesArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnGetAvailableLinesArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnGetAvailableLinesArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetAvailableLinesArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toBER(s.optionalParams, errors, newContext, "optionalParams", true);
		if (!errors.hasNewErrors()) {
			if (_optionalParams)
				t.push(_optionalParams);
		}

		if (errors.validateResult(newContext, "AsnGetAvailableLinesArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetAvailableLinesArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetAvailableLinesArgument");

		let t: ENetUC_Admin.AsnGetAvailableLinesArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnGetAvailableLinesArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnGetAvailableLinesArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "optionalParams"), errors, newContext, "optionalParams", true);
		}

		if (errors.validateResult(newContext, "AsnGetAvailableLinesArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAvailableLineDetails_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAvailableLineDetails, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAvailableLineDetails & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAvailableLineDetails");

		const t = {} as ENetUC_Admin.AsnAvailableLineDetails & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAvailableLineDetails";
		TSConverter.fillJSONParam(s, t, "u8sLineURI", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sLineName", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sCurrentLineOwner", "string", errors, newContext);

		if (errors.validateResult(newContext, "AsnAvailableLineDetails"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAvailableLineDetails | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAvailableLineDetails");

		let t: ENetUC_Admin.AsnAvailableLineDetails | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAvailableLineDetails>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAvailableLineDetails["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sLineURI", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sLineName", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sCurrentLineOwner", "string", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAvailableLineDetails"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAvailableLineDetails | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAvailableLineDetails";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAvailableLineDetails");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sLineURI", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sLineName", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sCurrentLineOwner", "string", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sLineURI, name: "u8sLineURI" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sLineName, name: "u8sLineName" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sCurrentLineOwner, name: "u8sCurrentLineOwner" }));
		}

		if (errors.validateResult(newContext, "AsnAvailableLineDetails"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAvailableLineDetails | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAvailableLineDetails");

		let t: ENetUC_Admin.AsnAvailableLineDetails | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAvailableLineDetails.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAvailableLineDetails["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sLineURI", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sLineName", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sCurrentLineOwner", "Utf8String", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAvailableLineDetails"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnGetUserManagerSettingsArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnGetUserManagerSettingsArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnGetUserManagerSettingsArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetUserManagerSettingsArgument");

		const t = {} as ENetUC_Admin.AsnGetUserManagerSettingsArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnGetUserManagerSettingsArgument";

		if (errors.validateResult(newContext, "AsnGetUserManagerSettingsArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetUserManagerSettingsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetUserManagerSettingsArgument");

		let t: ENetUC_Admin.AsnGetUserManagerSettingsArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnGetUserManagerSettingsArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnGetUserManagerSettingsArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
		}

		if (errors.validateResult(newContext, "AsnGetUserManagerSettingsArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnGetUserManagerSettingsArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnGetUserManagerSettingsArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetUserManagerSettingsArgument");

		// [Print_BER_EncoderSeqDefCode]

		if (errors.validateResult(newContext, "AsnGetUserManagerSettingsArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetUserManagerSettingsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetUserManagerSettingsArgument");

		let t: ENetUC_Admin.AsnGetUserManagerSettingsArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnGetUserManagerSettingsArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnGetUserManagerSettingsArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
		}

		if (errors.validateResult(newContext, "AsnGetUserManagerSettingsArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnGetUserManagerSettingsResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnGetUserManagerSettingsResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnGetUserManagerSettingsResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetUserManagerSettingsResult");

		const t = {} as ENetUC_Admin.AsnGetUserManagerSettingsResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnGetUserManagerSettingsResult";
		TSConverter.fillJSONParam(s, t, "iSelectedUMMode", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iUMSecurity", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iUMSelfInstall", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "bAutoBindFirstLine", "boolean", errors, newContext);
		TSConverter.fillJSONParam(s, t, "bAutoBindSecondLine", "boolean", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iPhoneNumberPreformatFormat", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "bLDAPBaseAttributeWriteBackEnabled", "boolean", errors, newContext);
		const _u8slistPresenceDomain = ENetUC_Common_Converter.UTF8StringList_Converter.toJSON(s.u8slistPresenceDomain, errors, newContext, "u8slistPresenceDomain");
		if (_u8slistPresenceDomain)
			t.u8slistPresenceDomain = _u8slistPresenceDomain;
		if (s.optionalParams) {
			const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toJSON(s.optionalParams, errors, newContext, "optionalParams");
			if (_optionalParams)
				t.optionalParams = _optionalParams;
		}

		if (errors.validateResult(newContext, "AsnGetUserManagerSettingsResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetUserManagerSettingsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetUserManagerSettingsResult");

		let t: ENetUC_Admin.AsnGetUserManagerSettingsResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnGetUserManagerSettingsResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnGetUserManagerSettingsResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "iSelectedUMMode", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iUMSecurity", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iUMSelfInstall", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "bAutoBindFirstLine", "boolean", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "bAutoBindSecondLine", "boolean", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iPhoneNumberPreformatFormat", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "bLDAPBaseAttributeWriteBackEnabled", "boolean", errors, newContext, false);
			const _u8slistpresencedomain = ENetUC_Common_Converter.UTF8StringList_Converter.fromJSON(s.u8slistPresenceDomain, errors, newContext, "u8slistPresenceDomain", false);
			if (_u8slistpresencedomain)
				t.u8slistPresenceDomain = _u8slistpresencedomain;
			const _optionalparams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromJSON(s.optionalParams, errors, newContext, "optionalParams", true);
			if (_optionalparams)
				t.optionalParams = _optionalparams;
		}

		if (errors.validateResult(newContext, "AsnGetUserManagerSettingsResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnGetUserManagerSettingsResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnGetUserManagerSettingsResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetUserManagerSettingsResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "iSelectedUMMode", "number", errors, newContext);
		TSConverter.validateParam(s, "iUMSecurity", "number", errors, newContext);
		TSConverter.validateParam(s, "iUMSelfInstall", "number", errors, newContext);
		TSConverter.validateParam(s, "bAutoBindFirstLine", "boolean", errors, newContext);
		TSConverter.validateParam(s, "bAutoBindSecondLine", "boolean", errors, newContext);
		TSConverter.validateParam(s, "iPhoneNumberPreformatFormat", "number", errors, newContext);
		TSConverter.validateParam(s, "bLDAPBaseAttributeWriteBackEnabled", "boolean", errors, newContext);
		const _u8slistPresenceDomain = ENetUC_Common_Converter.UTF8StringList_Converter.toBER(s.u8slistPresenceDomain, errors, newContext, "u8slistPresenceDomain");
		const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toBER(s.optionalParams, errors, newContext, "optionalParams", true);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Integer({ value: s.iSelectedUMMode, name: "iSelectedUMMode" }));
			t.push(new asn1ts.Integer({ value: s.iUMSecurity, name: "iUMSecurity" }));
			t.push(new asn1ts.Integer({ value: s.iUMSelfInstall, name: "iUMSelfInstall" }));
			t.push(new asn1ts.Boolean({ value: s.bAutoBindFirstLine, name: "bAutoBindFirstLine" }));
			t.push(new asn1ts.Boolean({ value: s.bAutoBindSecondLine, name: "bAutoBindSecondLine" }));
			t.push(new asn1ts.Integer({ value: s.iPhoneNumberPreformatFormat, name: "iPhoneNumberPreformatFormat" }));
			t.push(new asn1ts.Boolean({ value: s.bLDAPBaseAttributeWriteBackEnabled, name: "bLDAPBaseAttributeWriteBackEnabled" }));
			if (_u8slistPresenceDomain)
				t.push(_u8slistPresenceDomain);
			if (_optionalParams)
				t.push(_optionalParams);
		}

		if (errors.validateResult(newContext, "AsnGetUserManagerSettingsResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetUserManagerSettingsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetUserManagerSettingsResult");

		let t: ENetUC_Admin.AsnGetUserManagerSettingsResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnGetUserManagerSettingsResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnGetUserManagerSettingsResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "iSelectedUMMode", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iUMSecurity", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iUMSelfInstall", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "bAutoBindFirstLine", "Boolean", errors, newContext);
			TSConverter.fillASN1Param(s, t, "bAutoBindSecondLine", "Boolean", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iPhoneNumberPreformatFormat", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "bLDAPBaseAttributeWriteBackEnabled", "Boolean", errors, newContext);
			const _u8slistpresencedomain = ENetUC_Common_Converter.UTF8StringList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "u8slistPresenceDomain"), errors, newContext, "u8slistPresenceDomain");
			if (_u8slistpresencedomain)
				t.u8slistPresenceDomain = _u8slistpresencedomain;
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "optionalParams"), errors, newContext, "optionalParams", true);
		}

		if (errors.validateResult(newContext, "AsnGetUserManagerSettingsResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminGetPhoneJournalSettingsArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetPhoneJournalSettingsArgument");

		const t = {} as ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminGetPhoneJournalSettingsArgument";

		if (errors.validateResult(newContext, "AsnAdminGetPhoneJournalSettingsArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetPhoneJournalSettingsArgument");

		let t: ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
		}

		if (errors.validateResult(newContext, "AsnAdminGetPhoneJournalSettingsArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminGetPhoneJournalSettingsArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetPhoneJournalSettingsArgument");

		// [Print_BER_EncoderSeqDefCode]

		if (errors.validateResult(newContext, "AsnAdminGetPhoneJournalSettingsArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetPhoneJournalSettingsArgument");

		let t: ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
		}

		if (errors.validateResult(newContext, "AsnAdminGetPhoneJournalSettingsArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminGetPhoneJournalSettingsResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetPhoneJournalSettingsResult");

		const t = {} as ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminGetPhoneJournalSettingsResult";
		TSConverter.fillJSONParam(s, t, "iUnansweredCallJournalOption", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iAnsweredRedirectedCallJournalOption", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "bAutoMarkReadGroupCallsOnCallback", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminGetPhoneJournalSettingsResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetPhoneJournalSettingsResult");

		let t: ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "iUnansweredCallJournalOption", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iAnsweredRedirectedCallJournalOption", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "bAutoMarkReadGroupCallsOnCallback", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminGetPhoneJournalSettingsResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminGetPhoneJournalSettingsResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetPhoneJournalSettingsResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "iUnansweredCallJournalOption", "number", errors, newContext);
		TSConverter.validateParam(s, "iAnsweredRedirectedCallJournalOption", "number", errors, newContext);
		TSConverter.validateParam(s, "bAutoMarkReadGroupCallsOnCallback", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Integer({ value: s.iUnansweredCallJournalOption, name: "iUnansweredCallJournalOption" }));
			t.push(new asn1ts.Integer({ value: s.iAnsweredRedirectedCallJournalOption, name: "iAnsweredRedirectedCallJournalOption" }));
			t.push(new asn1ts.Boolean({ value: s.bAutoMarkReadGroupCallsOnCallback, name: "bAutoMarkReadGroupCallsOnCallback" }));
		}

		if (errors.validateResult(newContext, "AsnAdminGetPhoneJournalSettingsResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetPhoneJournalSettingsResult");

		let t: ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "iUnansweredCallJournalOption", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iAnsweredRedirectedCallJournalOption", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "bAutoMarkReadGroupCallsOnCallback", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminGetPhoneJournalSettingsResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetAnonymousUserAccessTokenArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetAnonymousUserAccessTokenArgument");

		const t = {} as ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetAnonymousUserAccessTokenArgument";
		TSConverter.fillJSONParam(s, t, "u8sAnonymousHintData", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sAnonymousNewAccessToken", "string", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserAccessTokenArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetAnonymousUserAccessTokenArgument");

		let t: ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sAnonymousHintData", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sAnonymousNewAccessToken", "string", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserAccessTokenArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetAnonymousUserAccessTokenArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetAnonymousUserAccessTokenArgument");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sAnonymousHintData", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sAnonymousNewAccessToken", "string", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sAnonymousHintData, name: "u8sAnonymousHintData" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sAnonymousNewAccessToken, name: "u8sAnonymousNewAccessToken" }));
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserAccessTokenArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetAnonymousUserAccessTokenArgument");

		let t: ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sAnonymousHintData", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sAnonymousNewAccessToken", "Utf8String", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserAccessTokenArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetAnonymousUserAccessTokenResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetAnonymousUserAccessTokenResult");

		const t = {} as ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetAnonymousUserAccessTokenResult";
		TSConverter.fillJSONParam(s, t, "success", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserAccessTokenResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetAnonymousUserAccessTokenResult");

		let t: ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "success", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserAccessTokenResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetAnonymousUserAccessTokenResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetAnonymousUserAccessTokenResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "success", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.success, name: "success" }));
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserAccessTokenResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetAnonymousUserAccessTokenResult");

		let t: ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "success", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserAccessTokenResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetAnonymousUserContactDataArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetAnonymousUserContactDataArgument");

		const t = {} as ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetAnonymousUserContactDataArgument";
		const _contactData = ENetUC_Common_Converter.AsnNetDatabaseContact_Converter.toJSON(s.contactData, errors, newContext, "contactData");
		if (_contactData)
			t.contactData = _contactData;

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserContactDataArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetAnonymousUserContactDataArgument");

		let t: ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _contactdata = ENetUC_Common_Converter.AsnNetDatabaseContact_Converter.fromJSON(s.contactData, errors, newContext, "contactData", false);
			if (_contactdata)
				t.contactData = _contactdata;
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserContactDataArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetAnonymousUserContactDataArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetAnonymousUserContactDataArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _contactData = ENetUC_Common_Converter.AsnNetDatabaseContact_Converter.toBER(s.contactData, errors, newContext, "contactData");
		if (!errors.hasNewErrors()) {
			if (_contactData)
				t.push(_contactData);
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserContactDataArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetAnonymousUserContactDataArgument");

		let t: ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _contactdata = ENetUC_Common_Converter.AsnNetDatabaseContact_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "contactData"), errors, newContext, "contactData");
			if (_contactdata)
				t.contactData = _contactdata;
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserContactDataArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetAnonymousUserContactDataResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetAnonymousUserContactDataResult");

		const t = {} as ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetAnonymousUserContactDataResult";
		TSConverter.fillJSONParam(s, t, "success", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserContactDataResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetAnonymousUserContactDataResult");

		let t: ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "success", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserContactDataResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetAnonymousUserContactDataResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetAnonymousUserContactDataResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "success", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.success, name: "success" }));
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserContactDataResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetAnonymousUserContactDataResult");

		let t: ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "success", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminSetAnonymousUserContactDataResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminRemoveAnonymousUserArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveAnonymousUserArgument");

		const t = {} as ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminRemoveAnonymousUserArgument";
		TSConverter.fillJSONParam(s, t, "u8sAnonymousHintData", "string", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminRemoveAnonymousUserArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveAnonymousUserArgument");

		let t: ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sAnonymousHintData", "string", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveAnonymousUserArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminRemoveAnonymousUserArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveAnonymousUserArgument");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sAnonymousHintData", "string", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sAnonymousHintData, name: "u8sAnonymousHintData" }));
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveAnonymousUserArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveAnonymousUserArgument");

		let t: ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sAnonymousHintData", "Utf8String", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveAnonymousUserArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminRemoveAnonymousUserResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminRemoveAnonymousUserResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminRemoveAnonymousUserResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveAnonymousUserResult");

		const t = {} as ENetUC_Admin.AsnAdminRemoveAnonymousUserResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminRemoveAnonymousUserResult";
		TSConverter.fillJSONParam(s, t, "success", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminRemoveAnonymousUserResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveAnonymousUserResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveAnonymousUserResult");

		let t: ENetUC_Admin.AsnAdminRemoveAnonymousUserResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminRemoveAnonymousUserResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminRemoveAnonymousUserResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "success", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveAnonymousUserResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminRemoveAnonymousUserResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminRemoveAnonymousUserResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveAnonymousUserResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "success", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.success, name: "success" }));
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveAnonymousUserResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveAnonymousUserResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveAnonymousUserResult");

		let t: ENetUC_Admin.AsnAdminRemoveAnonymousUserResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminRemoveAnonymousUserResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminRemoveAnonymousUserResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "success", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveAnonymousUserResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminLoginArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminLoginArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminLoginArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminLoginArgument");

		const t = {} as ENetUC_Admin.AsnAdminLoginArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminLoginArgument";
		TSConverter.fillJSONParam(s, t, "u8sAdminUsername", "string", errors, newContext);
		const _adminPassword = AsnAdminLoginArgumentChoice_Converter.toJSON(s.adminPassword, errors, newContext, "adminPassword");
		if (_adminPassword)
			t.adminPassword = _adminPassword;

		if (errors.validateResult(newContext, "AsnAdminLoginArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminLoginArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminLoginArgument");

		let t: ENetUC_Admin.AsnAdminLoginArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminLoginArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminLoginArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sAdminUsername", "string", errors, newContext, false);
			const _adminpassword = AsnAdminLoginArgumentChoice_Converter.fromJSON(s.adminPassword, errors, newContext, "adminPassword", false);
			if (_adminpassword)
				t.adminPassword = _adminpassword;
		}

		if (errors.validateResult(newContext, "AsnAdminLoginArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminLoginArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminLoginArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminLoginArgument");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sAdminUsername", "string", errors, newContext);
		const _adminPassword = AsnAdminLoginArgumentChoice_Converter.toBER(s.adminPassword, errors, newContext, "adminPassword");
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sAdminUsername, name: "u8sAdminUsername" }));
			if (_adminPassword)
				t.push(_adminPassword);
		}

		if (errors.validateResult(newContext, "AsnAdminLoginArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminLoginArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminLoginArgument");

		let t: ENetUC_Admin.AsnAdminLoginArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminLoginArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminLoginArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sAdminUsername", "Utf8String", errors, newContext);
			const _adminpassword = AsnAdminLoginArgumentChoice_Converter.fromBER(s.getValueByName("adminPassword"), errors, newContext, "adminPassword");
			if (_adminpassword)
				t.adminPassword = _adminpassword;
		}

		if (errors.validateResult(newContext, "AsnAdminLoginArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminLoginResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminLoginResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminLoginResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminLoginResult");

		const t = {} as ENetUC_Admin.AsnAdminLoginResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminLoginResult";
		TSConverter.fillJSONParam(s, t, "result", "number", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminLoginResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminLoginResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminLoginResult");

		let t: ENetUC_Admin.AsnAdminLoginResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminLoginResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminLoginResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "result", "number", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminLoginResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminLoginResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminLoginResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminLoginResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "result", "number", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Enumerated({ value: s.result, name: "result" }));
		}

		if (errors.validateResult(newContext, "AsnAdminLoginResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminLoginResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminLoginResult");

		let t: ENetUC_Admin.AsnAdminLoginResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminLoginResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminLoginResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "result", "Enumerated", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminLoginResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnUserMonitorLineList_Converter {
	public static toJSON(s: ENetUC_Admin.AsnUserMonitorLineList, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnUserMonitorLineList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUserMonitorLineList");

		const t = [] as ENetUC_Admin.AsnUserMonitorLineList;

		// [Print_JSON_EncoderSetOfDefCode]
		for (const id in s) {
			const se = s[id];
			if (se === undefined)
				continue;
			const val = AsnUserMonitorLine_Converter.toJSON(se, errors, newContext, "AsnUserMonitorLine");
			if (val)
				t.push(val);
		}

		if (errors.validateResult(newContext, "AsnUserMonitorLineList"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnUserMonitorLineList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUserMonitorLineList");

		let t: ENetUC_Admin.AsnUserMonitorLineList | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnUserMonitorLineList>(data, errors, newContext, optional);
		if (s) {
			t = new ENetUC_Admin.AsnUserMonitorLineList();
			// [Print_JSON_DecoderSetOfDefCode]
			for (const id in s) {
				const se = s[id];
				if (se === undefined)
					continue;
				const val = AsnUserMonitorLine_Converter.fromJSON(se, errors, newContext, "AsnUserMonitorLine", false);
				if (val)
					t.push(val);
			}
		}

		if (errors.validateResult(newContext, "AsnUserMonitorLineList"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnUserMonitorLineList | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnUserMonitorLineList";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUserMonitorLineList");

		// [Print_BER_EncoderSetOfDefCode]
		for (const id in s) {
			const val = AsnUserMonitorLine_Converter.toBER(s[id], errors, newContext, "AsnUserMonitorLine");
			if (val)
				t.push(val);
		}


		if (errors.validateResult(newContext, "AsnUserMonitorLineList"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnUserMonitorLineList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUserMonitorLineList");

		let t: ENetUC_Admin.AsnUserMonitorLineList | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnUserMonitorLineList.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = new ENetUC_Admin.AsnUserMonitorLineList();
			// [Print_BER_DecoderSetOfDefCode]
			for (const se of s.valueBlock.value) {
				if (asn1ts.Sequence.typeGuard(se)) {
					const val = AsnUserMonitorLine_Converter.fromBER(se, errors, newContext, "AsnUserMonitorLine", optional);
					if (val)
						t.push(val);
				} else
					errors.push(new ConverterError(ConverterErrorType.PROPERTY_TYPEMISMATCH, newContext.context, "wrong type"));
			}
		}

		if (errors.validateResult(newContext, "AsnUserMonitorLineList"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnUserProfile_Converter {
	public static toJSON(s: ENetUC_Admin.AsnUserProfile, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnUserProfile & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUserProfile");

		const t = {} as ENetUC_Admin.AsnUserProfile & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnUserProfile";
		TSConverter.fillJSONParam(s, t, "iEnabled", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sDNPath", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sUserName", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sSIPURI", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sobjectGUID", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sPhoneNumber", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sPhoneSecondary", "string", errors, newContext);
		const _userMonitorLineList = AsnUserMonitorLineList_Converter.toJSON(s.userMonitorLineList, errors, newContext, "userMonitorLineList");
		if (_userMonitorLineList)
			t.userMonitorLineList = _userMonitorLineList;
		TSConverter.fillJSONParam(s, t, "iMonitorLineRights", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sSAMAccountName", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sPassword", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sCallRecordingNumber", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sMailboxNumber", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sHomeServer", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iUserStaticRights", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iUserStaticRights2", "number", errors, newContext, true);
		const _userDynamicRights = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRightsList_Converter.toJSON(s.userDynamicRights, errors, newContext, "userDynamicRights");
		if (_userDynamicRights)
			t.userDynamicRights = _userDynamicRights;
		const _asnUserContact = ENetUC_Common_Converter.AsnNetDatabaseContact_Converter.toJSON(s.asnUserContact, errors, newContext, "asnUserContact");
		if (_asnUserContact)
			t.asnUserContact = _asnUserContact;
		const _asnUserPropertyBag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.toJSON(s.asnUserPropertyBag, errors, newContext, "asnUserPropertyBag");
		if (_asnUserPropertyBag)
			t.asnUserPropertyBag = _asnUserPropertyBag;
		if (s.optionalParams) {
			const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toJSON(s.optionalParams, errors, newContext, "optionalParams");
			if (_optionalParams)
				t.optionalParams = _optionalParams;
		}
		TSConverter.fillJSONParam(s, t, "bWritePicture", "boolean", errors, newContext, true);

		if (errors.validateResult(newContext, "AsnUserProfile"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnUserProfile | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUserProfile");

		let t: ENetUC_Admin.AsnUserProfile | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnUserProfile>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnUserProfile["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "iEnabled", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sDNPath", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sUserName", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sSIPURI", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sobjectGUID", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sPhoneNumber", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sPhoneSecondary", "string", errors, newContext, false);
			const _usermonitorlinelist = AsnUserMonitorLineList_Converter.fromJSON(s.userMonitorLineList, errors, newContext, "userMonitorLineList", false);
			if (_usermonitorlinelist)
				t.userMonitorLineList = _usermonitorlinelist;
			TSConverter.fillJSONParam(s, t, "iMonitorLineRights", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sSAMAccountName", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sPassword", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sCallRecordingNumber", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sMailboxNumber", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sHomeServer", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iUserStaticRights", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iUserStaticRights2", "number", errors, newContext, true);
			const _userdynamicrights = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRightsList_Converter.fromJSON(s.userDynamicRights, errors, newContext, "userDynamicRights", false);
			if (_userdynamicrights)
				t.userDynamicRights = _userdynamicrights;
			const _asnusercontact = ENetUC_Common_Converter.AsnNetDatabaseContact_Converter.fromJSON(s.asnUserContact, errors, newContext, "asnUserContact", false);
			if (_asnusercontact)
				t.asnUserContact = _asnusercontact;
			const _asnuserpropertybag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.fromJSON(s.asnUserPropertyBag, errors, newContext, "asnUserPropertyBag", false);
			if (_asnuserpropertybag)
				t.asnUserPropertyBag = _asnuserpropertybag;
			const _optionalparams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromJSON(s.optionalParams, errors, newContext, "optionalParams", true);
			if (_optionalparams)
				t.optionalParams = _optionalparams;
			TSConverter.fillJSONParam(s, t, "bWritePicture", "boolean", errors, newContext, true);
		}

		if (errors.validateResult(newContext, "AsnUserProfile"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnUserProfile | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnUserProfile";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUserProfile");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "iEnabled", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sDNPath", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sUserName", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sSIPURI", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sobjectGUID", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sPhoneNumber", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sPhoneSecondary", "string", errors, newContext);
		const _userMonitorLineList = AsnUserMonitorLineList_Converter.toBER(s.userMonitorLineList, errors, newContext, "userMonitorLineList");
		TSConverter.validateParam(s, "iMonitorLineRights", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sSAMAccountName", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sPassword", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sCallRecordingNumber", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sMailboxNumber", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sHomeServer", "string", errors, newContext);
		TSConverter.validateParam(s, "iUserStaticRights", "number", errors, newContext);
		TSConverter.validateParam(s, "iUserStaticRights2", "number", errors, newContext, true);
		const _userDynamicRights = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRightsList_Converter.toBER(s.userDynamicRights, errors, newContext, "userDynamicRights");
		const _asnUserContact = ENetUC_Common_Converter.AsnNetDatabaseContact_Converter.toBER(s.asnUserContact, errors, newContext, "asnUserContact");
		const _asnUserPropertyBag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.toBER(s.asnUserPropertyBag, errors, newContext, "asnUserPropertyBag");
		const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toBER(s.optionalParams, errors, newContext, "optionalParams", true);
		TSConverter.validateParam(s, "bWritePicture", "boolean", errors, newContext, true);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Integer({ value: s.iEnabled, name: "iEnabled" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sDNPath, name: "u8sDNPath" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sUserName, name: "u8sUserName" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sSIPURI, name: "u8sSIPURI" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sobjectGUID, name: "u8sobjectGUID" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sPhoneNumber, name: "u8sPhoneNumber" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sPhoneSecondary, name: "u8sPhoneSecondary" }));
			if (_userMonitorLineList)
				t.push(_userMonitorLineList);
			t.push(new asn1ts.Integer({ value: s.iMonitorLineRights, name: "iMonitorLineRights" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sSAMAccountName, name: "u8sSAMAccountName" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sPassword, name: "u8sPassword" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sCallRecordingNumber, name: "u8sCallRecordingNumber" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sMailboxNumber, name: "u8sMailboxNumber" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sHomeServer, name: "u8sHomeServer" }));
			t.push(new asn1ts.Integer({ value: s.iUserStaticRights, name: "iUserStaticRights" }));
			if (s.iUserStaticRights2 !== undefined)
				t.push(new asn1ts.Integer({ value: s.iUserStaticRights2, name: "iUserStaticRights2", idBlock: { optionalID: 0 } }));
			if (_userDynamicRights)
				t.push(_userDynamicRights);
			if (_asnUserContact)
				t.push(_asnUserContact);
			if (_asnUserPropertyBag)
				t.push(_asnUserPropertyBag);
			if (_optionalParams)
				t.push(_optionalParams);
			if (s.bWritePicture !== undefined)
				t.push(new asn1ts.Boolean({ value: s.bWritePicture, name: "bWritePicture", idBlock: { optionalID: 1 } }));
		}

		if (errors.validateResult(newContext, "AsnUserProfile"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnUserProfile | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUserProfile");

		let t: ENetUC_Admin.AsnUserProfile | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnUserProfile.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnUserProfile["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "iEnabled", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sDNPath", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sUserName", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sSIPURI", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sobjectGUID", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sPhoneNumber", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sPhoneSecondary", "Utf8String", errors, newContext);
			const _usermonitorlinelist = AsnUserMonitorLineList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "userMonitorLineList"), errors, newContext, "userMonitorLineList");
			if (_usermonitorlinelist)
				t.userMonitorLineList = _usermonitorlinelist;
			TSConverter.fillASN1Param(s, t, "iMonitorLineRights", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sSAMAccountName", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sPassword", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sCallRecordingNumber", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sMailboxNumber", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sHomeServer", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iUserStaticRights", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iUserStaticRights2", "Integer", errors, newContext, true);
			const _userdynamicrights = ENetUC_Common_AsnContact_Converter.AsnUserDynamicRightsList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "userDynamicRights"), errors, newContext, "userDynamicRights");
			if (_userdynamicrights)
				t.userDynamicRights = _userdynamicrights;
			const _asnusercontact = ENetUC_Common_Converter.AsnNetDatabaseContact_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "asnUserContact"), errors, newContext, "asnUserContact");
			if (_asnusercontact)
				t.asnUserContact = _asnusercontact;
			const _asnuserpropertybag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "asnUserPropertyBag"), errors, newContext, "asnUserPropertyBag");
			if (_asnuserpropertybag)
				t.asnUserPropertyBag = _asnuserpropertybag;
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "optionalParams"), errors, newContext, "optionalParams", true);
			TSConverter.fillASN1Param(s, t, "bWritePicture", "Boolean", errors, newContext, true);
		}

		if (errors.validateResult(newContext, "AsnUserProfile"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnUserProfileList_Converter {
	public static toJSON(s: ENetUC_Admin.AsnUserProfileList, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnUserProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUserProfileList");

		const t = [] as ENetUC_Admin.AsnUserProfileList;

		// [Print_JSON_EncoderSetOfDefCode]
		for (const id in s) {
			const se = s[id];
			if (se === undefined)
				continue;
			const val = AsnUserProfile_Converter.toJSON(se, errors, newContext, "AsnUserProfile");
			if (val)
				t.push(val);
		}

		if (errors.validateResult(newContext, "AsnUserProfileList"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnUserProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUserProfileList");

		let t: ENetUC_Admin.AsnUserProfileList | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnUserProfileList>(data, errors, newContext, optional);
		if (s) {
			t = new ENetUC_Admin.AsnUserProfileList();
			// [Print_JSON_DecoderSetOfDefCode]
			for (const id in s) {
				const se = s[id];
				if (se === undefined)
					continue;
				const val = AsnUserProfile_Converter.fromJSON(se, errors, newContext, "AsnUserProfile", false);
				if (val)
					t.push(val);
			}
		}

		if (errors.validateResult(newContext, "AsnUserProfileList"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnUserProfileList | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnUserProfileList";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUserProfileList");

		// [Print_BER_EncoderSetOfDefCode]
		for (const id in s) {
			const val = AsnUserProfile_Converter.toBER(s[id], errors, newContext, "AsnUserProfile");
			if (val)
				t.push(val);
		}


		if (errors.validateResult(newContext, "AsnUserProfileList"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnUserProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUserProfileList");

		let t: ENetUC_Admin.AsnUserProfileList | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnUserProfileList.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = new ENetUC_Admin.AsnUserProfileList();
			// [Print_BER_DecoderSetOfDefCode]
			for (const se of s.valueBlock.value) {
				if (asn1ts.Sequence.typeGuard(se)) {
					const val = AsnUserProfile_Converter.fromBER(se, errors, newContext, "AsnUserProfile", optional);
					if (val)
						t.push(val);
				} else
					errors.push(new ConverterError(ConverterErrorType.PROPERTY_TYPEMISMATCH, newContext.context, "wrong type"));
			}
		}

		if (errors.validateResult(newContext, "AsnUserProfileList"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnSetUserProfilesErrorList_Converter {
	public static toJSON(s: ENetUC_Admin.AsnSetUserProfilesErrorList, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnSetUserProfilesErrorList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnSetUserProfilesErrorList");

		const t = [] as ENetUC_Admin.AsnSetUserProfilesErrorList;

		// [Print_JSON_EncoderSetOfDefCode]
		for (const id in s) {
			const se = s[id];
			if (se === undefined)
				continue;
			const val = AsnSetUserProfilesErrorListItem_Converter.toJSON(se, errors, newContext, "AsnSetUserProfilesErrorListItem");
			if (val)
				t.push(val);
		}

		if (errors.validateResult(newContext, "AsnSetUserProfilesErrorList"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnSetUserProfilesErrorList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnSetUserProfilesErrorList");

		let t: ENetUC_Admin.AsnSetUserProfilesErrorList | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnSetUserProfilesErrorList>(data, errors, newContext, optional);
		if (s) {
			t = new ENetUC_Admin.AsnSetUserProfilesErrorList();
			// [Print_JSON_DecoderSetOfDefCode]
			for (const id in s) {
				const se = s[id];
				if (se === undefined)
					continue;
				const val = AsnSetUserProfilesErrorListItem_Converter.fromJSON(se, errors, newContext, "AsnSetUserProfilesErrorListItem", false);
				if (val)
					t.push(val);
			}
		}

		if (errors.validateResult(newContext, "AsnSetUserProfilesErrorList"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnSetUserProfilesErrorList | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnSetUserProfilesErrorList";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnSetUserProfilesErrorList");

		// [Print_BER_EncoderSetOfDefCode]
		for (const id in s) {
			const val = AsnSetUserProfilesErrorListItem_Converter.toBER(s[id], errors, newContext, "AsnSetUserProfilesErrorListItem");
			if (val)
				t.push(val);
		}


		if (errors.validateResult(newContext, "AsnSetUserProfilesErrorList"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnSetUserProfilesErrorList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnSetUserProfilesErrorList");

		let t: ENetUC_Admin.AsnSetUserProfilesErrorList | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnSetUserProfilesErrorList.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = new ENetUC_Admin.AsnSetUserProfilesErrorList();
			// [Print_BER_DecoderSetOfDefCode]
			for (const se of s.valueBlock.value) {
				if (asn1ts.Sequence.typeGuard(se)) {
					const val = AsnSetUserProfilesErrorListItem_Converter.fromBER(se, errors, newContext, "AsnSetUserProfilesErrorListItem", optional);
					if (val)
						t.push(val);
				} else
					errors.push(new ConverterError(ConverterErrorType.PROPERTY_TYPEMISMATCH, newContext.context, "wrong type"));
			}
		}

		if (errors.validateResult(newContext, "AsnSetUserProfilesErrorList"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminGetUserProfileArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminGetUserProfileArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminGetUserProfileArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetUserProfileArgument");

		const t = {} as ENetUC_Admin.AsnAdminGetUserProfileArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminGetUserProfileArgument";
		const _identifier = AsnAdminGetUserProfileArgumentChoice_Converter.toJSON(s.identifier, errors, newContext, "identifier");
		if (_identifier)
			t.identifier = _identifier;

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetUserProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetUserProfileArgument");

		let t: ENetUC_Admin.AsnAdminGetUserProfileArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminGetUserProfileArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminGetUserProfileArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _identifier = AsnAdminGetUserProfileArgumentChoice_Converter.fromJSON(s.identifier, errors, newContext, "identifier", false);
			if (_identifier)
				t.identifier = _identifier;
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminGetUserProfileArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminGetUserProfileArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetUserProfileArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _identifier = AsnAdminGetUserProfileArgumentChoice_Converter.toBER(s.identifier, errors, newContext, "identifier");
		if (!errors.hasNewErrors()) {
			if (_identifier)
				t.push(_identifier);
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetUserProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetUserProfileArgument");

		let t: ENetUC_Admin.AsnAdminGetUserProfileArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminGetUserProfileArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminGetUserProfileArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _identifier = AsnAdminGetUserProfileArgumentChoice_Converter.fromBER(s.getValueByName("identifier"), errors, newContext, "identifier");
			if (_identifier)
				t.identifier = _identifier;
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminGetUserProfileResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminGetUserProfileResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminGetUserProfileResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetUserProfileResult");

		const t = {} as ENetUC_Admin.AsnAdminGetUserProfileResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminGetUserProfileResult";
		const _userProfile = AsnUserProfile_Converter.toJSON(s.userProfile, errors, newContext, "userProfile");
		if (_userProfile)
			t.userProfile = _userProfile;

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetUserProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetUserProfileResult");

		let t: ENetUC_Admin.AsnAdminGetUserProfileResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminGetUserProfileResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminGetUserProfileResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _userprofile = AsnUserProfile_Converter.fromJSON(s.userProfile, errors, newContext, "userProfile", false);
			if (_userprofile)
				t.userProfile = _userprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminGetUserProfileResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminGetUserProfileResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetUserProfileResult");

		// [Print_BER_EncoderSeqDefCode]
		const _userProfile = AsnUserProfile_Converter.toBER(s.userProfile, errors, newContext, "userProfile");
		if (!errors.hasNewErrors()) {
			if (_userProfile)
				t.push(_userProfile);
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetUserProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetUserProfileResult");

		let t: ENetUC_Admin.AsnAdminGetUserProfileResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminGetUserProfileResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminGetUserProfileResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _userprofile = AsnUserProfile_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "userProfile"), errors, newContext, "userProfile");
			if (_userprofile)
				t.userProfile = _userprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfileResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminGetUserProfilesResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminGetUserProfilesResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminGetUserProfilesResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetUserProfilesResult");

		const t = {} as ENetUC_Admin.AsnAdminGetUserProfilesResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminGetUserProfilesResult";
		const _userProfiles = AsnUserProfileList_Converter.toJSON(s.userProfiles, errors, newContext, "userProfiles");
		if (_userProfiles)
			t.userProfiles = _userProfiles;

		if (errors.validateResult(newContext, "AsnAdminGetUserProfilesResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetUserProfilesResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetUserProfilesResult");

		let t: ENetUC_Admin.AsnAdminGetUserProfilesResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminGetUserProfilesResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminGetUserProfilesResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _userprofiles = AsnUserProfileList_Converter.fromJSON(s.userProfiles, errors, newContext, "userProfiles", false);
			if (_userprofiles)
				t.userProfiles = _userprofiles;
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfilesResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminGetUserProfilesResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminGetUserProfilesResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetUserProfilesResult");

		// [Print_BER_EncoderSeqDefCode]
		const _userProfiles = AsnUserProfileList_Converter.toBER(s.userProfiles, errors, newContext, "userProfiles");
		if (!errors.hasNewErrors()) {
			if (_userProfiles)
				t.push(_userProfiles);
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfilesResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetUserProfilesResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetUserProfilesResult");

		let t: ENetUC_Admin.AsnAdminGetUserProfilesResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminGetUserProfilesResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminGetUserProfilesResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _userprofiles = AsnUserProfileList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "userProfiles"), errors, newContext, "userProfiles");
			if (_userprofiles)
				t.userProfiles = _userprofiles;
		}

		if (errors.validateResult(newContext, "AsnAdminGetUserProfilesResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetUserProfileArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetUserProfileArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetUserProfileArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetUserProfileArgument");

		const t = {} as ENetUC_Admin.AsnAdminSetUserProfileArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetUserProfileArgument";
		const _userProfile = AsnUserProfile_Converter.toJSON(s.userProfile, errors, newContext, "userProfile");
		if (_userProfile)
			t.userProfile = _userProfile;
		if (s.optionalParams) {
			const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toJSON(s.optionalParams, errors, newContext, "optionalParams");
			if (_optionalParams)
				t.optionalParams = _optionalParams;
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfileArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetUserProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetUserProfileArgument");

		let t: ENetUC_Admin.AsnAdminSetUserProfileArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetUserProfileArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetUserProfileArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _userprofile = AsnUserProfile_Converter.fromJSON(s.userProfile, errors, newContext, "userProfile", false);
			if (_userprofile)
				t.userProfile = _userprofile;
			const _optionalparams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromJSON(s.optionalParams, errors, newContext, "optionalParams", true);
			if (_optionalparams)
				t.optionalParams = _optionalparams;
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfileArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetUserProfileArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetUserProfileArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetUserProfileArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _userProfile = AsnUserProfile_Converter.toBER(s.userProfile, errors, newContext, "userProfile");
		const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toBER(s.optionalParams, errors, newContext, "optionalParams", true);
		if (!errors.hasNewErrors()) {
			if (_userProfile)
				t.push(_userProfile);
			if (_optionalParams)
				t.push(_optionalParams);
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfileArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetUserProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetUserProfileArgument");

		let t: ENetUC_Admin.AsnAdminSetUserProfileArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetUserProfileArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetUserProfileArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _userprofile = AsnUserProfile_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "userProfile"), errors, newContext, "userProfile");
			if (_userprofile)
				t.userProfile = _userprofile;
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "optionalParams"), errors, newContext, "optionalParams", true);
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfileArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminRemoveUserProfileArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminRemoveUserProfileArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminRemoveUserProfileArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveUserProfileArgument");

		const t = {} as ENetUC_Admin.AsnAdminRemoveUserProfileArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminRemoveUserProfileArgument";
		const _userProfile = AsnUserProfile_Converter.toJSON(s.userProfile, errors, newContext, "userProfile");
		if (_userProfile)
			t.userProfile = _userProfile;

		if (errors.validateResult(newContext, "AsnAdminRemoveUserProfileArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveUserProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveUserProfileArgument");

		let t: ENetUC_Admin.AsnAdminRemoveUserProfileArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminRemoveUserProfileArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminRemoveUserProfileArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _userprofile = AsnUserProfile_Converter.fromJSON(s.userProfile, errors, newContext, "userProfile", false);
			if (_userprofile)
				t.userProfile = _userprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveUserProfileArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminRemoveUserProfileArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminRemoveUserProfileArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveUserProfileArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _userProfile = AsnUserProfile_Converter.toBER(s.userProfile, errors, newContext, "userProfile");
		if (!errors.hasNewErrors()) {
			if (_userProfile)
				t.push(_userProfile);
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveUserProfileArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveUserProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveUserProfileArgument");

		let t: ENetUC_Admin.AsnAdminRemoveUserProfileArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminRemoveUserProfileArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminRemoveUserProfileArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _userprofile = AsnUserProfile_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "userProfile"), errors, newContext, "userProfile");
			if (_userprofile)
				t.userProfile = _userprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveUserProfileArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminAddUserProfileArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminAddUserProfileArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminAddUserProfileArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddUserProfileArgument");

		const t = {} as ENetUC_Admin.AsnAdminAddUserProfileArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminAddUserProfileArgument";
		const _userProfile = AsnUserProfile_Converter.toJSON(s.userProfile, errors, newContext, "userProfile");
		if (_userProfile)
			t.userProfile = _userProfile;

		if (errors.validateResult(newContext, "AsnAdminAddUserProfileArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddUserProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddUserProfileArgument");

		let t: ENetUC_Admin.AsnAdminAddUserProfileArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminAddUserProfileArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminAddUserProfileArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _userprofile = AsnUserProfile_Converter.fromJSON(s.userProfile, errors, newContext, "userProfile", false);
			if (_userprofile)
				t.userProfile = _userprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminAddUserProfileArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminAddUserProfileArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminAddUserProfileArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddUserProfileArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _userProfile = AsnUserProfile_Converter.toBER(s.userProfile, errors, newContext, "userProfile");
		if (!errors.hasNewErrors()) {
			if (_userProfile)
				t.push(_userProfile);
		}

		if (errors.validateResult(newContext, "AsnAdminAddUserProfileArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddUserProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddUserProfileArgument");

		let t: ENetUC_Admin.AsnAdminAddUserProfileArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminAddUserProfileArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminAddUserProfileArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _userprofile = AsnUserProfile_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "userProfile"), errors, newContext, "userProfile");
			if (_userprofile)
				t.userProfile = _userprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminAddUserProfileArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnComputerProfile_Converter {
	public static toJSON(s: ENetUC_Admin.AsnComputerProfile, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnComputerProfile & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnComputerProfile");

		const t = {} as ENetUC_Admin.AsnComputerProfile & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnComputerProfile";
		TSConverter.fillJSONParam(s, t, "iEnabled", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sDNPath", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sComputerLogin", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sComputerPassword", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sobjectGUID", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sPhoneNumber", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sPhoneSecondary", "string", errors, newContext);
		const _userMonitorLineList = AsnUserMonitorLineList_Converter.toJSON(s.userMonitorLineList, errors, newContext, "userMonitorLineList");
		if (_userMonitorLineList)
			t.userMonitorLineList = _userMonitorLineList;
		TSConverter.fillJSONParam(s, t, "iMonitorLineRights", "number", errors, newContext);
		const _asnUserPropertyBag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.toJSON(s.asnUserPropertyBag, errors, newContext, "asnUserPropertyBag");
		if (_asnUserPropertyBag)
			t.asnUserPropertyBag = _asnUserPropertyBag;
		if (s.optionalParams) {
			const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toJSON(s.optionalParams, errors, newContext, "optionalParams");
			if (_optionalParams)
				t.optionalParams = _optionalParams;
		}

		if (errors.validateResult(newContext, "AsnComputerProfile"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnComputerProfile | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnComputerProfile");

		let t: ENetUC_Admin.AsnComputerProfile | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnComputerProfile>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnComputerProfile["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "iEnabled", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sDNPath", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sComputerLogin", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sComputerPassword", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sobjectGUID", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sPhoneNumber", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sPhoneSecondary", "string", errors, newContext, false);
			const _usermonitorlinelist = AsnUserMonitorLineList_Converter.fromJSON(s.userMonitorLineList, errors, newContext, "userMonitorLineList", false);
			if (_usermonitorlinelist)
				t.userMonitorLineList = _usermonitorlinelist;
			TSConverter.fillJSONParam(s, t, "iMonitorLineRights", "number", errors, newContext, false);
			const _asnuserpropertybag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.fromJSON(s.asnUserPropertyBag, errors, newContext, "asnUserPropertyBag", false);
			if (_asnuserpropertybag)
				t.asnUserPropertyBag = _asnuserpropertybag;
			const _optionalparams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromJSON(s.optionalParams, errors, newContext, "optionalParams", true);
			if (_optionalparams)
				t.optionalParams = _optionalparams;
		}

		if (errors.validateResult(newContext, "AsnComputerProfile"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnComputerProfile | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnComputerProfile";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnComputerProfile");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "iEnabled", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sDNPath", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sComputerLogin", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sComputerPassword", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sobjectGUID", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sPhoneNumber", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sPhoneSecondary", "string", errors, newContext);
		const _userMonitorLineList = AsnUserMonitorLineList_Converter.toBER(s.userMonitorLineList, errors, newContext, "userMonitorLineList");
		TSConverter.validateParam(s, "iMonitorLineRights", "number", errors, newContext);
		const _asnUserPropertyBag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.toBER(s.asnUserPropertyBag, errors, newContext, "asnUserPropertyBag");
		const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toBER(s.optionalParams, errors, newContext, "optionalParams", 0);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Integer({ value: s.iEnabled, name: "iEnabled" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sDNPath, name: "u8sDNPath" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sComputerLogin, name: "u8sComputerLogin" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sComputerPassword, name: "u8sComputerPassword" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sobjectGUID, name: "u8sobjectGUID" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sPhoneNumber, name: "u8sPhoneNumber" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sPhoneSecondary, name: "u8sPhoneSecondary" }));
			if (_userMonitorLineList)
				t.push(_userMonitorLineList);
			t.push(new asn1ts.Integer({ value: s.iMonitorLineRights, name: "iMonitorLineRights" }));
			if (_asnUserPropertyBag)
				t.push(_asnUserPropertyBag);
			if (_optionalParams)
				t.push(_optionalParams);
		}

		if (errors.validateResult(newContext, "AsnComputerProfile"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnComputerProfile | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnComputerProfile");

		let t: ENetUC_Admin.AsnComputerProfile | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnComputerProfile.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnComputerProfile["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "iEnabled", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sDNPath", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sComputerLogin", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sComputerPassword", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sobjectGUID", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sPhoneNumber", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sPhoneSecondary", "Utf8String", errors, newContext);
			const _usermonitorlinelist = AsnUserMonitorLineList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "userMonitorLineList"), errors, newContext, "userMonitorLineList");
			if (_usermonitorlinelist)
				t.userMonitorLineList = _usermonitorlinelist;
			TSConverter.fillASN1Param(s, t, "iMonitorLineRights", "Integer", errors, newContext);
			const _asnuserpropertybag = ENetUC_Common_Converter.AsnUserPropertyBag_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "asnUserPropertyBag"), errors, newContext, "asnUserPropertyBag");
			if (_asnuserpropertybag)
				t.asnUserPropertyBag = _asnuserpropertybag;
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "optionalParams"), errors, newContext, "optionalParams", true);
		}

		if (errors.validateResult(newContext, "AsnComputerProfile"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminGetComputerProfileResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminGetComputerProfileResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminGetComputerProfileResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetComputerProfileResult");

		const t = {} as ENetUC_Admin.AsnAdminGetComputerProfileResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminGetComputerProfileResult";
		const _computerProfile = AsnComputerProfile_Converter.toJSON(s.computerProfile, errors, newContext, "computerProfile");
		if (_computerProfile)
			t.computerProfile = _computerProfile;

		if (errors.validateResult(newContext, "AsnAdminGetComputerProfileResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetComputerProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetComputerProfileResult");

		let t: ENetUC_Admin.AsnAdminGetComputerProfileResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminGetComputerProfileResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminGetComputerProfileResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _computerprofile = AsnComputerProfile_Converter.fromJSON(s.computerProfile, errors, newContext, "computerProfile", false);
			if (_computerprofile)
				t.computerProfile = _computerprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminGetComputerProfileResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminGetComputerProfileResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminGetComputerProfileResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminGetComputerProfileResult");

		// [Print_BER_EncoderSeqDefCode]
		const _computerProfile = AsnComputerProfile_Converter.toBER(s.computerProfile, errors, newContext, "computerProfile");
		if (!errors.hasNewErrors()) {
			if (_computerProfile)
				t.push(_computerProfile);
		}

		if (errors.validateResult(newContext, "AsnAdminGetComputerProfileResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminGetComputerProfileResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminGetComputerProfileResult");

		let t: ENetUC_Admin.AsnAdminGetComputerProfileResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminGetComputerProfileResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminGetComputerProfileResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _computerprofile = AsnComputerProfile_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "computerProfile"), errors, newContext, "computerProfile");
			if (_computerprofile)
				t.computerProfile = _computerprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminGetComputerProfileResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetComputerProfileArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetComputerProfileArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetComputerProfileArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetComputerProfileArgument");

		const t = {} as ENetUC_Admin.AsnAdminSetComputerProfileArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetComputerProfileArgument";
		const _computerProfile = AsnComputerProfile_Converter.toJSON(s.computerProfile, errors, newContext, "computerProfile");
		if (_computerProfile)
			t.computerProfile = _computerProfile;

		if (errors.validateResult(newContext, "AsnAdminSetComputerProfileArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetComputerProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetComputerProfileArgument");

		let t: ENetUC_Admin.AsnAdminSetComputerProfileArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetComputerProfileArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetComputerProfileArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _computerprofile = AsnComputerProfile_Converter.fromJSON(s.computerProfile, errors, newContext, "computerProfile", false);
			if (_computerprofile)
				t.computerProfile = _computerprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminSetComputerProfileArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetComputerProfileArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetComputerProfileArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetComputerProfileArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _computerProfile = AsnComputerProfile_Converter.toBER(s.computerProfile, errors, newContext, "computerProfile");
		if (!errors.hasNewErrors()) {
			if (_computerProfile)
				t.push(_computerProfile);
		}

		if (errors.validateResult(newContext, "AsnAdminSetComputerProfileArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetComputerProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetComputerProfileArgument");

		let t: ENetUC_Admin.AsnAdminSetComputerProfileArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetComputerProfileArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetComputerProfileArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _computerprofile = AsnComputerProfile_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "computerProfile"), errors, newContext, "computerProfile");
			if (_computerprofile)
				t.computerProfile = _computerprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminSetComputerProfileArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminAddComputerProfileArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminAddComputerProfileArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminAddComputerProfileArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddComputerProfileArgument");

		const t = {} as ENetUC_Admin.AsnAdminAddComputerProfileArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminAddComputerProfileArgument";
		const _computerProfile = AsnComputerProfile_Converter.toJSON(s.computerProfile, errors, newContext, "computerProfile");
		if (_computerProfile)
			t.computerProfile = _computerProfile;

		if (errors.validateResult(newContext, "AsnAdminAddComputerProfileArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddComputerProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddComputerProfileArgument");

		let t: ENetUC_Admin.AsnAdminAddComputerProfileArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminAddComputerProfileArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminAddComputerProfileArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _computerprofile = AsnComputerProfile_Converter.fromJSON(s.computerProfile, errors, newContext, "computerProfile", false);
			if (_computerprofile)
				t.computerProfile = _computerprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminAddComputerProfileArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminAddComputerProfileArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminAddComputerProfileArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddComputerProfileArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _computerProfile = AsnComputerProfile_Converter.toBER(s.computerProfile, errors, newContext, "computerProfile");
		if (!errors.hasNewErrors()) {
			if (_computerProfile)
				t.push(_computerProfile);
		}

		if (errors.validateResult(newContext, "AsnAdminAddComputerProfileArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddComputerProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddComputerProfileArgument");

		let t: ENetUC_Admin.AsnAdminAddComputerProfileArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminAddComputerProfileArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminAddComputerProfileArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _computerprofile = AsnComputerProfile_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "computerProfile"), errors, newContext, "computerProfile");
			if (_computerprofile)
				t.computerProfile = _computerprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminAddComputerProfileArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminFindUserProfileList_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminFindUserProfileList, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminFindUserProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindUserProfileList");

		const t = [] as ENetUC_Admin.AsnAdminFindUserProfileList;

		// [Print_JSON_EncoderSetOfDefCode]
		for (const id in s) {
			const se = s[id];
			if (se === undefined)
				continue;
			const val = AsnAdminFindUserProfile_Converter.toJSON(se, errors, newContext, "AsnAdminFindUserProfile");
			if (val)
				t.push(val);
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserProfileList"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindUserProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindUserProfileList");

		let t: ENetUC_Admin.AsnAdminFindUserProfileList | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminFindUserProfileList>(data, errors, newContext, optional);
		if (s) {
			t = new ENetUC_Admin.AsnAdminFindUserProfileList();
			// [Print_JSON_DecoderSetOfDefCode]
			for (const id in s) {
				const se = s[id];
				if (se === undefined)
					continue;
				const val = AsnAdminFindUserProfile_Converter.fromJSON(se, errors, newContext, "AsnAdminFindUserProfile", false);
				if (val)
					t.push(val);
			}
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserProfileList"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminFindUserProfileList | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminFindUserProfileList";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindUserProfileList");

		// [Print_BER_EncoderSetOfDefCode]
		for (const id in s) {
			const val = AsnAdminFindUserProfile_Converter.toBER(s[id], errors, newContext, "AsnAdminFindUserProfile");
			if (val)
				t.push(val);
		}


		if (errors.validateResult(newContext, "AsnAdminFindUserProfileList"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindUserProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindUserProfileList");

		let t: ENetUC_Admin.AsnAdminFindUserProfileList | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminFindUserProfileList.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = new ENetUC_Admin.AsnAdminFindUserProfileList();
			// [Print_BER_DecoderSetOfDefCode]
			for (const se of s.valueBlock.value) {
				if (asn1ts.Sequence.typeGuard(se)) {
					const val = AsnAdminFindUserProfile_Converter.fromBER(se, errors, newContext, "AsnAdminFindUserProfile", optional);
					if (val)
						t.push(val);
				} else
					errors.push(new ConverterError(ConverterErrorType.PROPERTY_TYPEMISMATCH, newContext.context, "wrong type"));
			}
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserProfileList"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminFindUserArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminFindUserArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminFindUserArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindUserArgument");

		const t = {} as ENetUC_Admin.AsnAdminFindUserArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminFindUserArgument";
		const _find = AsnAdminFindUserArgumentChoice_Converter.toJSON(s.find, errors, newContext, "find");
		if (_find)
			t.find = _find;
		TSConverter.fillJSONParam(s, t, "iMaxResults", "number", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminFindUserArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindUserArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindUserArgument");

		let t: ENetUC_Admin.AsnAdminFindUserArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminFindUserArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminFindUserArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _find = AsnAdminFindUserArgumentChoice_Converter.fromJSON(s.find, errors, newContext, "find", false);
			if (_find)
				t.find = _find;
			TSConverter.fillJSONParam(s, t, "iMaxResults", "number", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminFindUserArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminFindUserArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindUserArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _find = AsnAdminFindUserArgumentChoice_Converter.toBER(s.find, errors, newContext, "find");
		TSConverter.validateParam(s, "iMaxResults", "number", errors, newContext);
		if (!errors.hasNewErrors()) {
			if (_find)
				t.push(_find);
			t.push(new asn1ts.Integer({ value: s.iMaxResults, name: "iMaxResults" }));
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindUserArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindUserArgument");

		let t: ENetUC_Admin.AsnAdminFindUserArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminFindUserArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminFindUserArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _find = AsnAdminFindUserArgumentChoice_Converter.fromBER(s.getValueByName("find"), errors, newContext, "find");
			if (_find)
				t.find = _find;
			TSConverter.fillASN1Param(s, t, "iMaxResults", "Integer", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminFindUserResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminFindUserResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminFindUserResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindUserResult");

		const t = {} as ENetUC_Admin.AsnAdminFindUserResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminFindUserResult";
		const _userlist = AsnAdminFindUserProfileList_Converter.toJSON(s.userlist, errors, newContext, "userlist");
		if (_userlist)
			t.userlist = _userlist;
		TSConverter.fillJSONParam(s, t, "iLimitReached", "number", errors, newContext);

		if (errors.validateResult(newContext, "AsnAdminFindUserResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindUserResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindUserResult");

		let t: ENetUC_Admin.AsnAdminFindUserResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminFindUserResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminFindUserResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _userlist = AsnAdminFindUserProfileList_Converter.fromJSON(s.userlist, errors, newContext, "userlist", false);
			if (_userlist)
				t.userlist = _userlist;
			TSConverter.fillJSONParam(s, t, "iLimitReached", "number", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminFindUserResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminFindUserResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindUserResult");

		// [Print_BER_EncoderSeqDefCode]
		const _userlist = AsnAdminFindUserProfileList_Converter.toBER(s.userlist, errors, newContext, "userlist");
		TSConverter.validateParam(s, "iLimitReached", "number", errors, newContext);
		if (!errors.hasNewErrors()) {
			if (_userlist)
				t.push(_userlist);
			t.push(new asn1ts.Integer({ value: s.iLimitReached, name: "iLimitReached" }));
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindUserResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindUserResult");

		let t: ENetUC_Admin.AsnAdminFindUserResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminFindUserResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminFindUserResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _userlist = AsnAdminFindUserProfileList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "userlist"), errors, newContext, "userlist");
			if (_userlist)
				t.userlist = _userlist;
			TSConverter.fillASN1Param(s, t, "iLimitReached", "Integer", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAdminFindUserResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnGroupProfileList_Converter {
	public static toJSON(s: ENetUC_Admin.AsnGroupProfileList, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnGroupProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGroupProfileList");

		const t = [] as ENetUC_Admin.AsnGroupProfileList;

		// [Print_JSON_EncoderSetOfDefCode]
		for (const id in s) {
			const se = s[id];
			if (se === undefined)
				continue;
			const val = AsnGroupProfile_Converter.toJSON(se, errors, newContext, "AsnGroupProfile");
			if (val)
				t.push(val);
		}

		if (errors.validateResult(newContext, "AsnGroupProfileList"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGroupProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGroupProfileList");

		let t: ENetUC_Admin.AsnGroupProfileList | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnGroupProfileList>(data, errors, newContext, optional);
		if (s) {
			t = new ENetUC_Admin.AsnGroupProfileList();
			// [Print_JSON_DecoderSetOfDefCode]
			for (const id in s) {
				const se = s[id];
				if (se === undefined)
					continue;
				const val = AsnGroupProfile_Converter.fromJSON(se, errors, newContext, "AsnGroupProfile", false);
				if (val)
					t.push(val);
			}
		}

		if (errors.validateResult(newContext, "AsnGroupProfileList"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnGroupProfileList | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnGroupProfileList";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGroupProfileList");

		// [Print_BER_EncoderSetOfDefCode]
		for (const id in s) {
			const val = AsnGroupProfile_Converter.toBER(s[id], errors, newContext, "AsnGroupProfile");
			if (val)
				t.push(val);
		}


		if (errors.validateResult(newContext, "AsnGroupProfileList"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGroupProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGroupProfileList");

		let t: ENetUC_Admin.AsnGroupProfileList | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnGroupProfileList.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = new ENetUC_Admin.AsnGroupProfileList();
			// [Print_BER_DecoderSetOfDefCode]
			for (const se of s.valueBlock.value) {
				if (asn1ts.Sequence.typeGuard(se)) {
					const val = AsnGroupProfile_Converter.fromBER(se, errors, newContext, "AsnGroupProfile", optional);
					if (val)
						t.push(val);
				} else
					errors.push(new ConverterError(ConverterErrorType.PROPERTY_TYPEMISMATCH, newContext.context, "wrong type"));
			}
		}

		if (errors.validateResult(newContext, "AsnGroupProfileList"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminFindGroupProfilesResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminFindGroupProfilesResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminFindGroupProfilesResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindGroupProfilesResult");

		const t = {} as ENetUC_Admin.AsnAdminFindGroupProfilesResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminFindGroupProfilesResult";
		const _listGroupProfiles = AsnGroupProfileList_Converter.toJSON(s.listGroupProfiles, errors, newContext, "listGroupProfiles");
		if (_listGroupProfiles)
			t.listGroupProfiles = _listGroupProfiles;

		if (errors.validateResult(newContext, "AsnAdminFindGroupProfilesResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindGroupProfilesResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindGroupProfilesResult");

		let t: ENetUC_Admin.AsnAdminFindGroupProfilesResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminFindGroupProfilesResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminFindGroupProfilesResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _listgroupprofiles = AsnGroupProfileList_Converter.fromJSON(s.listGroupProfiles, errors, newContext, "listGroupProfiles", false);
			if (_listgroupprofiles)
				t.listGroupProfiles = _listgroupprofiles;
		}

		if (errors.validateResult(newContext, "AsnAdminFindGroupProfilesResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminFindGroupProfilesResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminFindGroupProfilesResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminFindGroupProfilesResult");

		// [Print_BER_EncoderSeqDefCode]
		const _listGroupProfiles = AsnGroupProfileList_Converter.toBER(s.listGroupProfiles, errors, newContext, "listGroupProfiles");
		if (!errors.hasNewErrors()) {
			if (_listGroupProfiles)
				t.push(_listGroupProfiles);
		}

		if (errors.validateResult(newContext, "AsnAdminFindGroupProfilesResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminFindGroupProfilesResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminFindGroupProfilesResult");

		let t: ENetUC_Admin.AsnAdminFindGroupProfilesResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminFindGroupProfilesResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminFindGroupProfilesResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _listgroupprofiles = AsnGroupProfileList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "listGroupProfiles"), errors, newContext, "listGroupProfiles");
			if (_listgroupprofiles)
				t.listGroupProfiles = _listgroupprofiles;
		}

		if (errors.validateResult(newContext, "AsnAdminFindGroupProfilesResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetGroupProfileArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetGroupProfileArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetGroupProfileArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetGroupProfileArgument");

		const t = {} as ENetUC_Admin.AsnAdminSetGroupProfileArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetGroupProfileArgument";
		const _groupProfile = AsnGroupProfile_Converter.toJSON(s.groupProfile, errors, newContext, "groupProfile");
		if (_groupProfile)
			t.groupProfile = _groupProfile;

		if (errors.validateResult(newContext, "AsnAdminSetGroupProfileArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetGroupProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetGroupProfileArgument");

		let t: ENetUC_Admin.AsnAdminSetGroupProfileArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetGroupProfileArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetGroupProfileArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _groupprofile = AsnGroupProfile_Converter.fromJSON(s.groupProfile, errors, newContext, "groupProfile", false);
			if (_groupprofile)
				t.groupProfile = _groupprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminSetGroupProfileArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetGroupProfileArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetGroupProfileArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetGroupProfileArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _groupProfile = AsnGroupProfile_Converter.toBER(s.groupProfile, errors, newContext, "groupProfile");
		if (!errors.hasNewErrors()) {
			if (_groupProfile)
				t.push(_groupProfile);
		}

		if (errors.validateResult(newContext, "AsnAdminSetGroupProfileArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetGroupProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetGroupProfileArgument");

		let t: ENetUC_Admin.AsnAdminSetGroupProfileArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetGroupProfileArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetGroupProfileArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _groupprofile = AsnGroupProfile_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "groupProfile"), errors, newContext, "groupProfile");
			if (_groupprofile)
				t.groupProfile = _groupprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminSetGroupProfileArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminAddGroupProfileArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminAddGroupProfileArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminAddGroupProfileArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddGroupProfileArgument");

		const t = {} as ENetUC_Admin.AsnAdminAddGroupProfileArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminAddGroupProfileArgument";
		const _groupProfile = AsnGroupProfile_Converter.toJSON(s.groupProfile, errors, newContext, "groupProfile");
		if (_groupProfile)
			t.groupProfile = _groupProfile;

		if (errors.validateResult(newContext, "AsnAdminAddGroupProfileArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddGroupProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddGroupProfileArgument");

		let t: ENetUC_Admin.AsnAdminAddGroupProfileArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminAddGroupProfileArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminAddGroupProfileArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _groupprofile = AsnGroupProfile_Converter.fromJSON(s.groupProfile, errors, newContext, "groupProfile", false);
			if (_groupprofile)
				t.groupProfile = _groupprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminAddGroupProfileArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminAddGroupProfileArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminAddGroupProfileArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminAddGroupProfileArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _groupProfile = AsnGroupProfile_Converter.toBER(s.groupProfile, errors, newContext, "groupProfile");
		if (!errors.hasNewErrors()) {
			if (_groupProfile)
				t.push(_groupProfile);
		}

		if (errors.validateResult(newContext, "AsnAdminAddGroupProfileArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminAddGroupProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminAddGroupProfileArgument");

		let t: ENetUC_Admin.AsnAdminAddGroupProfileArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminAddGroupProfileArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminAddGroupProfileArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _groupprofile = AsnGroupProfile_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "groupProfile"), errors, newContext, "groupProfile");
			if (_groupprofile)
				t.groupProfile = _groupprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminAddGroupProfileArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminRemoveGroupProfileArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminRemoveGroupProfileArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminRemoveGroupProfileArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveGroupProfileArgument");

		const t = {} as ENetUC_Admin.AsnAdminRemoveGroupProfileArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminRemoveGroupProfileArgument";
		const _groupProfile = AsnGroupProfile_Converter.toJSON(s.groupProfile, errors, newContext, "groupProfile");
		if (_groupProfile)
			t.groupProfile = _groupProfile;

		if (errors.validateResult(newContext, "AsnAdminRemoveGroupProfileArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveGroupProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveGroupProfileArgument");

		let t: ENetUC_Admin.AsnAdminRemoveGroupProfileArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminRemoveGroupProfileArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminRemoveGroupProfileArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _groupprofile = AsnGroupProfile_Converter.fromJSON(s.groupProfile, errors, newContext, "groupProfile", false);
			if (_groupprofile)
				t.groupProfile = _groupprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveGroupProfileArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminRemoveGroupProfileArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminRemoveGroupProfileArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminRemoveGroupProfileArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _groupProfile = AsnGroupProfile_Converter.toBER(s.groupProfile, errors, newContext, "groupProfile");
		if (!errors.hasNewErrors()) {
			if (_groupProfile)
				t.push(_groupProfile);
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveGroupProfileArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminRemoveGroupProfileArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminRemoveGroupProfileArgument");

		let t: ENetUC_Admin.AsnAdminRemoveGroupProfileArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminRemoveGroupProfileArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminRemoveGroupProfileArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _groupprofile = AsnGroupProfile_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "groupProfile"), errors, newContext, "groupProfile");
			if (_groupprofile)
				t.groupProfile = _groupprofile;
		}

		if (errors.validateResult(newContext, "AsnAdminRemoveGroupProfileArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAvailableLineDetailsList_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAvailableLineDetailsList, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAvailableLineDetailsList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAvailableLineDetailsList");

		const t = [] as ENetUC_Admin.AsnAvailableLineDetailsList;

		// [Print_JSON_EncoderSetOfDefCode]
		for (const id in s) {
			const se = s[id];
			if (se === undefined)
				continue;
			const val = AsnAvailableLineDetails_Converter.toJSON(se, errors, newContext, "AsnAvailableLineDetails");
			if (val)
				t.push(val);
		}

		if (errors.validateResult(newContext, "AsnAvailableLineDetailsList"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAvailableLineDetailsList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAvailableLineDetailsList");

		let t: ENetUC_Admin.AsnAvailableLineDetailsList | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAvailableLineDetailsList>(data, errors, newContext, optional);
		if (s) {
			t = new ENetUC_Admin.AsnAvailableLineDetailsList();
			// [Print_JSON_DecoderSetOfDefCode]
			for (const id in s) {
				const se = s[id];
				if (se === undefined)
					continue;
				const val = AsnAvailableLineDetails_Converter.fromJSON(se, errors, newContext, "AsnAvailableLineDetails", false);
				if (val)
					t.push(val);
			}
		}

		if (errors.validateResult(newContext, "AsnAvailableLineDetailsList"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAvailableLineDetailsList | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAvailableLineDetailsList";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAvailableLineDetailsList");

		// [Print_BER_EncoderSetOfDefCode]
		for (const id in s) {
			const val = AsnAvailableLineDetails_Converter.toBER(s[id], errors, newContext, "AsnAvailableLineDetails");
			if (val)
				t.push(val);
		}


		if (errors.validateResult(newContext, "AsnAvailableLineDetailsList"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAvailableLineDetailsList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAvailableLineDetailsList");

		let t: ENetUC_Admin.AsnAvailableLineDetailsList | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAvailableLineDetailsList.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = new ENetUC_Admin.AsnAvailableLineDetailsList();
			// [Print_BER_DecoderSetOfDefCode]
			for (const se of s.valueBlock.value) {
				if (asn1ts.Sequence.typeGuard(se)) {
					const val = AsnAvailableLineDetails_Converter.fromBER(se, errors, newContext, "AsnAvailableLineDetails", optional);
					if (val)
						t.push(val);
				} else
					errors.push(new ConverterError(ConverterErrorType.PROPERTY_TYPEMISMATCH, newContext.context, "wrong type"));
			}
		}

		if (errors.validateResult(newContext, "AsnAvailableLineDetailsList"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnGetAvailableLinesResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnGetAvailableLinesResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnGetAvailableLinesResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetAvailableLinesResult");

		const t = {} as ENetUC_Admin.AsnGetAvailableLinesResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnGetAvailableLinesResult";
		const _linelist = AsnAvailableLineDetailsList_Converter.toJSON(s.linelist, errors, newContext, "linelist");
		if (_linelist)
			t.linelist = _linelist;

		if (errors.validateResult(newContext, "AsnGetAvailableLinesResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetAvailableLinesResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetAvailableLinesResult");

		let t: ENetUC_Admin.AsnGetAvailableLinesResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnGetAvailableLinesResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnGetAvailableLinesResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _linelist = AsnAvailableLineDetailsList_Converter.fromJSON(s.linelist, errors, newContext, "linelist", false);
			if (_linelist)
				t.linelist = _linelist;
		}

		if (errors.validateResult(newContext, "AsnGetAvailableLinesResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnGetAvailableLinesResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnGetAvailableLinesResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnGetAvailableLinesResult");

		// [Print_BER_EncoderSeqDefCode]
		const _linelist = AsnAvailableLineDetailsList_Converter.toBER(s.linelist, errors, newContext, "linelist");
		if (!errors.hasNewErrors()) {
			if (_linelist)
				t.push(_linelist);
		}

		if (errors.validateResult(newContext, "AsnGetAvailableLinesResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnGetAvailableLinesResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnGetAvailableLinesResult");

		let t: ENetUC_Admin.AsnGetAvailableLinesResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnGetAvailableLinesResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnGetAvailableLinesResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _linelist = AsnAvailableLineDetailsList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "linelist"), errors, newContext, "linelist");
			if (_linelist)
				t.linelist = _linelist;
		}

		if (errors.validateResult(newContext, "AsnGetAvailableLinesResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetUserProfilesListArgument_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetUserProfilesListArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetUserProfilesListArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetUserProfilesListArgument");

		const t = {} as ENetUC_Admin.AsnAdminSetUserProfilesListArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetUserProfilesListArgument";
		const _userProfiles = AsnUserProfileList_Converter.toJSON(s.userProfiles, errors, newContext, "userProfiles");
		if (_userProfiles)
			t.userProfiles = _userProfiles;

		if (errors.validateResult(newContext, "AsnAdminSetUserProfilesListArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetUserProfilesListArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetUserProfilesListArgument");

		let t: ENetUC_Admin.AsnAdminSetUserProfilesListArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetUserProfilesListArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetUserProfilesListArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _userprofiles = AsnUserProfileList_Converter.fromJSON(s.userProfiles, errors, newContext, "userProfiles", false);
			if (_userprofiles)
				t.userProfiles = _userprofiles;
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfilesListArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetUserProfilesListArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetUserProfilesListArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetUserProfilesListArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _userProfiles = AsnUserProfileList_Converter.toBER(s.userProfiles, errors, newContext, "userProfiles");
		if (!errors.hasNewErrors()) {
			if (_userProfiles)
				t.push(_userProfiles);
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfilesListArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetUserProfilesListArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetUserProfilesListArgument");

		let t: ENetUC_Admin.AsnAdminSetUserProfilesListArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetUserProfilesListArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetUserProfilesListArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _userprofiles = AsnUserProfileList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "userProfiles"), errors, newContext, "userProfiles");
			if (_userprofiles)
				t.userProfiles = _userprofiles;
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfilesListArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnAdminSetUserProfilesListResult_Converter {
	public static toJSON(s: ENetUC_Admin.AsnAdminSetUserProfilesListResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnAdminSetUserProfilesListResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetUserProfilesListResult");

		const t = {} as ENetUC_Admin.AsnAdminSetUserProfilesListResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAdminSetUserProfilesListResult";
		TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext);
		if (s.errorList) {
			const _errorList = AsnSetUserProfilesErrorList_Converter.toJSON(s.errorList, errors, newContext, "errorList");
			if (_errorList)
				t.errorList = _errorList;
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfilesListResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetUserProfilesListResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetUserProfilesListResult");

		let t: ENetUC_Admin.AsnAdminSetUserProfilesListResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnAdminSetUserProfilesListResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Admin.AsnAdminSetUserProfilesListResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext, false);
			const _errorlist = AsnSetUserProfilesErrorList_Converter.fromJSON(s.errorList, errors, newContext, "errorList", true);
			if (_errorlist)
				t.errorList = _errorlist;
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfilesListResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnAdminSetUserProfilesListResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAdminSetUserProfilesListResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAdminSetUserProfilesListResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "bSuccess", "boolean", errors, newContext);
		const _errorList = AsnSetUserProfilesErrorList_Converter.toBER(s.errorList, errors, newContext, "errorList", 0);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.bSuccess, name: "bSuccess" }));
			if (_errorList)
				t.push(_errorList);
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfilesListResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnAdminSetUserProfilesListResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAdminSetUserProfilesListResult");

		let t: ENetUC_Admin.AsnAdminSetUserProfilesListResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnAdminSetUserProfilesListResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Admin.AsnAdminSetUserProfilesListResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "bSuccess", "Boolean", errors, newContext);
			t.errorList = AsnSetUserProfilesErrorList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "errorList"), errors, newContext, "errorList", true);
		}

		if (errors.validateResult(newContext, "AsnAdminSetUserProfilesListResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnComputerProfileList_Converter {
	public static toJSON(s: ENetUC_Admin.AsnComputerProfileList, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Admin.AsnComputerProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnComputerProfileList");

		const t = [] as ENetUC_Admin.AsnComputerProfileList;

		// [Print_JSON_EncoderSetOfDefCode]
		for (const id in s) {
			const se = s[id];
			if (se === undefined)
				continue;
			const val = AsnComputerProfile_Converter.toJSON(se, errors, newContext, "AsnComputerProfile");
			if (val)
				t.push(val);
		}

		if (errors.validateResult(newContext, "AsnComputerProfileList"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnComputerProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnComputerProfileList");

		let t: ENetUC_Admin.AsnComputerProfileList | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Admin.AsnComputerProfileList>(data, errors, newContext, optional);
		if (s) {
			t = new ENetUC_Admin.AsnComputerProfileList();
			// [Print_JSON_DecoderSetOfDefCode]
			for (const id in s) {
				const se = s[id];
				if (se === undefined)
					continue;
				const val = AsnComputerProfile_Converter.fromJSON(se, errors, newContext, "AsnComputerProfile", false);
				if (val)
					t.push(val);
			}
		}

		if (errors.validateResult(newContext, "AsnComputerProfileList"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Admin.AsnComputerProfileList | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnComputerProfileList";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnComputerProfileList");

		// [Print_BER_EncoderSetOfDefCode]
		for (const id in s) {
			const val = AsnComputerProfile_Converter.toBER(s[id], errors, newContext, "AsnComputerProfile");
			if (val)
				t.push(val);
		}


		if (errors.validateResult(newContext, "AsnComputerProfileList"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Admin.AsnComputerProfileList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnComputerProfileList");

		let t: ENetUC_Admin.AsnComputerProfileList | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Admin.AsnComputerProfileList.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = new ENetUC_Admin.AsnComputerProfileList();
			// [Print_BER_DecoderSetOfDefCode]
			for (const se of s.valueBlock.value) {
				if (asn1ts.Sequence.typeGuard(se)) {
					const val = AsnComputerProfile_Converter.fromBER(se, errors, newContext, "AsnComputerProfile", optional);
					if (val)
						t.push(val);
				} else
					errors.push(new ConverterError(ConverterErrorType.PROPERTY_TYPEMISMATCH, newContext.context, "wrong type"));
			}
		}

		if (errors.validateResult(newContext, "AsnComputerProfileList"))
			return t;

		return undefined;
	}
}
