// [PrintTSROSEHeader]
/**
 * ENetUC_AppointmentsROSE
 * "UC-Server-Access-Protocol-Appointments" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImports]
// Global imports
import { IENetUC_AppointmentsROSE, IENetUC_AppointmentsROSE_Handler } from "./ENetUC_AppointmentsROSE_Interface";
import { ROSEError, ROSEInvoke, ROSEReject, ROSEResult } from "./SNACCROSE";
import { AsnInvokeProblem, AsnInvokeProblemEnum, createInvokeReject, IASN1Transport, IASN1LogData, IReceiveInvokeContext, IInvokeHandler, ELogSeverity, ROSEBase } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_Appointments from "./ENetUC_Appointments";
import * as Converter from "./ENetUC_Appointments_Converter";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_Appointments from "./ENetUC_Common_Appointments";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";
import * as ENetUC_Common_Appointments_Converter from "./ENetUC_Common_Appointments_Converter";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_AppointmentsROSE";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEOperationDefines]
export enum OperationIDs {
	OPID_asnAppointmentSetEntryList = 400,
	OPID_asnAppointmentSetSeriesEntriesList = 406,
	OPID_asnAppointmentRemoveEntry = 401,
	OPID_asnAppointmentSetEntry = 402,
	OPID_asnAppointmentGetAllEntriesForUser = 403,
	OPID_asnAppointmentGetActualEntrysForUser = 404
}

// [PrintTSROSEModuleComment]
/**
 * Appointment interface.
 * ##        Appointments Modul                                        ##
 *
 *
 * ##            Module description                            ##
 * This module contains all operations and structures used for transferring appointments
 * from and to the appointment database in the UCServer.
 */

// [PrintTSROSEClass]
export class ENetUC_AppointmentsROSE extends ROSEBase implements IInvokeHandler, IENetUC_AppointmentsROSE {
	/**
	 * Contains the attributes that have to be filtered from logging
	 * Use logfilter property;property inside the asn1 root comments to specify this list
	 */
	public readonly logFilter: string[];

	/**
	 * The Loggers getLogData callback (used in all the log methods called in this class, add the classname to every log entry)
	 *
	 * @returns - an ILogData log data object provided additional data for all the logger calls in this class
	 */
	public getLogData(): IASN1LogData {
		return {
			className: MODULE_NAME
		};
	}

	/**
	 * Returns the operationName for an operationID
	 *
	 * @param id - the id we want to have the name for
	 * @returns - the name or undefined if not found
	 */
	public getNameForOperationID(id: OperationIDs): string | undefined {
		switch (id) {
			case OperationIDs.OPID_asnAppointmentSetEntryList:
				return "asnAppointmentSetEntryList";
			case OperationIDs.OPID_asnAppointmentSetSeriesEntriesList:
				return "asnAppointmentSetSeriesEntriesList";
			case OperationIDs.OPID_asnAppointmentRemoveEntry:
				return "asnAppointmentRemoveEntry";
			case OperationIDs.OPID_asnAppointmentSetEntry:
				return "asnAppointmentSetEntry";
			case OperationIDs.OPID_asnAppointmentGetAllEntriesForUser:
				return "asnAppointmentGetAllEntriesForUser";
			case OperationIDs.OPID_asnAppointmentGetActualEntrysForUser:
				return "asnAppointmentGetActualEntrysForUser";
			default:
				return undefined;
		}
	}

	/**
	 * Returns the operationID for an operationName
	 *
	 * @param name - the name we want to have the id for
	 * @returns - the id or undefined if not found
	 */
	public getIDForOperationName(name: string): OperationIDs | undefined {
		switch (name) {
			case "asnAppointmentSetEntryList":
				return OperationIDs.OPID_asnAppointmentSetEntryList;
			case "asnAppointmentSetSeriesEntriesList":
				return OperationIDs.OPID_asnAppointmentSetSeriesEntriesList;
			case "asnAppointmentRemoveEntry":
				return OperationIDs.OPID_asnAppointmentRemoveEntry;
			case "asnAppointmentSetEntry":
				return OperationIDs.OPID_asnAppointmentSetEntry;
			case "asnAppointmentGetAllEntriesForUser":
				return OperationIDs.OPID_asnAppointmentGetAllEntriesForUser;
			case "asnAppointmentGetActualEntrysForUser":
				return OperationIDs.OPID_asnAppointmentGetActualEntrysForUser;
			default:
				return undefined;
		}
	}

	// [PrintTSROSEConstructor]
	/**
	 * Constructs the invoke and oninvoke object targeting all the ROSE related parts.
	 *
	 * @param transport - The transport is the connection to the other side. It takes care of delivering the invoke
	 * to us as well as to send invokes and events to the other side. It also holds the logger.
	 * @param handleEvents - Set this to true if you want to receive events or false if the stub should cached them
	 * until you call dispatchEvents();
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public constructor(transport: IASN1Transport, handleEvents: boolean, handler?: Partial<IENetUC_AppointmentsROSE_Handler>) {
		super(transport, handleEvents);

		this.logFilter = [];

		if (handler)
			this.setHandler(handler);
	}

	// [PrintTSROSESetHandler]
	/**
	 * Sets the handler and registers the operations with it
	 *
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public setHandler(handler: Partial<IENetUC_AppointmentsROSE_Handler>): void {
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAppointmentSetEntryList, "asnAppointmentSetEntryList");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAppointmentSetSeriesEntriesList, "asnAppointmentSetSeriesEntriesList");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAppointmentRemoveEntry, "asnAppointmentRemoveEntry");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAppointmentSetEntry, "asnAppointmentSetEntry");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAppointmentGetAllEntriesForUser, "asnAppointmentGetAllEntriesForUser");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAppointmentGetActualEntrysForUser, "asnAppointmentGetActualEntrysForUser");
		this.transport.registerModuleVersion("ENetUC_Appointments", 8, 0);
	}

	// [PrintTSROSEInvokeMethods]

	// [PrintTSROSEInvokeMethod]
	/**
	 * Send list of appointments of a user to the server
	 * Send a complete list of appointments to the server. This will replace the whole list currently on the server.
	 * Currently the clients should only send a timeframe of the next 30 days to the server for reducing resource consumption.
	 *
	 * - Anyonymous access: no
	 * - Admin access for other users: yes (e.g. EWS Calendar Replicator)
	 * - User access for other users: no (server will ignore given u8sOwner)
	 * - User access: yes (u8sOwner not neccessary)
	 *
	 * @param argument - An AsnAppointmentSetEntryListArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAppointmentSetEntryListResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAppointmentSetEntryList(argument: ENetUC_Appointments.AsnAppointmentSetEntryListArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Appointments.AsnAppointmentSetEntryListResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Appointments.AsnAppointmentSetEntryListResult, OperationIDs.OPID_asnAppointmentSetEntryList, "asnAppointmentSetEntryList", Converter.AsnAppointmentSetEntryListArgument_Converter, Converter.AsnAppointmentSetEntryListResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Send a complete list of recurrent appointments to the server.
	 * Send a complete list of recurrent appointments to the server. Each entry must have the same entryID.
	 *
	 * @param argument - An AsnAppointmentSetSeriesEntriesListArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAppointmentSetSeriesEntriesListResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAppointmentSetSeriesEntriesList(argument: ENetUC_Appointments.AsnAppointmentSetSeriesEntriesListArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Appointments.AsnAppointmentSetSeriesEntriesListResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Appointments.AsnAppointmentSetSeriesEntriesListResult, OperationIDs.OPID_asnAppointmentSetSeriesEntriesList, "asnAppointmentSetSeriesEntriesList", Converter.AsnAppointmentSetSeriesEntriesListArgument_Converter, Converter.AsnAppointmentSetSeriesEntriesListResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Removes an Entry from the Server.
	 * With this operation the caller can remove an entry from the appointment database identified by its u8sEntryID.
	 *
	 * @param argument - An AsnAppointmentRemoveEntryArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAppointmentRemoveEntryResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAppointmentRemoveEntry(argument: ENetUC_Appointments.AsnAppointmentRemoveEntryArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Appointments.AsnAppointmentRemoveEntryResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Appointments.AsnAppointmentRemoveEntryResult, OperationIDs.OPID_asnAppointmentRemoveEntry, "asnAppointmentRemoveEntry", Converter.AsnAppointmentRemoveEntryArgument_Converter, Converter.AsnAppointmentRemoveEntryResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Send one Entry to the Server.
	 * Send one appointment entry to the UCServer for storing it into the appointment database.
	 *
	 * @param argument - An AsnAppointmentSetEntryArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAppointmentSetEntryResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAppointmentSetEntry(argument: ENetUC_Appointments.AsnAppointmentSetEntryArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Appointments.AsnAppointmentSetEntryResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Appointments.AsnAppointmentSetEntryResult, OperationIDs.OPID_asnAppointmentSetEntry, "asnAppointmentSetEntry", Converter.AsnAppointmentSetEntryArgument_Converter, Converter.AsnAppointmentSetEntryResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Retrieve all appointments of the user.
	 * With this operation the client can get all known appointmentzs of the logged in user from the appointment database of the UCServer.
	 *
	 * @param argument - An AsnAppointmentGetAllEntriesForUserArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAppointmentGetAllEntriesForUserResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAppointmentGetAllEntriesForUser(argument: ENetUC_Appointments.AsnAppointmentGetAllEntriesForUserArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Appointments.AsnAppointmentGetAllEntriesForUserResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Appointments.AsnAppointmentGetAllEntriesForUserResult, OperationIDs.OPID_asnAppointmentGetAllEntriesForUser, "asnAppointmentGetAllEntriesForUser", Converter.AsnAppointmentGetAllEntriesForUserArgument_Converter, Converter.AsnAppointmentGetAllEntriesForUserResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Read the currently active Entry from the Server (scope: current Usersession).
	 *
	 * @param argument - An AsnAppointmentGetActualEntryForUserArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAppointmentGetActualEntryForUserResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAppointmentGetActualEntrysForUser(argument: ENetUC_Appointments.AsnAppointmentGetActualEntryForUserArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Appointments.AsnAppointmentGetActualEntryForUserResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Appointments.AsnAppointmentGetActualEntryForUserResult, OperationIDs.OPID_asnAppointmentGetActualEntrysForUser, "asnAppointmentGetActualEntrysForUser", Converter.AsnAppointmentGetActualEntryForUserArgument_Converter, Converter.AsnAppointmentGetActualEntryForUserResult_Converter, invokeContext);
	}

	// [PrintTSROSEOnInvokeswitchCase]
	/**
	 * This is the central onInvoke method that is called whenever a method of this module is called.
	 * Based on the operationID we step into the decoding of the method argument and call the method in the handler.
	 * The result is then again encoded and send to the other side.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the metho in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled, ROSEResult for the invoke result, ROSEError for an error or undefined if an event was called
	 */
	public async onInvoke(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_AppointmentsROSE_Handler): Promise<ROSEReject | ROSEResult | ROSEError | undefined> {
		switch (invoke.operationID) {
			case OperationIDs.OPID_asnAppointmentSetEntryList:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAppointmentSetEntryList, ENetUC_Appointments.AsnAppointmentSetEntryListArgument, Converter.AsnAppointmentSetEntryListArgument_Converter, Converter.AsnAppointmentSetEntryListResult_Converter, handler, handler.onInvoke_asnAppointmentSetEntryList, invokeContext);
			case OperationIDs.OPID_asnAppointmentSetSeriesEntriesList:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAppointmentSetSeriesEntriesList, ENetUC_Appointments.AsnAppointmentSetSeriesEntriesListArgument, Converter.AsnAppointmentSetSeriesEntriesListArgument_Converter, Converter.AsnAppointmentSetSeriesEntriesListResult_Converter, handler, handler.onInvoke_asnAppointmentSetSeriesEntriesList, invokeContext);
			case OperationIDs.OPID_asnAppointmentRemoveEntry:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAppointmentRemoveEntry, ENetUC_Appointments.AsnAppointmentRemoveEntryArgument, Converter.AsnAppointmentRemoveEntryArgument_Converter, Converter.AsnAppointmentRemoveEntryResult_Converter, handler, handler.onInvoke_asnAppointmentRemoveEntry, invokeContext);
			case OperationIDs.OPID_asnAppointmentSetEntry:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAppointmentSetEntry, ENetUC_Appointments.AsnAppointmentSetEntryArgument, Converter.AsnAppointmentSetEntryArgument_Converter, Converter.AsnAppointmentSetEntryResult_Converter, handler, handler.onInvoke_asnAppointmentSetEntry, invokeContext);
			case OperationIDs.OPID_asnAppointmentGetAllEntriesForUser:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAppointmentGetAllEntriesForUser, ENetUC_Appointments.AsnAppointmentGetAllEntriesForUserArgument, Converter.AsnAppointmentGetAllEntriesForUserArgument_Converter, Converter.AsnAppointmentGetAllEntriesForUserResult_Converter, handler, handler.onInvoke_asnAppointmentGetAllEntriesForUser, invokeContext);
			case OperationIDs.OPID_asnAppointmentGetActualEntrysForUser:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAppointmentGetActualEntrysForUser, ENetUC_Appointments.AsnAppointmentGetActualEntryForUserArgument, Converter.AsnAppointmentGetActualEntryForUserArgument_Converter, Converter.AsnAppointmentGetActualEntryForUserResult_Converter, handler, handler.onInvoke_asnAppointmentGetActualEntrysForUser, invokeContext);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_AppointmentsROSE`);
		}
	}
}
