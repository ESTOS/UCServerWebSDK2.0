// [PrintTSROSEInterfaceCode]
// [PrintTSROSEHeader]
/**
 * ENetUC_ClientContentROSE_Interface
 * "UC-Server-Access-Protocol-ClientContent" ASN.1 interfaces.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImport]
import { IReceiveInvokeContext, AsnInvokeProblem } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_ClientContent from "./ENetUC_ClientContent";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_ClientContentROSEInterface";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEInterface]
export interface IENetUC_ClientContentROSE {
	invoke_asnGetClientContent(argument: ENetUC_ClientContent.AsnGetClientContentArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ClientContent.AsnGetClientContentResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnSubscribeClientContent(argument: ENetUC_ClientContent.AsnSubscribeClientContentArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ClientContent.AsnSubscribeClientContentResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnUnsubscribeClientContent(argument: ENetUC_ClientContent.AsnUnsubscribeClientContentArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ClientContent.AsnUnsubscribeClientContentResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChangeClientContent(argument: ENetUC_ClientContent.AsnChangeClientContentArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ClientContent.AsnChangeClientContentResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnClientContentChanged(argument: ENetUC_ClientContent.AsnClientContentChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	invoke_asnClientContentSubscribeToTags(argument: ENetUC_ClientContent.AsnClientContentSubscribeToTagsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ClientContent.AsnClientContentSubscribeToTagsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnClientContentTaggedIDsChanged(argument: ENetUC_ClientContent.AsnClientContentTaggedIDsChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	invoke_asnClientContentSaveTags(argument: ENetUC_ClientContent.AsnClientContentSaveTagsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ClientContent.AsnClientContentSaveTagsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnGetAndSubscribeAdministrativeMonitorContent(argument: ENetUC_ClientContent.AsnGetAndSubscribeAdministrativeMonitorContentArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ClientContent.AsnGetAndSubscribeAdministrativeMonitorContentResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnUnsubscribeAdministrativeMonitorContent(argument: ENetUC_ClientContent.AsnUnsubscribeAdministrativeMonitorContentArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ClientContent.AsnUnsubscribeAdministrativeMonitorContentResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnAdministrativeMonitorContentGroupAdded(argument: ENetUC_ClientContent.AsnAdministrativeMonitorContentGroupAddedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnAdministrativeMonitorContentGroupChanged(argument: ENetUC_ClientContent.AsnAdministrativeMonitorContentGroupChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnAdministrativeMonitorContentGroupRemoved(argument: ENetUC_ClientContent.AsnAdministrativeMonitorContentGroupRemovedArgument, invokeContext?: ISendInvokeContextParams): void;
}

// [PrintTSROSEHandlerInterface]
// Contains all invokes of the interface (normally the server side)
export interface IENetUC_ClientContentROSE_Invoke_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onInvoke_asnGetClientContent(argument: ENetUC_ClientContent.AsnGetClientContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnGetClientContentResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnSubscribeClientContent(argument: ENetUC_ClientContent.AsnSubscribeClientContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnSubscribeClientContentResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnUnsubscribeClientContent(argument: ENetUC_ClientContent.AsnUnsubscribeClientContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnUnsubscribeClientContentResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChangeClientContent(argument: ENetUC_ClientContent.AsnChangeClientContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnChangeClientContentResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnClientContentSubscribeToTags(argument: ENetUC_ClientContent.AsnClientContentSubscribeToTagsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnClientContentSubscribeToTagsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnClientContentSaveTags(argument: ENetUC_ClientContent.AsnClientContentSaveTagsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnClientContentSaveTagsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnGetAndSubscribeAdministrativeMonitorContent(argument: ENetUC_ClientContent.AsnGetAndSubscribeAdministrativeMonitorContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnGetAndSubscribeAdministrativeMonitorContentResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnUnsubscribeAdministrativeMonitorContent(argument: ENetUC_ClientContent.AsnUnsubscribeAdministrativeMonitorContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnUnsubscribeAdministrativeMonitorContentResult | ENetUC_Common.AsnRequestError | undefined>;
}

// Contains all events of the interface (normally the client side)
export interface IENetUC_ClientContentROSE_Event_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnClientContentChanged(argument: ENetUC_ClientContent.AsnClientContentChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnClientContentTaggedIDsChanged(argument: ENetUC_ClientContent.AsnClientContentTaggedIDsChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnAdministrativeMonitorContentGroupAdded(argument: ENetUC_ClientContent.AsnAdministrativeMonitorContentGroupAddedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnAdministrativeMonitorContentGroupChanged(argument: ENetUC_ClientContent.AsnAdministrativeMonitorContentGroupChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnAdministrativeMonitorContentGroupRemoved(argument: ENetUC_ClientContent.AsnAdministrativeMonitorContentGroupRemovedArgument, invokeContext: IReceiveInvokeContext): void;
}

// Contains all invokes and events of the interface
export type IENetUC_ClientContentROSE_Handler = IENetUC_ClientContentROSE_Invoke_Handler & IENetUC_ClientContentROSE_Event_Handler;

// [PrintTSROSEServerCopyPasteInterface]
/* Copy paste code for the import statement
import { IReceiveInvokeContext } from "./TSROSEBase";
import * as ENetUC_Common from "./ENetUC_Common";
import { ENetUC_ClientContent } from "./ENetUC_ClientContent";
*/

/**
 * Allows to set the log context for an invoke.
 * This method is called in advanced of methods handled inside this handler
 * The idea is to implement a async local storage based on the provided data from the argument or invokeContext
 *
 * @param argument - the snacc rose argument
 * @param invokeContext - the invoke context
 */
/*
public setLogContext(argument: unknown, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Get the client content data and structure with a single request without any event subscriptions.
 *
 * For some use cases only the transfer of the client content and structure is needed. In this case one can use this request and get the content synchronously.
 *
 * @param argument - Argument for asnGetClientContent.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnGetClientContentResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnGetClientContent(argument: ENetUC_ClientContent.AsnGetClientContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnGetClientContentResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Subscribe to the client content of the current user.
 *
 * Client can get the client content asynchronously with this request and the client will be registered for change events (asnClientContentChanged) of the content.
 *
 * @param argument - Argument for asnSubscribeClientContent.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnSubscribeClientContentResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnSubscribeClientContent(argument: ENetUC_ClientContent.AsnSubscribeClientContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnSubscribeClientContentResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Unsubscribe from the change events for the client content.
 *
 * Unsubscribing from the events cannot be parameterized so the call will always unregister all events.
 *
 * @param argument - Argument for asnUnsubscribeClientContent.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnUnsubscribeClientContentResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnUnsubscribeClientContent(argument: ENetUC_ClientContent.AsnUnsubscribeClientContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnUnsubscribeClientContentResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Change the client content of the user.
 *
 * A client can use this request to change the client content. It can change the contact informations and the structure of the content.
 *
 * @param argument - Argument for asnChangeClientContent.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChangeClientContentResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChangeClientContent(argument: ENetUC_ClientContent.AsnChangeClientContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnChangeClientContentResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Subscribe to changes of the tagging status of a contact
 *
 * A user can set \"tags\" on a contact, for getting notifies if the presence state of that contact is changing.
 * This is called here \"tagging\". These tags are saved as a list on the UCServer and with this subscribtion the client will be
 * evented if the list changes on the server.
 *
 * There is no dedicated unsibscribe mechanism implemented yet; the client will be automatically unsibscribed by logging of or at loosing the connection.
 *
 * @param argument - Argument for asnClientContentSubscribeToTags
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnClientContentSubscribeToTagsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnClientContentSubscribeToTags(argument: ENetUC_ClientContent.AsnClientContentSubscribeToTagsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnClientContentSubscribeToTagsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Change tags on contacts.
 *
 * To change the list of tagged contacts, this request will be send to the server with the new list of contact IDs.
 * To clear the tags just send an empty list.
 *
 * @param argument - Argument for asnClientContentSaveTags.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnClientContentSaveTagsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnClientContentSaveTags(argument: ENetUC_ClientContent.AsnClientContentSaveTagsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnClientContentSaveTagsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Client gets the contacts especial for a attendant console and can subscribe to events if the groups are changing.
 *
 * For fast call transfer or agent consulting it must be possible to get contact for this purpose, because that
 * enables additional, specialized features for them in the UI for this use case.
 *
 * The UCServer will gather the groups and the user IDs according the configuration set by the admin.
 *
 * @param argument - Arguments for asnGetAndSubscribeAdministrativeMonitorContent. The content will be generated by the UCServer using the logged in user.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnGetAndSubscribeAdministrativeMonitorContentResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnGetAndSubscribeAdministrativeMonitorContent(argument: ENetUC_ClientContent.AsnGetAndSubscribeAdministrativeMonitorContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnGetAndSubscribeAdministrativeMonitorContentResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Unsubscribe from events about the Administrative Monitor Content.
 *
 * To stop eventing of changes about the AdministrativeMonitorContent call this function.
 *
 * @param argument - Argumment for asnUnsubscribeAdministrativeMonitorContent
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnUnsubscribeAdministrativeMonitorContentResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnUnsubscribeAdministrativeMonitorContent(argument: ENetUC_ClientContent.AsnUnsubscribeAdministrativeMonitorContentArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientContent.AsnUnsubscribeAdministrativeMonitorContentResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Event from the server to the client if the client content was changed.
 *
 * The server send an event to all connected client for this user to update the client content if one of the clients has changed it.
 *
 * @param argument - Argument for asnClientContentChanged event.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnClientContentChanged(argument: ENetUC_ClientContent.AsnClientContentChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from server to client if tags on contacts have changed.
 *
 * If another client changes the tag list, this event will be fired to all clients with the new list.
 *
 * @param argument - Argument for event asnClientContentTaggedIDsChanged.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnClientContentTaggedIDsChanged(argument: ENetUC_ClientContent.AsnClientContentTaggedIDsChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from server to client if a Administrative Monitor Content Groups has been added.
 *
 * If the administrator changed something in the configuration of the groups which are part of the administrative Groups, these changes
 * will be provided to the clients with this event.
 *
 * The argument contains the AsnAdministrativeMonitorGroups if it was added.
 *
 * @param argument - Argument for event asnAdministrativeMonitorContentGroupAdded.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnAdministrativeMonitorContentGroupAdded(argument: ENetUC_ClientContent.AsnAdministrativeMonitorContentGroupAddedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from server to client if changes to the Administrative Monitor Content Groups were made.
 *
 * If the administrator changed something in the configuration of the groups which are part of the Administrative Groups, these changes
 * will be provided to the clients with this event.
 *
 * The argument contains a AsnAdministrativeMonitorGroup if it was changed.
 * The changed group will contain the updated list of users, so the client must probably detect if there were users added or removed.
 *
 * @param argument - Argument for event asnAdministrativeMonitorContentGroupChanged.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnAdministrativeMonitorContentGroupChanged(argument: ENetUC_ClientContent.AsnAdministrativeMonitorContentGroupChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from server to client if the Administrative Monitor Content Groups were removed.
 *
 * If the administrator changed something in the configuration of the groups which are part of the administrative Groups, these changes
 * will be provided to the clients with this event.
 *
 * The argument contains the AsnAdministrativeMonitorGroup if it was removed.
 *
 * @param argument - Argument for event asnAdministrativeMonitorContentGroupRemoved.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnAdministrativeMonitorContentGroupRemoved(argument: ENetUC_ClientContent.AsnAdministrativeMonitorContentGroupRemovedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/
