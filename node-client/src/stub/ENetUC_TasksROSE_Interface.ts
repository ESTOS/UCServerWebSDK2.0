// [PrintTSROSEInterfaceCode]
// [PrintTSROSEHeader]
/**
 * ENetUC_TasksROSE_Interface
 * "UC-Server-Access-Protocol-Tasks" ASN.1 interfaces.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImport]
import { IReceiveInvokeContext, AsnInvokeProblem } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_Tasks from "./ENetUC_Tasks";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_SIPCTI from "./ENetUC_Common_SIPCTI";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_TasksROSEInterface";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEInterface]
export interface IENetUC_TasksROSE {
	invoke_asnTaskGetEntriesV2(argument: ENetUC_Tasks.AsnTaskGetEntriesV2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskGetEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnTaskGetEntryCount(argument: ENetUC_Tasks.AsnTaskGetEntryCountArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskGetEntryCountResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnTaskAddEntry(argument: ENetUC_Tasks.AsnTaskAddEntryArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskAddEntryResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnTaskRemoveEntries(argument: ENetUC_Tasks.AsnTaskRemoveEntriesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskRemoveEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnTaskModifyEntries(argument: ENetUC_Tasks.AsnTaskModifyEntriesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskModifyEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnTaskSetEntriesState(argument: ENetUC_Tasks.AsnTaskSetEntriesStateArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskSetEntriesStateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnTaskDelegateEntries(argument: ENetUC_Tasks.AsnTaskDelegateEntriesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskDelegateEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnTaskSetEntriesReminder(argument: ENetUC_Tasks.AsnTaskSetEntriesReminderArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskSetEntriesReminderResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnTaskItemsModified(argument: ENetUC_Tasks.AsnTaskItemsModifiedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnTaskItemsAdded(argument: ENetUC_Tasks.AsnTaskItemsAddedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnTaskItemsRemoved(argument: ENetUC_Tasks.AsnTaskItemsRemovedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnTasksReload(argument: ENetUC_Tasks.AsnTasksReloadArgument, invokeContext?: ISendInvokeContextParams): void;
}

// [PrintTSROSEHandlerInterface]
// Contains all invokes of the interface (normally the server side)
export interface IENetUC_TasksROSE_Invoke_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onInvoke_asnTaskGetEntriesV2(argument: ENetUC_Tasks.AsnTaskGetEntriesV2Argument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskGetEntriesResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnTaskGetEntryCount(argument: ENetUC_Tasks.AsnTaskGetEntryCountArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskGetEntryCountResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnTaskAddEntry(argument: ENetUC_Tasks.AsnTaskAddEntryArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskAddEntryResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnTaskRemoveEntries(argument: ENetUC_Tasks.AsnTaskRemoveEntriesArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskRemoveEntriesResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnTaskModifyEntries(argument: ENetUC_Tasks.AsnTaskModifyEntriesArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskModifyEntriesResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnTaskSetEntriesState(argument: ENetUC_Tasks.AsnTaskSetEntriesStateArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskSetEntriesStateResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnTaskDelegateEntries(argument: ENetUC_Tasks.AsnTaskDelegateEntriesArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskDelegateEntriesResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnTaskSetEntriesReminder(argument: ENetUC_Tasks.AsnTaskSetEntriesReminderArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskSetEntriesReminderResult | ENetUC_Common.AsnRequestError | undefined>;
}

// Contains all events of the interface (normally the client side)
export interface IENetUC_TasksROSE_Event_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnTaskItemsModified(argument: ENetUC_Tasks.AsnTaskItemsModifiedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnTaskItemsAdded(argument: ENetUC_Tasks.AsnTaskItemsAddedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnTaskItemsRemoved(argument: ENetUC_Tasks.AsnTaskItemsRemovedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnTasksReload(argument: ENetUC_Tasks.AsnTasksReloadArgument, invokeContext: IReceiveInvokeContext): void;
}

// Contains all invokes and events of the interface
export type IENetUC_TasksROSE_Handler = IENetUC_TasksROSE_Invoke_Handler & IENetUC_TasksROSE_Event_Handler;

// [PrintTSROSEServerCopyPasteInterface]
/* Copy paste code for the import statement
import { IReceiveInvokeContext } from "./TSROSEBase";
import * as ENetUC_Common from "./ENetUC_Common";
import { ENetUC_Tasks } from "./ENetUC_Tasks";
*/

/**
 * Allows to set the log context for an invoke.
 * This method is called in advanced of methods handled inside this handler
 * The idea is to implement a async local storage based on the provided data from the argument or invokeContext
 *
 * @param argument - the snacc rose argument
 * @param invokeContext - the invoke context
 */
/*
public setLogContext(argument: unknown, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnTaskGetEntriesResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnTaskGetEntriesV2(argument: ENetUC_Tasks.AsnTaskGetEntriesV2Argument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskGetEntriesResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnTaskGetEntryCountResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnTaskGetEntryCount(argument: ENetUC_Tasks.AsnTaskGetEntryCountArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskGetEntryCountResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnTaskAddEntryResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnTaskAddEntry(argument: ENetUC_Tasks.AsnTaskAddEntryArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskAddEntryResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnTaskRemoveEntriesResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnTaskRemoveEntries(argument: ENetUC_Tasks.AsnTaskRemoveEntriesArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskRemoveEntriesResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnTaskModifyEntriesResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnTaskModifyEntries(argument: ENetUC_Tasks.AsnTaskModifyEntriesArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskModifyEntriesResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnTaskSetEntriesStateResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnTaskSetEntriesState(argument: ENetUC_Tasks.AsnTaskSetEntriesStateArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskSetEntriesStateResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnTaskDelegateEntriesResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnTaskDelegateEntries(argument: ENetUC_Tasks.AsnTaskDelegateEntriesArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskDelegateEntriesResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnTaskSetEntriesReminderResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnTaskSetEntriesReminder(argument: ENetUC_Tasks.AsnTaskSetEntriesReminderArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Tasks.AsnTaskSetEntriesReminderResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnTaskItemsModified(argument: ENetUC_Tasks.AsnTaskItemsModifiedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnTaskItemsAdded(argument: ENetUC_Tasks.AsnTaskItemsAddedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnTaskItemsRemoved(argument: ENetUC_Tasks.AsnTaskItemsRemovedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnTasksReload(argument: ENetUC_Tasks.AsnTasksReloadArgument, invokeContext: IReceiveInvokeContext): void {
}
*/
