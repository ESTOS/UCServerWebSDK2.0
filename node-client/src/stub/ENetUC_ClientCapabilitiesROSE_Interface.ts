// [PrintTSROSEInterfaceCode]
// [PrintTSROSEHeader]
/**
 * ENetUC_ClientCapabilitiesROSE_Interface
 * "UC-Server-Access-Protocol-ClientCapabilities" ASN.1 interfaces.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImport]
import { IReceiveInvokeContext, AsnInvokeProblem } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_ClientCapabilities from "./ENetUC_ClientCapabilities";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_ClientCapabilitiesROSEInterface";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEInterface]
export interface IENetUC_ClientCapabilitiesROSE {
	invoke_asnSetClientCapabilitiesV2(argument: ENetUC_ClientCapabilities.AsnSetClientCapabilitiesV2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ClientCapabilities.AsnSetClientCapabilitiesV2Result | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnGetClientCapabilitiesV2(argument: ENetUC_ClientCapabilities.AsnGetClientCapabilitiesV2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ClientCapabilities.AsnGetClientCapabilitiesV2Result | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnClientCapabilitiesV2Changed(argument: ENetUC_ClientCapabilities.AsnClientCapabilitiesV2ChangedArgument, invokeContext?: ISendInvokeContextParams): void;
}

// [PrintTSROSEHandlerInterface]
// Contains all invokes of the interface (normally the server side)
export interface IENetUC_ClientCapabilitiesROSE_Invoke_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onInvoke_asnSetClientCapabilitiesV2(argument: ENetUC_ClientCapabilities.AsnSetClientCapabilitiesV2Argument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientCapabilities.AsnSetClientCapabilitiesV2Result | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnGetClientCapabilitiesV2(argument: ENetUC_ClientCapabilities.AsnGetClientCapabilitiesV2Argument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientCapabilities.AsnGetClientCapabilitiesV2Result | ENetUC_Common.AsnRequestError | undefined>;
}

// Contains all events of the interface (normally the client side)
export interface IENetUC_ClientCapabilitiesROSE_Event_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnClientCapabilitiesV2Changed(argument: ENetUC_ClientCapabilities.AsnClientCapabilitiesV2ChangedArgument, invokeContext: IReceiveInvokeContext): void;
}

// Contains all invokes and events of the interface
export type IENetUC_ClientCapabilitiesROSE_Handler = IENetUC_ClientCapabilitiesROSE_Invoke_Handler & IENetUC_ClientCapabilitiesROSE_Event_Handler;

// [PrintTSROSEServerCopyPasteInterface]
/* Copy paste code for the import statement
import { IReceiveInvokeContext } from "./TSROSEBase";
import * as ENetUC_Common from "./ENetUC_Common";
import { ENetUC_ClientCapabilities } from "./ENetUC_ClientCapabilities";
*/

/**
 * Allows to set the log context for an invoke.
 * This method is called in advanced of methods handled inside this handler
 * The idea is to implement a async local storage based on the provided data from the argument or invokeContext
 *
 * @param argument - the snacc rose argument
 * @param invokeContext - the invoke context
 */
/*
public setLogContext(argument: unknown, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event to send client capabilities to the server
 *
 * @param argument - Argument for the asnSetClientCapabilitiesV2 event
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnSetClientCapabilitiesV2Result on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnSetClientCapabilitiesV2(argument: ENetUC_ClientCapabilities.AsnSetClientCapabilitiesV2Argument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientCapabilities.AsnSetClientCapabilitiesV2Result | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Event to send client capabilities to the server
 *
 * @param argument - Argument for the asnGetClientCapabilitiesV2 event
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnGetClientCapabilitiesV2Result on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnGetClientCapabilitiesV2(argument: ENetUC_ClientCapabilities.AsnGetClientCapabilitiesV2Argument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ClientCapabilities.AsnGetClientCapabilitiesV2Result | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Event the server will send if client capabilites have changed
 *
 * The server will dispatch events for subscribed contacts towards the clients
 * The List will contain a list of client capabiliites with the user ids the refer to
 *
 * @param argument - Argument for the asnClientCapabilitiesV2Changed method
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnClientCapabilitiesV2Changed(argument: ENetUC_ClientCapabilities.AsnClientCapabilitiesV2ChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/
