// [PrintTSROSEHeader]
/**
 * ENetUC_TasksROSE
 * "UC-Server-Access-Protocol-Tasks" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImports]
// Global imports
import { IENetUC_TasksROSE, IENetUC_TasksROSE_Handler } from "./ENetUC_TasksROSE_Interface";
import { ROSEError, ROSEInvoke, ROSEReject, ROSEResult } from "./SNACCROSE";
import { AsnInvokeProblem, AsnInvokeProblemEnum, createInvokeReject, IASN1Transport, IASN1LogData, IReceiveInvokeContext, IInvokeHandler, ELogSeverity, ROSEBase } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_Tasks from "./ENetUC_Tasks";
import * as Converter from "./ENetUC_Tasks_Converter";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_SIPCTI from "./ENetUC_Common_SIPCTI";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";
import * as ENetUC_Common_SIPCTI_Converter from "./ENetUC_Common_SIPCTI_Converter";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_TasksROSE";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEOperationDefines]
export enum OperationIDs {
	OPID_asnTaskGetEntriesV2 = 2136,
	OPID_asnTaskGetEntryCount = 2137,
	OPID_asnTaskAddEntry = 2121,
	OPID_asnTaskRemoveEntries = 2122,
	OPID_asnTaskModifyEntries = 2123,
	OPID_asnTaskSetEntriesState = 2124,
	OPID_asnTaskDelegateEntries = 2125,
	OPID_asnTaskSetEntriesReminder = 2126,
	OPID_asnTaskItemsModified = 2130,
	OPID_asnTaskItemsAdded = 2131,
	OPID_asnTaskItemsRemoved = 2132,
	OPID_asnTasksReload = 2133
}

// [PrintTSROSEModuleComment]
/**
 * Task management interface
 * ## Module description
 * This module defines structures and operations for the task managment in the UCServer.
 */

// [PrintTSROSEClass]
export class ENetUC_TasksROSE extends ROSEBase implements IInvokeHandler, IENetUC_TasksROSE {
	/**
	 * Contains the attributes that have to be filtered from logging
	 * Use logfilter property;property inside the asn1 root comments to specify this list
	 */
	public readonly logFilter: string[];

	/**
	 * The Loggers getLogData callback (used in all the log methods called in this class, add the classname to every log entry)
	 *
	 * @returns - an ILogData log data object provided additional data for all the logger calls in this class
	 */
	public getLogData(): IASN1LogData {
		return {
			className: MODULE_NAME
		};
	}

	/**
	 * Returns the operationName for an operationID
	 *
	 * @param id - the id we want to have the name for
	 * @returns - the name or undefined if not found
	 */
	public getNameForOperationID(id: OperationIDs): string | undefined {
		switch (id) {
			case OperationIDs.OPID_asnTaskGetEntriesV2:
				return "asnTaskGetEntriesV2";
			case OperationIDs.OPID_asnTaskGetEntryCount:
				return "asnTaskGetEntryCount";
			case OperationIDs.OPID_asnTaskAddEntry:
				return "asnTaskAddEntry";
			case OperationIDs.OPID_asnTaskRemoveEntries:
				return "asnTaskRemoveEntries";
			case OperationIDs.OPID_asnTaskModifyEntries:
				return "asnTaskModifyEntries";
			case OperationIDs.OPID_asnTaskSetEntriesState:
				return "asnTaskSetEntriesState";
			case OperationIDs.OPID_asnTaskDelegateEntries:
				return "asnTaskDelegateEntries";
			case OperationIDs.OPID_asnTaskSetEntriesReminder:
				return "asnTaskSetEntriesReminder";
			case OperationIDs.OPID_asnTaskItemsModified:
				return "asnTaskItemsModified";
			case OperationIDs.OPID_asnTaskItemsAdded:
				return "asnTaskItemsAdded";
			case OperationIDs.OPID_asnTaskItemsRemoved:
				return "asnTaskItemsRemoved";
			case OperationIDs.OPID_asnTasksReload:
				return "asnTasksReload";
			default:
				return undefined;
		}
	}

	/**
	 * Returns the operationID for an operationName
	 *
	 * @param name - the name we want to have the id for
	 * @returns - the id or undefined if not found
	 */
	public getIDForOperationName(name: string): OperationIDs | undefined {
		switch (name) {
			case "asnTaskGetEntriesV2":
				return OperationIDs.OPID_asnTaskGetEntriesV2;
			case "asnTaskGetEntryCount":
				return OperationIDs.OPID_asnTaskGetEntryCount;
			case "asnTaskAddEntry":
				return OperationIDs.OPID_asnTaskAddEntry;
			case "asnTaskRemoveEntries":
				return OperationIDs.OPID_asnTaskRemoveEntries;
			case "asnTaskModifyEntries":
				return OperationIDs.OPID_asnTaskModifyEntries;
			case "asnTaskSetEntriesState":
				return OperationIDs.OPID_asnTaskSetEntriesState;
			case "asnTaskDelegateEntries":
				return OperationIDs.OPID_asnTaskDelegateEntries;
			case "asnTaskSetEntriesReminder":
				return OperationIDs.OPID_asnTaskSetEntriesReminder;
			case "asnTaskItemsModified":
				return OperationIDs.OPID_asnTaskItemsModified;
			case "asnTaskItemsAdded":
				return OperationIDs.OPID_asnTaskItemsAdded;
			case "asnTaskItemsRemoved":
				return OperationIDs.OPID_asnTaskItemsRemoved;
			case "asnTasksReload":
				return OperationIDs.OPID_asnTasksReload;
			default:
				return undefined;
		}
	}

	// [PrintTSROSEConstructor]
	/**
	 * Constructs the invoke and oninvoke object targeting all the ROSE related parts.
	 *
	 * @param transport - The transport is the connection to the other side. It takes care of delivering the invoke
	 * to us as well as to send invokes and events to the other side. It also holds the logger.
	 * @param handleEvents - Set this to true if you want to receive events or false if the stub should cached them
	 * until you call dispatchEvents();
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public constructor(transport: IASN1Transport, handleEvents: boolean, handler?: Partial<IENetUC_TasksROSE_Handler>) {
		super(transport, handleEvents);

		this.logFilter = [];

		if (handler)
			this.setHandler(handler);
	}

	// [PrintTSROSESetHandler]
	/**
	 * Sets the handler and registers the operations with it
	 *
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public setHandler(handler: Partial<IENetUC_TasksROSE_Handler>): void {
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTaskGetEntriesV2, "asnTaskGetEntriesV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTaskGetEntryCount, "asnTaskGetEntryCount");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTaskAddEntry, "asnTaskAddEntry");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTaskRemoveEntries, "asnTaskRemoveEntries");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTaskModifyEntries, "asnTaskModifyEntries");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTaskSetEntriesState, "asnTaskSetEntriesState");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTaskDelegateEntries, "asnTaskDelegateEntries");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTaskSetEntriesReminder, "asnTaskSetEntriesReminder");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTaskItemsModified, "asnTaskItemsModified");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTaskItemsAdded, "asnTaskItemsAdded");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTaskItemsRemoved, "asnTaskItemsRemoved");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnTasksReload, "asnTasksReload");
		this.transport.registerModuleVersion("ENetUC_Tasks", 8, 0);
	}

	// [PrintTSROSEInvokeMethods]

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTaskGetEntriesV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnTaskGetEntriesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnTaskGetEntriesV2(argument: ENetUC_Tasks.AsnTaskGetEntriesV2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskGetEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Tasks.AsnTaskGetEntriesResult, OperationIDs.OPID_asnTaskGetEntriesV2, "asnTaskGetEntriesV2", Converter.AsnTaskGetEntriesV2Argument_Converter, Converter.AsnTaskGetEntriesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTaskGetEntryCountArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnTaskGetEntryCountResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnTaskGetEntryCount(argument: ENetUC_Tasks.AsnTaskGetEntryCountArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskGetEntryCountResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Tasks.AsnTaskGetEntryCountResult, OperationIDs.OPID_asnTaskGetEntryCount, "asnTaskGetEntryCount", Converter.AsnTaskGetEntryCountArgument_Converter, Converter.AsnTaskGetEntryCountResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTaskAddEntryArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnTaskAddEntryResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnTaskAddEntry(argument: ENetUC_Tasks.AsnTaskAddEntryArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskAddEntryResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Tasks.AsnTaskAddEntryResult, OperationIDs.OPID_asnTaskAddEntry, "asnTaskAddEntry", Converter.AsnTaskAddEntryArgument_Converter, Converter.AsnTaskAddEntryResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTaskRemoveEntriesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnTaskRemoveEntriesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnTaskRemoveEntries(argument: ENetUC_Tasks.AsnTaskRemoveEntriesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskRemoveEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Tasks.AsnTaskRemoveEntriesResult, OperationIDs.OPID_asnTaskRemoveEntries, "asnTaskRemoveEntries", Converter.AsnTaskRemoveEntriesArgument_Converter, Converter.AsnTaskRemoveEntriesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTaskModifyEntriesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnTaskModifyEntriesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnTaskModifyEntries(argument: ENetUC_Tasks.AsnTaskModifyEntriesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskModifyEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Tasks.AsnTaskModifyEntriesResult, OperationIDs.OPID_asnTaskModifyEntries, "asnTaskModifyEntries", Converter.AsnTaskModifyEntriesArgument_Converter, Converter.AsnTaskModifyEntriesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTaskSetEntriesStateArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnTaskSetEntriesStateResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnTaskSetEntriesState(argument: ENetUC_Tasks.AsnTaskSetEntriesStateArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskSetEntriesStateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Tasks.AsnTaskSetEntriesStateResult, OperationIDs.OPID_asnTaskSetEntriesState, "asnTaskSetEntriesState", Converter.AsnTaskSetEntriesStateArgument_Converter, Converter.AsnTaskSetEntriesStateResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTaskDelegateEntriesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnTaskDelegateEntriesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnTaskDelegateEntries(argument: ENetUC_Tasks.AsnTaskDelegateEntriesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskDelegateEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Tasks.AsnTaskDelegateEntriesResult, OperationIDs.OPID_asnTaskDelegateEntries, "asnTaskDelegateEntries", Converter.AsnTaskDelegateEntriesArgument_Converter, Converter.AsnTaskDelegateEntriesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTaskSetEntriesReminderArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnTaskSetEntriesReminderResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnTaskSetEntriesReminder(argument: ENetUC_Tasks.AsnTaskSetEntriesReminderArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Tasks.AsnTaskSetEntriesReminderResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Tasks.AsnTaskSetEntriesReminderResult, OperationIDs.OPID_asnTaskSetEntriesReminder, "asnTaskSetEntriesReminder", Converter.AsnTaskSetEntriesReminderArgument_Converter, Converter.AsnTaskSetEntriesReminderResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTaskItemsModifiedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnTaskItemsModified(argument: ENetUC_Tasks.AsnTaskItemsModifiedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnTaskItemsModified, "asnTaskItemsModified", Converter.AsnTaskItemsModifiedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTaskItemsAddedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnTaskItemsAdded(argument: ENetUC_Tasks.AsnTaskItemsAddedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnTaskItemsAdded, "asnTaskItemsAdded", Converter.AsnTaskItemsAddedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTaskItemsRemovedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnTaskItemsRemoved(argument: ENetUC_Tasks.AsnTaskItemsRemovedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnTaskItemsRemoved, "asnTaskItemsRemoved", Converter.AsnTaskItemsRemovedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnTasksReloadArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnTasksReload(argument: ENetUC_Tasks.AsnTasksReloadArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnTasksReload, "asnTasksReload", Converter.AsnTasksReloadArgument_Converter, invokeContext);
	}

	// [PrintTSROSEOnInvokeswitchCase]
	/**
	 * This is the central onInvoke method that is called whenever a method of this module is called.
	 * Based on the operationID we step into the decoding of the method argument and call the method in the handler.
	 * The result is then again encoded and send to the other side.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the metho in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled, ROSEResult for the invoke result, ROSEError for an error or undefined if an event was called
	 */
	public async onInvoke(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_TasksROSE_Handler): Promise<ROSEReject | ROSEResult | ROSEError | undefined> {
		switch (invoke.operationID) {
			case OperationIDs.OPID_asnTaskGetEntriesV2:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnTaskGetEntriesV2, ENetUC_Tasks.AsnTaskGetEntriesV2Argument, Converter.AsnTaskGetEntriesV2Argument_Converter, Converter.AsnTaskGetEntriesResult_Converter, handler, handler.onInvoke_asnTaskGetEntriesV2, invokeContext);
			case OperationIDs.OPID_asnTaskGetEntryCount:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnTaskGetEntryCount, ENetUC_Tasks.AsnTaskGetEntryCountArgument, Converter.AsnTaskGetEntryCountArgument_Converter, Converter.AsnTaskGetEntryCountResult_Converter, handler, handler.onInvoke_asnTaskGetEntryCount, invokeContext);
			case OperationIDs.OPID_asnTaskAddEntry:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnTaskAddEntry, ENetUC_Tasks.AsnTaskAddEntryArgument, Converter.AsnTaskAddEntryArgument_Converter, Converter.AsnTaskAddEntryResult_Converter, handler, handler.onInvoke_asnTaskAddEntry, invokeContext);
			case OperationIDs.OPID_asnTaskRemoveEntries:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnTaskRemoveEntries, ENetUC_Tasks.AsnTaskRemoveEntriesArgument, Converter.AsnTaskRemoveEntriesArgument_Converter, Converter.AsnTaskRemoveEntriesResult_Converter, handler, handler.onInvoke_asnTaskRemoveEntries, invokeContext);
			case OperationIDs.OPID_asnTaskModifyEntries:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnTaskModifyEntries, ENetUC_Tasks.AsnTaskModifyEntriesArgument, Converter.AsnTaskModifyEntriesArgument_Converter, Converter.AsnTaskModifyEntriesResult_Converter, handler, handler.onInvoke_asnTaskModifyEntries, invokeContext);
			case OperationIDs.OPID_asnTaskSetEntriesState:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnTaskSetEntriesState, ENetUC_Tasks.AsnTaskSetEntriesStateArgument, Converter.AsnTaskSetEntriesStateArgument_Converter, Converter.AsnTaskSetEntriesStateResult_Converter, handler, handler.onInvoke_asnTaskSetEntriesState, invokeContext);
			case OperationIDs.OPID_asnTaskDelegateEntries:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnTaskDelegateEntries, ENetUC_Tasks.AsnTaskDelegateEntriesArgument, Converter.AsnTaskDelegateEntriesArgument_Converter, Converter.AsnTaskDelegateEntriesResult_Converter, handler, handler.onInvoke_asnTaskDelegateEntries, invokeContext);
			case OperationIDs.OPID_asnTaskSetEntriesReminder:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnTaskSetEntriesReminder, ENetUC_Tasks.AsnTaskSetEntriesReminderArgument, Converter.AsnTaskSetEntriesReminderArgument_Converter, Converter.AsnTaskSetEntriesReminderResult_Converter, handler, handler.onInvoke_asnTaskSetEntriesReminder, invokeContext);
			case OperationIDs.OPID_asnTaskItemsModified:
			case OperationIDs.OPID_asnTaskItemsAdded:
			case OperationIDs.OPID_asnTaskItemsRemoved:
			case OperationIDs.OPID_asnTasksReload:
				return this.onEvent(invoke, invokeContext, handler);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_TasksROSE`);
		}
	}

	// [PrintTSROSEOnEventSwitchCase]
	/**
	 * This is the onEvent method that is called whenever an event is called in this module.
	 * It is called from the onInvoke in case of an event is being called.
	 * Depending on the handleEvents flag the event is either handled or cached.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the method in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled or undefined
	 */
	private async onEvent(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_TasksROSE_Handler): Promise<ROSEReject | undefined> {
		// If the class says do not handle events and the override flag in the invokeContext has not been set, add the event to the que, otherwise we dispatch it
		if (!this.handleEvents && !invokeContext?.handleEvent) {
			this.transport.log(ELogSeverity.debug, "Adding event to queue", "onEvent", this, { operationName: invoke.operationName, operationID: invoke.operationID });
			this.cachedEvents.push({ invoke, invokeContext, handler });
			return;
		}

		switch (invoke.operationID) {
			case OperationIDs.OPID_asnTaskItemsModified:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnTaskItemsModified, ENetUC_Tasks.AsnTaskItemsModifiedArgument, Converter.AsnTaskItemsModifiedArgument_Converter, handler, handler.onEvent_asnTaskItemsModified, invokeContext);
			case OperationIDs.OPID_asnTaskItemsAdded:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnTaskItemsAdded, ENetUC_Tasks.AsnTaskItemsAddedArgument, Converter.AsnTaskItemsAddedArgument_Converter, handler, handler.onEvent_asnTaskItemsAdded, invokeContext);
			case OperationIDs.OPID_asnTaskItemsRemoved:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnTaskItemsRemoved, ENetUC_Tasks.AsnTaskItemsRemovedArgument, Converter.AsnTaskItemsRemovedArgument_Converter, handler, handler.onEvent_asnTaskItemsRemoved, invokeContext);
			case OperationIDs.OPID_asnTasksReload:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnTasksReload, ENetUC_Tasks.AsnTasksReloadArgument, Converter.AsnTasksReloadArgument_Converter, handler, handler.onEvent_asnTasksReload, invokeContext);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_TasksROSE`);
		}
	}
}
