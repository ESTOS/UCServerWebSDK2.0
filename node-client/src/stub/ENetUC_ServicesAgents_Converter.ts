// [PrintTSConverterCode]
// [PrintTSConverterComments]
/*
 * ENetUC_ServicesAgents_Converter.ts
 * "UC-Server-Access-Protocol-AgentServices" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */

// [PrintTSConverterImports]
import { ConverterError, ConverterErrorType, ConverterErrors, TSConverter, IDecodeContext, IEncodeContext, INamedType } from "./TSConverterBase";
import * as ENetUC_ServicesAgents from "./ENetUC_ServicesAgents";
// [PrintTSImports]
import * as asn1ts from "@estos/asn1ts";
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_ServicesAgents_Converter";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSEncoderDecoderCode]
export class AsnAgentACDLoginData_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnAgentACDLoginData, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnAgentACDLoginData & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAgentACDLoginData");

		const t = {} as ENetUC_ServicesAgents.AsnAgentACDLoginData & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAgentACDLoginData";
		TSConverter.fillJSONParam(s, t, "u8sAgentID", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sGroupID", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sPassword", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sDeviceID", "string", errors, newContext);

		if (errors.validateResult(newContext, "AsnAgentACDLoginData"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnAgentACDLoginData | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAgentACDLoginData");

		let t: ENetUC_ServicesAgents.AsnAgentACDLoginData | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnAgentACDLoginData>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnAgentACDLoginData["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sAgentID", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sGroupID", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sPassword", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sDeviceID", "string", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnAgentACDLoginData"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnAgentACDLoginData | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAgentACDLoginData";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAgentACDLoginData");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sAgentID", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sGroupID", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sPassword", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sDeviceID", "string", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sAgentID, name: "u8sAgentID" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sGroupID, name: "u8sGroupID" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sPassword, name: "u8sPassword" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sDeviceID, name: "u8sDeviceID" }));
		}

		if (errors.validateResult(newContext, "AsnAgentACDLoginData"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnAgentACDLoginData | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAgentACDLoginData");

		let t: ENetUC_ServicesAgents.AsnAgentACDLoginData | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnAgentACDLoginData.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnAgentACDLoginData["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sAgentID", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sGroupID", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sPassword", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sDeviceID", "Utf8String", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnAgentACDLoginData"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnServiceAgent_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnServiceAgent, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnServiceAgent & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnServiceAgent");

		const t = {} as ENetUC_ServicesAgents.AsnServiceAgent & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnServiceAgent";
		TSConverter.fillJSONParam(s, t, "u8sGroupID", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sAgentID", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sAgentDisplayName", "string", errors, newContext, true);
		TSConverter.fillJSONParam(s, t, "iAgentState", "number", errors, newContext, true);
		TSConverter.fillJSONParam(s, t, "iPossibleAgentStates", "number", errors, newContext, true);
		TSConverter.fillJSONParam(s, t, "iRequiredLoginLogoutParams", "number", errors, newContext, true);

		if (errors.validateResult(newContext, "AsnServiceAgent"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnServiceAgent | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnServiceAgent");

		let t: ENetUC_ServicesAgents.AsnServiceAgent | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnServiceAgent>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnServiceAgent["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sGroupID", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sAgentID", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sAgentDisplayName", "string", errors, newContext, true);
			TSConverter.fillJSONParam(s, t, "iAgentState", "number", errors, newContext, true);
			TSConverter.fillJSONParam(s, t, "iPossibleAgentStates", "number", errors, newContext, true);
			TSConverter.fillJSONParam(s, t, "iRequiredLoginLogoutParams", "number", errors, newContext, true);
		}

		if (errors.validateResult(newContext, "AsnServiceAgent"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnServiceAgent | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnServiceAgent";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnServiceAgent");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sGroupID", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sAgentID", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sAgentDisplayName", "string", errors, newContext, true);
		TSConverter.validateParam(s, "iAgentState", "number", errors, newContext, true);
		TSConverter.validateParam(s, "iPossibleAgentStates", "number", errors, newContext, true);
		TSConverter.validateParam(s, "iRequiredLoginLogoutParams", "number", errors, newContext, true);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sGroupID, name: "u8sGroupID" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sAgentID, name: "u8sAgentID" }));
			if (s.u8sAgentDisplayName !== undefined)
				t.push(new asn1ts.Utf8String({ value: s.u8sAgentDisplayName, name: "u8sAgentDisplayName", idBlock: { optionalID: 0 } }));
			if (s.iAgentState !== undefined)
				t.push(new asn1ts.Integer({ value: s.iAgentState, name: "iAgentState", idBlock: { optionalID: 1 } }));
			if (s.iPossibleAgentStates !== undefined)
				t.push(new asn1ts.Integer({ value: s.iPossibleAgentStates, name: "iPossibleAgentStates", idBlock: { optionalID: 2 } }));
			if (s.iRequiredLoginLogoutParams !== undefined)
				t.push(new asn1ts.Integer({ value: s.iRequiredLoginLogoutParams, name: "iRequiredLoginLogoutParams", idBlock: { optionalID: 3 } }));
		}

		if (errors.validateResult(newContext, "AsnServiceAgent"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnServiceAgent | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnServiceAgent");

		let t: ENetUC_ServicesAgents.AsnServiceAgent | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnServiceAgent.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnServiceAgent["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sGroupID", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sAgentID", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sAgentDisplayName", "Utf8String", errors, newContext, true);
			TSConverter.fillASN1Param(s, t, "iAgentState", "Integer", errors, newContext, true);
			TSConverter.fillASN1Param(s, t, "iPossibleAgentStates", "Integer", errors, newContext, true);
			TSConverter.fillASN1Param(s, t, "iRequiredLoginLogoutParams", "Integer", errors, newContext, true);
		}

		if (errors.validateResult(newContext, "AsnServiceAgent"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnRegisterServiceAgentsResult_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRegisterServiceAgentsResult");

		const t = {} as ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnRegisterServiceAgentsResult";
		TSConverter.fillJSONParam(s, t, "u8sServiceID", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnRegisterServiceAgentsResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRegisterServiceAgentsResult");

		let t: ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sServiceID", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnRegisterServiceAgentsResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnRegisterServiceAgentsResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRegisterServiceAgentsResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sServiceID", "string", errors, newContext);
		TSConverter.validateParam(s, "bSuccess", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sServiceID, name: "u8sServiceID" }));
			t.push(new asn1ts.Boolean({ value: s.bSuccess, name: "bSuccess" }));
		}

		if (errors.validateResult(newContext, "AsnRegisterServiceAgentsResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRegisterServiceAgentsResult");

		let t: ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sServiceID", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "bSuccess", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnRegisterServiceAgentsResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnUnregisterServiceAgentsResult_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUnregisterServiceAgentsResult");

		const t = {} as ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnUnregisterServiceAgentsResult";
		TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext);

		if (errors.validateResult(newContext, "AsnUnregisterServiceAgentsResult"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUnregisterServiceAgentsResult");

		let t: ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "bSuccess", "boolean", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnUnregisterServiceAgentsResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnUnregisterServiceAgentsResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUnregisterServiceAgentsResult");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "bSuccess", "boolean", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Boolean({ value: s.bSuccess, name: "bSuccess" }));
		}

		if (errors.validateResult(newContext, "AsnUnregisterServiceAgentsResult"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUnregisterServiceAgentsResult");

		let t: ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "bSuccess", "Boolean", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnUnregisterServiceAgentsResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnServiceAgentStateFailedReason_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnServiceAgentStateFailedReason");

		const t = {} as ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnServiceAgentStateFailedReason";
		TSConverter.fillJSONParam(s, t, "u8sServiceAgentID", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iFailedReason", "number", errors, newContext);

		if (errors.validateResult(newContext, "AsnServiceAgentStateFailedReason"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnServiceAgentStateFailedReason");

		let t: ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sServiceAgentID", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iFailedReason", "number", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnServiceAgentStateFailedReason"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnServiceAgentStateFailedReason";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnServiceAgentStateFailedReason");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sServiceAgentID", "string", errors, newContext);
		TSConverter.validateParam(s, "iFailedReason", "number", errors, newContext);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sServiceAgentID, name: "u8sServiceAgentID" }));
			t.push(new asn1ts.Integer({ value: s.iFailedReason, name: "iFailedReason" }));
		}

		if (errors.validateResult(newContext, "AsnServiceAgentStateFailedReason"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnServiceAgentStateFailedReason");

		let t: ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnServiceAgentStateFailedReason["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sServiceAgentID", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iFailedReason", "Integer", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnServiceAgentStateFailedReason"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnServiceAgentList_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnServiceAgentList, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnServiceAgentList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnServiceAgentList");

		const t = [] as ENetUC_ServicesAgents.AsnServiceAgentList;

		// [Print_JSON_EncoderSetOfDefCode]
		for (const id in s) {
			const se = s[id];
			if (se === undefined)
				continue;
			const val = AsnServiceAgent_Converter.toJSON(se, errors, newContext, "AsnServiceAgent");
			if (val)
				t.push(val);
		}

		if (errors.validateResult(newContext, "AsnServiceAgentList"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnServiceAgentList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnServiceAgentList");

		let t: ENetUC_ServicesAgents.AsnServiceAgentList | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnServiceAgentList>(data, errors, newContext, optional);
		if (s) {
			t = new ENetUC_ServicesAgents.AsnServiceAgentList();
			// [Print_JSON_DecoderSetOfDefCode]
			for (const id in s) {
				const se = s[id];
				if (se === undefined)
					continue;
				const val = AsnServiceAgent_Converter.fromJSON(se, errors, newContext, "AsnServiceAgent", false);
				if (val)
					t.push(val);
			}
		}

		if (errors.validateResult(newContext, "AsnServiceAgentList"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnServiceAgentList | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnServiceAgentList";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnServiceAgentList");

		// [Print_BER_EncoderSetOfDefCode]
		for (const id in s) {
			const val = AsnServiceAgent_Converter.toBER(s[id], errors, newContext, "AsnServiceAgent");
			if (val)
				t.push(val);
		}


		if (errors.validateResult(newContext, "AsnServiceAgentList"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnServiceAgentList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnServiceAgentList");

		let t: ENetUC_ServicesAgents.AsnServiceAgentList | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnServiceAgentList.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = new ENetUC_ServicesAgents.AsnServiceAgentList();
			// [Print_BER_DecoderSetOfDefCode]
			for (const se of s.valueBlock.value) {
				if (asn1ts.Sequence.typeGuard(se)) {
					const val = AsnServiceAgent_Converter.fromBER(se, errors, newContext, "AsnServiceAgent", optional);
					if (val)
						t.push(val);
				} else
					errors.push(new ConverterError(ConverterErrorType.PROPERTY_TYPEMISMATCH, newContext.context, "wrong type"));
			}
		}

		if (errors.validateResult(newContext, "AsnServiceAgentList"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnRegisterServiceAgentsArgument_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRegisterServiceAgentsArgument");

		const t = {} as ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnRegisterServiceAgentsArgument";
		TSConverter.fillJSONParam(s, t, "u8sServiceID", "string", errors, newContext);
		const _listAgents = AsnServiceAgentList_Converter.toJSON(s.listAgents, errors, newContext, "listAgents");
		if (_listAgents)
			t.listAgents = _listAgents;
		TSConverter.fillJSONParam(s, t, "bClearExistingAgents", "boolean", errors, newContext, true);

		if (errors.validateResult(newContext, "AsnRegisterServiceAgentsArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRegisterServiceAgentsArgument");

		let t: ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sServiceID", "string", errors, newContext, false);
			const _listagents = AsnServiceAgentList_Converter.fromJSON(s.listAgents, errors, newContext, "listAgents", false);
			if (_listagents)
				t.listAgents = _listagents;
			TSConverter.fillJSONParam(s, t, "bClearExistingAgents", "boolean", errors, newContext, true);
		}

		if (errors.validateResult(newContext, "AsnRegisterServiceAgentsArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnRegisterServiceAgentsArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRegisterServiceAgentsArgument");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sServiceID", "string", errors, newContext);
		const _listAgents = AsnServiceAgentList_Converter.toBER(s.listAgents, errors, newContext, "listAgents");
		TSConverter.validateParam(s, "bClearExistingAgents", "boolean", errors, newContext, true);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sServiceID, name: "u8sServiceID" }));
			if (_listAgents)
				t.push(_listAgents);
			if (s.bClearExistingAgents !== undefined)
				t.push(new asn1ts.Boolean({ value: s.bClearExistingAgents, name: "bClearExistingAgents", idBlock: { optionalID: 0 } }));
		}

		if (errors.validateResult(newContext, "AsnRegisterServiceAgentsArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRegisterServiceAgentsArgument");

		let t: ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sServiceID", "Utf8String", errors, newContext);
			const _listagents = AsnServiceAgentList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "listAgents"), errors, newContext, "listAgents");
			if (_listagents)
				t.listAgents = _listagents;
			TSConverter.fillASN1Param(s, t, "bClearExistingAgents", "Boolean", errors, newContext, true);
		}

		if (errors.validateResult(newContext, "AsnRegisterServiceAgentsArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnUnregisterServiceAgentsArgument_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUnregisterServiceAgentsArgument");

		const t = {} as ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnUnregisterServiceAgentsArgument";
		TSConverter.fillJSONParam(s, t, "u8sServiceID", "string", errors, newContext);
		const _listAgents = AsnServiceAgentList_Converter.toJSON(s.listAgents, errors, newContext, "listAgents");
		if (_listAgents)
			t.listAgents = _listAgents;
		TSConverter.fillJSONParam(s, t, "bClearExistingAgents", "boolean", errors, newContext, true);

		if (errors.validateResult(newContext, "AsnUnregisterServiceAgentsArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUnregisterServiceAgentsArgument");

		let t: ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sServiceID", "string", errors, newContext, false);
			const _listagents = AsnServiceAgentList_Converter.fromJSON(s.listAgents, errors, newContext, "listAgents", false);
			if (_listagents)
				t.listAgents = _listagents;
			TSConverter.fillJSONParam(s, t, "bClearExistingAgents", "boolean", errors, newContext, true);
		}

		if (errors.validateResult(newContext, "AsnUnregisterServiceAgentsArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnUnregisterServiceAgentsArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnUnregisterServiceAgentsArgument");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sServiceID", "string", errors, newContext);
		const _listAgents = AsnServiceAgentList_Converter.toBER(s.listAgents, errors, newContext, "listAgents");
		TSConverter.validateParam(s, "bClearExistingAgents", "boolean", errors, newContext, true);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sServiceID, name: "u8sServiceID" }));
			if (_listAgents)
				t.push(_listAgents);
			if (s.bClearExistingAgents !== undefined)
				t.push(new asn1ts.Boolean({ value: s.bClearExistingAgents, name: "bClearExistingAgents", idBlock: { optionalID: 0 } }));
		}

		if (errors.validateResult(newContext, "AsnUnregisterServiceAgentsArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnUnregisterServiceAgentsArgument");

		let t: ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sServiceID", "Utf8String", errors, newContext);
			const _listagents = AsnServiceAgentList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "listAgents"), errors, newContext, "listAgents");
			if (_listagents)
				t.listAgents = _listagents;
			TSConverter.fillASN1Param(s, t, "bClearExistingAgents", "Boolean", errors, newContext, true);
		}

		if (errors.validateResult(newContext, "AsnUnregisterServiceAgentsArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnSetServiceAgentStatesArgument_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnSetServiceAgentStatesArgument");

		const t = {} as ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnSetServiceAgentStatesArgument";
		const _listServiceAgentStates = AsnServiceAgentList_Converter.toJSON(s.listServiceAgentStates, errors, newContext, "listServiceAgentStates");
		if (_listServiceAgentStates)
			t.listServiceAgentStates = _listServiceAgentStates;

		if (errors.validateResult(newContext, "AsnSetServiceAgentStatesArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnSetServiceAgentStatesArgument");

		let t: ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _listserviceagentstates = AsnServiceAgentList_Converter.fromJSON(s.listServiceAgentStates, errors, newContext, "listServiceAgentStates", false);
			if (_listserviceagentstates)
				t.listServiceAgentStates = _listserviceagentstates;
		}

		if (errors.validateResult(newContext, "AsnSetServiceAgentStatesArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnSetServiceAgentStatesArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnSetServiceAgentStatesArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _listServiceAgentStates = AsnServiceAgentList_Converter.toBER(s.listServiceAgentStates, errors, newContext, "listServiceAgentStates");
		if (!errors.hasNewErrors()) {
			if (_listServiceAgentStates)
				t.push(_listServiceAgentStates);
		}

		if (errors.validateResult(newContext, "AsnSetServiceAgentStatesArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnSetServiceAgentStatesArgument");

		let t: ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _listserviceagentstates = AsnServiceAgentList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "listServiceAgentStates"), errors, newContext, "listServiceAgentStates");
			if (_listserviceagentstates)
				t.listServiceAgentStates = _listserviceagentstates;
		}

		if (errors.validateResult(newContext, "AsnSetServiceAgentStatesArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnServiceAgentStateFailedReasonList_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnServiceAgentStateFailedReasonList");

		const t = [] as ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList;

		// [Print_JSON_EncoderSetOfDefCode]
		for (const id in s) {
			const se = s[id];
			if (se === undefined)
				continue;
			const val = AsnServiceAgentStateFailedReason_Converter.toJSON(se, errors, newContext, "AsnServiceAgentStateFailedReason");
			if (val)
				t.push(val);
		}

		if (errors.validateResult(newContext, "AsnServiceAgentStateFailedReasonList"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnServiceAgentStateFailedReasonList");

		let t: ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList>(data, errors, newContext, optional);
		if (s) {
			t = new ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList();
			// [Print_JSON_DecoderSetOfDefCode]
			for (const id in s) {
				const se = s[id];
				if (se === undefined)
					continue;
				const val = AsnServiceAgentStateFailedReason_Converter.fromJSON(se, errors, newContext, "AsnServiceAgentStateFailedReason", false);
				if (val)
					t.push(val);
			}
		}

		if (errors.validateResult(newContext, "AsnServiceAgentStateFailedReasonList"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnServiceAgentStateFailedReasonList";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnServiceAgentStateFailedReasonList");

		// [Print_BER_EncoderSetOfDefCode]
		for (const id in s) {
			const val = AsnServiceAgentStateFailedReason_Converter.toBER(s[id], errors, newContext, "AsnServiceAgentStateFailedReason");
			if (val)
				t.push(val);
		}


		if (errors.validateResult(newContext, "AsnServiceAgentStateFailedReasonList"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnServiceAgentStateFailedReasonList");

		let t: ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = new ENetUC_ServicesAgents.AsnServiceAgentStateFailedReasonList();
			// [Print_BER_DecoderSetOfDefCode]
			for (const se of s.valueBlock.value) {
				if (asn1ts.Sequence.typeGuard(se)) {
					const val = AsnServiceAgentStateFailedReason_Converter.fromBER(se, errors, newContext, "AsnServiceAgentStateFailedReason", optional);
					if (val)
						t.push(val);
				} else
					errors.push(new ConverterError(ConverterErrorType.PROPERTY_TYPEMISMATCH, newContext.context, "wrong type"));
			}
		}

		if (errors.validateResult(newContext, "AsnServiceAgentStateFailedReasonList"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnResponseSetServiceAgentStatesFailedArgument_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnResponseSetServiceAgentStatesFailedArgument");

		const t = {} as ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnResponseSetServiceAgentStatesFailedArgument";
		const _listServiceAgentStates = AsnServiceAgentStateFailedReasonList_Converter.toJSON(s.listServiceAgentStates, errors, newContext, "listServiceAgentStates");
		if (_listServiceAgentStates)
			t.listServiceAgentStates = _listServiceAgentStates;

		if (errors.validateResult(newContext, "AsnResponseSetServiceAgentStatesFailedArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnResponseSetServiceAgentStatesFailedArgument");

		let t: ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _listserviceagentstates = AsnServiceAgentStateFailedReasonList_Converter.fromJSON(s.listServiceAgentStates, errors, newContext, "listServiceAgentStates", false);
			if (_listserviceagentstates)
				t.listServiceAgentStates = _listserviceagentstates;
		}

		if (errors.validateResult(newContext, "AsnResponseSetServiceAgentStatesFailedArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnResponseSetServiceAgentStatesFailedArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnResponseSetServiceAgentStatesFailedArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _listServiceAgentStates = AsnServiceAgentStateFailedReasonList_Converter.toBER(s.listServiceAgentStates, errors, newContext, "listServiceAgentStates");
		if (!errors.hasNewErrors()) {
			if (_listServiceAgentStates)
				t.push(_listServiceAgentStates);
		}

		if (errors.validateResult(newContext, "AsnResponseSetServiceAgentStatesFailedArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnResponseSetServiceAgentStatesFailedArgument");

		let t: ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _listserviceagentstates = AsnServiceAgentStateFailedReasonList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "listServiceAgentStates"), errors, newContext, "listServiceAgentStates");
			if (_listserviceagentstates)
				t.listServiceAgentStates = _listserviceagentstates;
		}

		if (errors.validateResult(newContext, "AsnResponseSetServiceAgentStatesFailedArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnRequestServiceAgentStateChangeArgument_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRequestServiceAgentStateChangeArgument");

		const t = {} as ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnRequestServiceAgentStateChangeArgument";
		const _serviceAgentState = AsnServiceAgent_Converter.toJSON(s.serviceAgentState, errors, newContext, "serviceAgentState");
		if (_serviceAgentState)
			t.serviceAgentState = _serviceAgentState;

		if (errors.validateResult(newContext, "AsnRequestServiceAgentStateChangeArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRequestServiceAgentStateChangeArgument");

		let t: ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _serviceagentstate = AsnServiceAgent_Converter.fromJSON(s.serviceAgentState, errors, newContext, "serviceAgentState", false);
			if (_serviceagentstate)
				t.serviceAgentState = _serviceagentstate;
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentStateChangeArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnRequestServiceAgentStateChangeArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRequestServiceAgentStateChangeArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _serviceAgentState = AsnServiceAgent_Converter.toBER(s.serviceAgentState, errors, newContext, "serviceAgentState");
		if (!errors.hasNewErrors()) {
			if (_serviceAgentState)
				t.push(_serviceAgentState);
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentStateChangeArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRequestServiceAgentStateChangeArgument");

		let t: ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _serviceagentstate = AsnServiceAgent_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "serviceAgentState"), errors, newContext, "serviceAgentState");
			if (_serviceagentstate)
				t.serviceAgentState = _serviceagentstate;
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentStateChangeArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnRequestServiceAgentLoginArgument_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRequestServiceAgentLoginArgument");

		const t = {} as ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnRequestServiceAgentLoginArgument";
		const _serviceAgentState = AsnServiceAgent_Converter.toJSON(s.serviceAgentState, errors, newContext, "serviceAgentState");
		if (_serviceAgentState)
			t.serviceAgentState = _serviceAgentState;
		const _loginParameter = AsnAgentACDLoginData_Converter.toJSON(s.loginParameter, errors, newContext, "loginParameter");
		if (_loginParameter)
			t.loginParameter = _loginParameter;

		if (errors.validateResult(newContext, "AsnRequestServiceAgentLoginArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRequestServiceAgentLoginArgument");

		let t: ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _serviceagentstate = AsnServiceAgent_Converter.fromJSON(s.serviceAgentState, errors, newContext, "serviceAgentState", false);
			if (_serviceagentstate)
				t.serviceAgentState = _serviceagentstate;
			const _loginparameter = AsnAgentACDLoginData_Converter.fromJSON(s.loginParameter, errors, newContext, "loginParameter", false);
			if (_loginparameter)
				t.loginParameter = _loginparameter;
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentLoginArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnRequestServiceAgentLoginArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRequestServiceAgentLoginArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _serviceAgentState = AsnServiceAgent_Converter.toBER(s.serviceAgentState, errors, newContext, "serviceAgentState");
		const _loginParameter = AsnAgentACDLoginData_Converter.toBER(s.loginParameter, errors, newContext, "loginParameter");
		if (!errors.hasNewErrors()) {
			if (_serviceAgentState)
				t.push(_serviceAgentState);
			if (_loginParameter)
				t.push(_loginParameter);
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentLoginArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRequestServiceAgentLoginArgument");

		let t: ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _serviceagentstate = AsnServiceAgent_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "serviceAgentState"), errors, newContext, "serviceAgentState");
			if (_serviceagentstate)
				t.serviceAgentState = _serviceagentstate;
			const _loginparameter = AsnAgentACDLoginData_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "loginParameter"), errors, newContext, "loginParameter");
			if (_loginparameter)
				t.loginParameter = _loginparameter;
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentLoginArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnRequestServiceAgentLogoutArgument_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRequestServiceAgentLogoutArgument");

		const t = {} as ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnRequestServiceAgentLogoutArgument";
		const _serviceAgentState = AsnServiceAgent_Converter.toJSON(s.serviceAgentState, errors, newContext, "serviceAgentState");
		if (_serviceAgentState)
			t.serviceAgentState = _serviceAgentState;
		TSConverter.fillJSONParam(s, t, "u8sLogoutData", "string", errors, newContext);

		if (errors.validateResult(newContext, "AsnRequestServiceAgentLogoutArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRequestServiceAgentLogoutArgument");

		let t: ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _serviceagentstate = AsnServiceAgent_Converter.fromJSON(s.serviceAgentState, errors, newContext, "serviceAgentState", false);
			if (_serviceagentstate)
				t.serviceAgentState = _serviceagentstate;
			TSConverter.fillJSONParam(s, t, "u8sLogoutData", "string", errors, newContext, false);
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentLogoutArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnRequestServiceAgentLogoutArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRequestServiceAgentLogoutArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _serviceAgentState = AsnServiceAgent_Converter.toBER(s.serviceAgentState, errors, newContext, "serviceAgentState");
		TSConverter.validateParam(s, "u8sLogoutData", "string", errors, newContext);
		if (!errors.hasNewErrors()) {
			if (_serviceAgentState)
				t.push(_serviceAgentState);
			t.push(new asn1ts.Utf8String({ value: s.u8sLogoutData, name: "u8sLogoutData" }));
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentLogoutArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRequestServiceAgentLogoutArgument");

		let t: ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _serviceagentstate = AsnServiceAgent_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "serviceAgentState"), errors, newContext, "serviceAgentState");
			if (_serviceagentstate)
				t.serviceAgentState = _serviceagentstate;
			TSConverter.fillASN1Param(s, t, "u8sLogoutData", "Utf8String", errors, newContext);
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentLogoutArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnRequestServiceAgentsStatusUpdateArgument_Converter {
	public static toJSON(s: ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRequestServiceAgentsStatusUpdateArgument");

		const t = {} as ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnRequestServiceAgentsStatusUpdateArgument";
		const _listServiceAgents = AsnServiceAgentList_Converter.toJSON(s.listServiceAgents, errors, newContext, "listServiceAgents");
		if (_listServiceAgents)
			t.listServiceAgents = _listServiceAgents;

		if (errors.validateResult(newContext, "AsnRequestServiceAgentsStatusUpdateArgument"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRequestServiceAgentsStatusUpdateArgument");

		let t: ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			const _listserviceagents = AsnServiceAgentList_Converter.fromJSON(s.listServiceAgents, errors, newContext, "listServiceAgents", false);
			if (_listserviceagents)
				t.listServiceAgents = _listserviceagents;
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentsStatusUpdateArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnRequestServiceAgentsStatusUpdateArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnRequestServiceAgentsStatusUpdateArgument");

		// [Print_BER_EncoderSeqDefCode]
		const _listServiceAgents = AsnServiceAgentList_Converter.toBER(s.listServiceAgents, errors, newContext, "listServiceAgents");
		if (!errors.hasNewErrors()) {
			if (_listServiceAgents)
				t.push(_listServiceAgents);
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentsStatusUpdateArgument"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnRequestServiceAgentsStatusUpdateArgument");

		let t: ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			const _listserviceagents = AsnServiceAgentList_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "listServiceAgents"), errors, newContext, "listServiceAgents");
			if (_listserviceagents)
				t.listServiceAgents = _listserviceagents;
		}

		if (errors.validateResult(newContext, "AsnRequestServiceAgentsStatusUpdateArgument"))
			return t;

		return undefined;
	}
}
