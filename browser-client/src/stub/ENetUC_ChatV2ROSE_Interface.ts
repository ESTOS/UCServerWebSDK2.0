// [PrintTSROSEInterfaceCode]
// [PrintTSROSEHeader]
/**
 * ENetUC_ChatV2ROSE_Interface
 * "UC-Server-Access-Protocol-ChatV2" ASN.1 interfaces.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImport]
import { IReceiveInvokeContext, AsnInvokeProblem } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_ChatV2 from "./ENetUC_ChatV2";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Journal from "./ENetUC_Journal";
import * as ENetUC_BinaryTransfer from "./ENetUC_BinaryTransfer";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_ChatV2ROSEInterface";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEInterface]
export interface IENetUC_ChatV2ROSE {
	invoke_asnChatSubscribeEvents(argument: ENetUC_ChatV2.AsnChatSubscribeEventsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSubscribeEventsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatGetDatabaseID(argument: ENetUC_ChatV2.AsnChatGetDatabaseIDArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetDatabaseIDResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatGetDiffUpdate(argument: ENetUC_ChatV2.AsnChatGetDiffUpdateArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetDiffUpdateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatGetConversationOverview(argument: ENetUC_ChatV2.AsnChatGetConversationOverviewArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetConversationOverviewResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatTextMessage(argument: ENetUC_ChatV2.AsnChatTextMessageArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatTextMessageResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatBinaryMessage(argument: ENetUC_ChatV2.AsnChatBinaryMessageArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatBinaryMessageResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatForwardMessage(argument: ENetUC_ChatV2.AsnChatForwardMessageArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatForwardMessageResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatUserlistModify(argument: ENetUC_ChatV2.AsnChatUserlistModifyArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatUserlistModifyResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatFindEvents(argument: ENetUC_ChatV2.AsnChatFindEventsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatFindEventsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatGetEventsRange(argument: ENetUC_ChatV2.AsnChatGetEventsRangeArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetEventsRangeResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatGetBinaryMessageEvents(argument: ENetUC_ChatV2.AsnChatGetBinaryMessageEventsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetBinaryMessageEventsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatSetMessagesStatus(argument: ENetUC_ChatV2.AsnChatSetMessagesStatusArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSetMessagesStatusResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatGetConversations(argument: ENetUC_ChatV2.AsnChatGetConversationsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetConversationsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatGetConversationID(argument: ENetUC_ChatV2.AsnChatGetConversationIDArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetConversationIDResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatForward(argument: ENetUC_ChatV2.AsnChatForwardArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatForwardResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatIsGlobalDisabled(argument: ENetUC_ChatV2.AsnChatIsGlobalDisabledArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatIsGlobalDisabledResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatWatchConversation(argument: ENetUC_ChatV2.AsnChatWatchConversationArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatWatchConversationResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatSetUserlist(argument: ENetUC_ChatV2.AsnChatSetUserlistArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSetUserlistResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnChatEvent(argument: ENetUC_ChatV2.AsnChatEventArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnChatUserStatus(argument: ENetUC_ChatV2.AsnChatUserStatusArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnChatDatabaseIDChanged(argument: ENetUC_ChatV2.AsnChatDatabaseIDChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnChatDatabaseMaintenance(argument: ENetUC_ChatV2.AsnChatDatabaseMaintenanceArgument, invokeContext?: ISendInvokeContextParams): void;
	invoke_asnChatMuteConversation(argument: ENetUC_ChatV2.AsnChatMuteConversationArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatMuteConversationResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatUnmuteConversation(argument: ENetUC_ChatV2.AsnChatUnmuteConversationArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatUnmuteConversationResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnChatMuteStatusChanged(argument: ENetUC_ChatV2.AsnChatMuteStatusChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	invoke_asnChatSetConversationAvatar(argument: ENetUC_ChatV2.AsnChatSetConversationAvatarArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSetConversationAvatarResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatGetConversationAvatar(argument: ENetUC_ChatV2.AsnChatGetConversationAvatarArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetConversationAvatarResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnChatConversationAvatarChanged(argument: ENetUC_ChatV2.AsnChatConversationAvatarChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	invoke_asnChatSetReaction(argument: ENetUC_ChatV2.AsnChatSetReactionArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSetReactionResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnChatClearReaction(argument: ENetUC_ChatV2.AsnChatSetReactionArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSetReactionResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
}

// [PrintTSROSEHandlerInterface]
// Contains all invokes of the interface (normally the server side)
export interface IENetUC_ChatV2ROSE_Invoke_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onInvoke_asnChatSubscribeEvents(argument: ENetUC_ChatV2.AsnChatSubscribeEventsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSubscribeEventsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatGetDatabaseID(argument: ENetUC_ChatV2.AsnChatGetDatabaseIDArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetDatabaseIDResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatGetDiffUpdate(argument: ENetUC_ChatV2.AsnChatGetDiffUpdateArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetDiffUpdateResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatGetConversationOverview(argument: ENetUC_ChatV2.AsnChatGetConversationOverviewArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetConversationOverviewResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatTextMessage(argument: ENetUC_ChatV2.AsnChatTextMessageArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatTextMessageResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatBinaryMessage(argument: ENetUC_ChatV2.AsnChatBinaryMessageArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatBinaryMessageResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatForwardMessage(argument: ENetUC_ChatV2.AsnChatForwardMessageArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatForwardMessageResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatUserlistModify(argument: ENetUC_ChatV2.AsnChatUserlistModifyArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatUserlistModifyResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatFindEvents(argument: ENetUC_ChatV2.AsnChatFindEventsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatFindEventsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatGetEventsRange(argument: ENetUC_ChatV2.AsnChatGetEventsRangeArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetEventsRangeResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatGetBinaryMessageEvents(argument: ENetUC_ChatV2.AsnChatGetBinaryMessageEventsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetBinaryMessageEventsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatSetMessagesStatus(argument: ENetUC_ChatV2.AsnChatSetMessagesStatusArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSetMessagesStatusResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatGetConversations(argument: ENetUC_ChatV2.AsnChatGetConversationsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetConversationsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatGetConversationID(argument: ENetUC_ChatV2.AsnChatGetConversationIDArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetConversationIDResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatForward(argument: ENetUC_ChatV2.AsnChatForwardArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatForwardResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatIsGlobalDisabled(argument: ENetUC_ChatV2.AsnChatIsGlobalDisabledArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatIsGlobalDisabledResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatWatchConversation(argument: ENetUC_ChatV2.AsnChatWatchConversationArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatWatchConversationResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatSetUserlist(argument: ENetUC_ChatV2.AsnChatSetUserlistArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSetUserlistResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatMuteConversation(argument: ENetUC_ChatV2.AsnChatMuteConversationArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatMuteConversationResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatUnmuteConversation(argument: ENetUC_ChatV2.AsnChatUnmuteConversationArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatUnmuteConversationResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatSetConversationAvatar(argument: ENetUC_ChatV2.AsnChatSetConversationAvatarArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSetConversationAvatarResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatGetConversationAvatar(argument: ENetUC_ChatV2.AsnChatGetConversationAvatarArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetConversationAvatarResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatSetReaction(argument: ENetUC_ChatV2.AsnChatSetReactionArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSetReactionResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnChatClearReaction(argument: ENetUC_ChatV2.AsnChatSetReactionArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSetReactionResult | ENetUC_Common.AsnRequestError | undefined>;
}

// Contains all events of the interface (normally the client side)
export interface IENetUC_ChatV2ROSE_Event_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnChatEvent(argument: ENetUC_ChatV2.AsnChatEventArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnChatUserStatus(argument: ENetUC_ChatV2.AsnChatUserStatusArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnChatDatabaseIDChanged(argument: ENetUC_ChatV2.AsnChatDatabaseIDChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnChatDatabaseMaintenance(argument: ENetUC_ChatV2.AsnChatDatabaseMaintenanceArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnChatMuteStatusChanged(argument: ENetUC_ChatV2.AsnChatMuteStatusChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnChatConversationAvatarChanged(argument: ENetUC_ChatV2.AsnChatConversationAvatarChangedArgument, invokeContext: IReceiveInvokeContext): void;
}

// Contains all invokes and events of the interface
export type IENetUC_ChatV2ROSE_Handler = IENetUC_ChatV2ROSE_Invoke_Handler & IENetUC_ChatV2ROSE_Event_Handler;

// [PrintTSROSEServerCopyPasteInterface]
/* Copy paste code for the import statement
import { IReceiveInvokeContext } from "./TSROSEBase";
import * as ENetUC_Common from "./ENetUC_Common";
import { ENetUC_ChatV2 } from "./ENetUC_ChatV2";
*/

/**
 * Allows to set the log context for an invoke.
 * This method is called in advanced of methods handled inside this handler
 * The idea is to implement a async local storage based on the provided data from the argument or invokeContext
 *
 * @param argument - the snacc rose argument
 * @param invokeContext - the invoke context
 */
/*
public setLogContext(argument: unknown, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Subscribe to chat notifications, get the changes
 *
 * Subscribing to chat events allows you to get the div of the last known transaction ID to the current one on the server
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatSubscribeEventsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatSubscribeEvents(argument: ENetUC_ChatV2.AsnChatSubscribeEventsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSubscribeEventsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Query the database ID
 *
 * Returns a unique ID of the database that clients can use to determine whether the server is using a new database.
 *
 * This can e.g. then be the case if the server database has been deleted.
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatGetDatabaseIDResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatGetDatabaseID(argument: ENetUC_ChatV2.AsnChatGetDatabaseIDArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetDatabaseIDResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Pick up changes, even for individual conversations
 *
 * Differential update with the last known TransactionID and ConversationID
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatGetDiffUpdateResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatGetDiffUpdate(argument: ENetUC_ChatV2.AsnChatGetDiffUpdateArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetDiffUpdateResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Overview of conversations
 *
 * Delivers new conversations with the last or unread messages in these conversations
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatGetConversationOverviewResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatGetConversationOverview(argument: ENetUC_ChatV2.AsnChatGetConversationOverviewArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetConversationOverviewResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Chat Text Send message
 *
 * Send new chat message
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatTextMessageResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatTextMessage(argument: ENetUC_ChatV2.AsnChatTextMessageArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatTextMessageResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Send chat binary message
 *
 * Send a new binary message to the server
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatBinaryMessageResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatBinaryMessage(argument: ENetUC_ChatV2.AsnChatBinaryMessageArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatBinaryMessageResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Forward a message
 *
 * Used to forward a single message to another user or to a chat room
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatForwardMessageResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatForwardMessage(argument: ENetUC_ChatV2.AsnChatForwardMessageArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatForwardMessageResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Add, remove, or forward chat to users
 *
 * Add or remove users In one-to-one chats you can signal \"leave\" by removing yourself.
 *
 * Add to a one-to-one chat creates a new multi-user chat, which then remains a multi-user chat.
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatUserlistModifyResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatUserlistModify(argument: ENetUC_ChatV2.AsnChatUserlistModifyArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatUserlistModifyResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Search chat events on server
 *
 * Searches for a search string in the chat text messages of the logged-in user and returns all events in which there was a match.
 * (!) With this search, the ProCall client also receives hits that match the contact details (e.g. first name, last name or email) of the sender of a message.
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatFindEventsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatFindEvents(argument: ENetUC_ChatV2.AsnChatFindEventsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatFindEventsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Chat Events Range vom Server holen
 *
 * Get messages for a ConversationID before or after a Sequence ID (paging).
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatGetEventsRangeResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatGetEventsRange(argument: ENetUC_ChatV2.AsnChatGetEventsRangeArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetEventsRangeResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Query BinaryMessageEvents which were sent or received from another user or in a certain conversation
 *
 * The following example shows how paging works. We assume the asnConversationIDChoice is the same for both requests. The Client gets the first ten events with the first request and the remaining seven events with the second request.
 * UML section is not exported to this file!
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatGetBinaryMessageEventsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatGetBinaryMessageEvents(argument: ENetUC_ChatV2.AsnChatGetBinaryMessageEventsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetBinaryMessageEventsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Set status of chat messages in the server
 *
 * Set status (e.g. mark read)
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatSetMessagesStatusResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatSetMessagesStatus(argument: ENetUC_ChatV2.AsnChatSetMessagesStatusArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSetMessagesStatusResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Get information about chat rooms
 *
 * Get information about chat rooms on the server (name, members, permissions, last message, etc.)
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatGetConversationsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatGetConversations(argument: ENetUC_ChatV2.AsnChatGetConversationsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetConversationsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Returns the ConversationID for a one-to-one chat
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatGetConversationIDResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatGetConversationID(argument: ENetUC_ChatV2.AsnChatGetConversationIDArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetConversationIDResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Forward a conversation
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatForwardResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatForward(argument: ENetUC_ChatV2.AsnChatForwardArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatForwardResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Query whether chat is deactivated globally
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatIsGlobalDisabledResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatIsGlobalDisabled(argument: ENetUC_ChatV2.AsnChatIsGlobalDisabledArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatIsGlobalDisabledResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * watching a public chat conversation room
 *
 * Receiving chat events for a public chat conversation room allows you to pick up the div of the last known ConvSequenceID for the current one on the server
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatWatchConversationResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatWatchConversation(argument: ENetUC_ChatV2.AsnChatWatchConversationArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatWatchConversationResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Change the list of participants in a public chat conversation room
 *
 * The list of participants in a public chat conversation room is completely replaced by the UserURIs transmitted in the request
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatSetUserlistResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatSetUserlist(argument: ENetUC_ChatV2.AsnChatSetUserlistArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSetUserlistResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * mute conversation for user - events are still dispatched, client should check on his site
 *
 * User wants to mute the conversation - events are still dispatched from UCServer, so client needs to adopt its logic about the stuff
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatMuteConversationResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatMuteConversation(argument: ENetUC_ChatV2.AsnChatMuteConversationArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatMuteConversationResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * unmute conversation for user
 *
 * User wants to unmute the conversation
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatUnmuteConversationResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatUnmuteConversation(argument: ENetUC_ChatV2.AsnChatUnmuteConversationArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatUnmuteConversationResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * set conversation avatar
 *
 * set avatar for conversationID - members will be informed by event
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatSetConversationAvatarResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatSetConversationAvatar(argument: ENetUC_ChatV2.AsnChatSetConversationAvatarArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSetConversationAvatarResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * get conversation avatar
 *
 * get avatar for conversationID - only relevant in group-chat context
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatGetConversationAvatarResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatGetConversationAvatar(argument: ENetUC_ChatV2.AsnChatGetConversationAvatarArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatGetConversationAvatarResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Set the reaction to a chat message for the calling user
 *
 * Set the reaction to a chat message for the calling user
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatSetReactionResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatSetReaction(argument: ENetUC_ChatV2.AsnChatSetReactionArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSetReactionResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * -
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnChatSetReactionResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnChatClearReaction(argument: ENetUC_ChatV2.AsnChatSetReactionArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ChatV2.AsnChatSetReactionResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * New events in a chat
 *
 * Notification to a client that a new event has taken place in a chat.
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnChatEvent(argument: ENetUC_ChatV2.AsnChatEventArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * New user status in a chat
 *
 * New user status in a chat (typing notification)
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnChatUserStatus(argument: ENetUC_ChatV2.AsnChatUserStatusArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Change of database ID
 *
 * Event is sent from the server to the client if the database ID changes at runtime.
 * This currently happens when the use of a database for chat in the server is switched off. Then one
 * In-memory database is used, but is deleted once a day to prevent it from being in memory
 * Accumulate conversations.
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnChatDatabaseIDChanged(argument: ENetUC_ChatV2.AsnChatDatabaseIDChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Change to the database through automatic maintenance (e.g. \"delete chats after X days\")
 *
 * Event is sent from the server to the clients if chat messages in the server database due to the function
 * \"Delete chat messages after X days\" will be deleted. The event contains a sequence ID up to which the deletion was carried out.
 * Clients can adapt existing caches accordingly. I.e. TextMessages that have a Sequence ID less than or equal to
 * have the ID specified in the event, must be deleted. The event is also sent to the client during the initial subscription.
 * The event is only sent to clients who subscribe to it with the optional parameter \"bSubscribeDBMaintenance\" = true
 * have requested.
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnChatDatabaseMaintenance(argument: ENetUC_ChatV2.AsnChatDatabaseMaintenanceArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * mute status of specific conversationid was changed
 *
 * Notification to a client that a mute state was changed
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnChatMuteStatusChanged(argument: ENetUC_ChatV2.AsnChatMuteStatusChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * events when conversation avatar was changed
 *
 * Notification to a client that a new (group-chat) avatar was changed - client might check his local hash or request new image via asnChatGetConversationAvatar
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnChatConversationAvatarChanged(argument: ENetUC_ChatV2.AsnChatConversationAvatarChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/
