// [PrintTSCodeOne]
// [PrintTSComments]
/*
 * ENetUC_Common_SIPCTI.ts
 * "UC-Server-Access-Protocol-SIPCTICommon" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
/**
 * Common interface definitions for SIP and CTI functionality
 * ## Module description
 * This module contains common usable strutures for the sip and cti interfaces.
 *
 * THERE SHOULD NOT BE ANY FUNCTION\/OPERATION DEFINTIONS IN THIS MODULE.
 */
// [PrintTSImports]
import * as asn1ts from "@estos/asn1ts";
import * as ENetUC_Common from "./ENetUC_Common";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_Common_SIPCTI";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum EnumProjectType {
	ePROJECTTYPEUNKNOWN = 0,
	ePROJECTTYPEPBX = 1,
	ePROJECTTYPEJOURNAL = 2,
	ePROJECTTYPEJOURNALPBX = 3,
	ePROJECTTYPEPBXPRIVATE = 4
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum EAsnJournalCallType {
	/** A CTI call */
	eCTICall = 0,
	/** Audio Chat (WebRTC based) (only video, no audio) */
	eVideoChat = 1,
	/** Video Chat (WebRTC based  (only audio, no video) */
	eAudioChat = 2,
	/** Video Chat (WebRTC based) (audio & video) */
	eAudioVideoChat = 3,
	/** an instant message */
	eIM = 4,
	/** Bluetooth coupled device phone call */
	eBluetoothMobile = 5,
	/** Bluetooth coupled device phone call - due to limitations the duration is unknown (1 second in journal) */
	eBluetoothMobileUnknownDuration = 6,
	/** A SIP call */
	eSipAVCall = 7,
	/** an sms */
	eSMS = 8,
	/** Screen\/Desktop Sharing (WebRTC based) */
	eScreenSharing = 9,
	/** A requested Screen\/Desktop Sharing (WebRTC based) */
	eRequestedScreenSharing = 10
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum EAsnCallState {
	/** unknown */
	unknown = 0,
	/** the call was destroyed, we did finally hang up */
	destroyed = 1,
	/** inbound ringing */
	offering = 2,
	/** dialtone outbound */
	dialing = 4,
	/** outbound, the destination is ringing, the number is complete */
	ringback = 8,
	/** outbound, destination is busy */
	busy = 16,
	/** we are connected (inbound and outbound) */
	connected = 32,
	/** call is party in a conference (we hold the conference) */
	conferenced = 64,
	/** call is hold */
	hold = 128,
	/** the destination did hangup, we hear the beep beep as the call has been teriminated on the other side */
	disconnected = 256,
	/** the call is in preparation, no phone action has been executed so far */
	preparecall = 512
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnContactPhoneLineType {
	iPHONENUMBERTYPEALL = -1,
	iPHONENUMBERTYPEUNKNOWN = 0,
	iPHONENUMBERTYPEPRIMARY = 1,
	iPHONENUMBERTYPESECONDARY = 2,
	iPHONENUMBERTYPEOTHEROWNNUMBER = 3
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum EnumSTUNandTURNType {
	eSTUN = 1,
	eTURN = 2
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Description of a project or pin used in the PBX.
 * Some PBX support the use of special numbers as prefix\/postfix to dialing numbers to implement project
 * features. This sequence\/object conatins the neccassary information to complete or format phone numbers according these rules.
 */
export class AsnProjectPinRule {
	public constructor(that: AsnProjectPinRule) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnProjectPinRule {
		return new AsnProjectPinRule({
			u8sProjectName: "",
			u8sProjectPin: "",
			iProjectType: 0,
			bAssociatedCallIsPrivateCall: false,
			u8sLocationID: "",
			u8sUserEnteredPin: "",
			u8sUserEnteredUserID: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sProjectName",
			"u8sProjectPin",
			"iProjectType",
			"bAssociatedCallIsPrivateCall",
			"u8sLocationID",
			"u8sUserEnteredPin",
			"u8sUserEnteredUserID"
		];
		return p;
	}

	public static type = "AsnProjectPinRule";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnProjectPinRule",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sProjectName" }),
				new asn1ts.Utf8String({ name: "u8sProjectPin" }),
				new asn1ts.Integer({ name: "iProjectType" }),
				new asn1ts.Boolean({ name: "bAssociatedCallIsPrivateCall" }),
				new asn1ts.Utf8String({ name: "u8sLocationID" }),
				new asn1ts.Utf8String({ name: "u8sUserEnteredPin" }),
				new asn1ts.Utf8String({ name: "u8sUserEnteredUserID" }),
				new asn1ts.Extension()
			]
		});
	}

	public u8sProjectName!: string;
	public u8sProjectPin!: string;
	public iProjectType!: number;
	public bAssociatedCallIsPrivateCall!: boolean;
	public u8sLocationID!: string;
	public u8sUserEnteredPin!: string;
	public u8sUserEnteredUserID!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Sequence describes credentials and\/or addresses of STUN\/TURN Servers.
 * See http:\/\/tools.ietf.org\/html\/draft-uberti-behave-turn-rest-00, mainly section 2.2 Response.
 * This sequence is used for both, STUN and TURN configurations.
 */
export class AsnConfigSTUNandTURN {
	public constructor(that: AsnConfigSTUNandTURN) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnConfigSTUNandTURN {
		return new AsnConfigSTUNandTURN({
			iType: 0,
			u8sUsername: "",
			u8sPassword: "",
			stValidTo: new Date(),
			listURIs: new ENetUC_Common.UTF8StringList(),
			iTTL: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iType",
			"u8sUsername",
			"u8sPassword",
			"stValidTo",
			"listURIs",
			"iTTL"
		];
		return p;
	}

	public static type = "AsnConfigSTUNandTURN";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnConfigSTUNandTURN",
			...params,
			value: [
				new asn1ts.Integer({ name: "iType" }),
				new asn1ts.Utf8String({ name: "u8sUsername" }),
				new asn1ts.Utf8String({ name: "u8sPassword" }),
				new asn1ts.Real({ name: "stValidTo" }),
				ENetUC_Common.UTF8StringList.getASN1Schema({ name: "listURIs" }),
				new asn1ts.Integer({ name: "iTTL" }),
				new asn1ts.Extension()
			]
		});
	}

	/** STUN or TURN Config; see EnumSTUNandTURNType. */
	public iType!: number;
	/** TURN username to use (STUN dont need this) */
	public u8sUsername!: string;
	/** TURN password to use (STUN dont need this) */
	public u8sPassword!: string;
	/** valid to timetamp in UTC */
	public stValidTo!: Date;
	/** URIs of STUN\/TURN services */
	public listURIs!: ENetUC_Common.UTF8StringList;
	/** Time To Live in seconds */
	public iTTL!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Line forward information object
 */
export class AsnLineForward {
	public constructor(that: AsnLineForward) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnLineForward {
		return new AsnLineForward({
			iInternalID: 0,
			iForwardController: 0,
			iForwardMode: 0,
			iBackEndSpecific: 0,
			iNoAnswerTime: 0,
			u8sDestination: "",
			u8sCallerIDList: new ENetUC_Common.UTF8StringList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iInternalID",
			"iForwardController",
			"iForwardMode",
			"iBackEndSpecific",
			"iNoAnswerTime",
			"u8sDestination",
			"u8sCallerIDList"
		];
		return p;
	}

	public static type = "AsnLineForward";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnLineForward",
			...params,
			value: [
				new asn1ts.Integer({ name: "iInternalID" }),
				new asn1ts.Integer({ name: "iForwardController" }),
				new asn1ts.Integer({ name: "iForwardMode" }),
				new asn1ts.Integer({ name: "iBackEndSpecific" }),
				new asn1ts.Integer({ name: "iNoAnswerTime" }),
				new asn1ts.Utf8String({ name: "u8sDestination" }),
				ENetUC_Common.UTF8StringList.getASN1Schema({ name: "u8sCallerIDList" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Internal ID of this entry */
	public iInternalID!: number;
	/** Defines where the forwarding is taking place */
	/** (see EnumForwardController) */
	public iForwardController!: number;
	/** Defines the forward mode */
	/** (see EnumForwardModes) */
	public iForwardMode!: number;
	/** In case of iForwardMode == eBACKENDSPECIFIC this contains the backend specific forward mode (e.g. TAPI LINEFORWARDMODE_ constants) */
	public iBackEndSpecific!: number;
	/** Time in seconds for a forward in case of no answer. 0 if the default time is used. */
	public iNoAnswerTime!: number;
	/** Destination number */
	public u8sDestination!: string;
	/** List of caller ids (supercanonic) if the forward is based on caller ids */
	public u8sCallerIDList!: ENetUC_Common.UTF8StringList;
}

// [PrintTSTypeDefCode]
// [PrintTSSetOfDefCode]
// [PrintTSListClass]
export class AsnProjectPinRuleList extends Array<AsnProjectPinRule> {
	public static getASN1Schema(params?: asn1ts.SequenceOfParams): asn1ts.SequenceOf {
		return new asn1ts.SequenceOf({
			...params,
			value: AsnProjectPinRule.getASN1Schema()
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Additional information about a call, especial for initiate a call.
 * asnCtiMakeCall can be used to give the UCServer more information\/hints about how to handle a make call with AsnCtiNewCallParams.
 * It is possible to give data of a project or pin to use to dial the number, hide the own callerid, attach contact data to the call a.s.o.
 */
export class AsnCtiNewCallParams {
	public constructor(that: AsnCtiNewCallParams) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnCtiNewCallParams {
		return new AsnCtiNewCallParams({
			projectPinRule: AsnProjectPinRule["initEmpty"].call(0),
			bHideMyCallerID: false
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"projectPinRule",
			"bHideMyCallerID"
		];
		if (bIncludeOptionals) {
			p.push(
				"asnRemoteContact",
				"optionalParams"
			);
		}
		return p;
	}

	public static type = "AsnCtiNewCallParams";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnCtiNewCallParams",
			...params,
			value: [
				AsnProjectPinRule.getASN1Schema({ name: "projectPinRule" }),
				new asn1ts.Boolean({ name: "bHideMyCallerID" }),
				ENetUC_Common.AsnNetDatabaseContact.getASN1Schema({ name: "asnRemoteContact", idBlock: { optionalID: 0 } }),
				ENetUC_Common.AsnOptionalParameters.getASN1Schema({ name: "optionalParams", idBlock: { optionalID: 1 } }),
				new asn1ts.Extension()
			]
		});
	}

	/** Projekt informationen */
	public projectPinRule!: AsnProjectPinRule;
	/** Rufnummer unterdrücken (true) oder übertragen (false\/DEFAULT) */
	public bHideMyCallerID!: boolean;
	/** Optional NetDatabaseContact, wenn der Client gleich einen mitübergeben will */
	public asnRemoteContact?: ENetUC_Common.AsnNetDatabaseContact;
	/**
	 * Additionally fields added later in the key-value-field for backward compatibility.
	 * Additionally fields added later in the key-value-field for backward compatibility.
	 * - key \"Address\", Type DWORD, TAPI Adresse auf der gewählt werden soll
	 * - key \"FeatureCodeDialing\", Type bool, Diese Wahl ist für einen FeatureCode, die Wahl soll nicht sichtbar sein
	 * - key \"FindAndValidateProject\", Type UTF8String, Projekt anhand des übergebenen Namens suchen
	 * - key \"ProjectErrorHandling\", Type Integer, Fehlerbehandlung wenn der übergebene Projektname nicht gefunden wird
	 * - key \"DialRemoteOffice\", Type Integer, Diese Wahl soll als Remote Office Wahl durchgeführt werden (assozierte Wahl, RemoteOffice Nummer, Vermitteln auf Zielrufnummer)
	 * - key \"RemoteOfficeNumber\", Type UTF8String, RemoteOffice Rufnummer die für die RemoteOffice Wahl verwendet werden soll
	 */
	public optionalParams?: ENetUC_Common.AsnOptionalParameters;
}

// [PrintTSTypeDefCode]
// [PrintTSSetOfDefCode]
// [PrintTSListClass]
export class AsnConfigSTUNandTURNList extends Array<AsnConfigSTUNandTURN> {
	public static getASN1Schema(params?: asn1ts.SequenceOfParams): asn1ts.SequenceOf {
		return new asn1ts.SequenceOf({
			...params,
			value: AsnConfigSTUNandTURN.getASN1Schema()
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSetOfDefCode]
// [PrintTSListClass]
export class AsnLineForwards extends Array<AsnLineForward> {
	public static getASN1Schema(params?: asn1ts.SequenceOfParams): asn1ts.SequenceOf {
		return new asn1ts.SequenceOf({
			...params,
			value: AsnLineForward.getASN1Schema()
		});
	}
}
