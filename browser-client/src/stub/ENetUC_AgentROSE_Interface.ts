// [PrintTSROSEInterfaceCode]
// [PrintTSROSEHeader]
/**
 * ENetUC_AgentROSE_Interface
 * "UC-Server-Access-Protocol-Agent" ASN.1 interfaces.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImport]
import { IReceiveInvokeContext, AsnInvokeProblem } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_Agent from "./ENetUC_Agent";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_ServicesAgents from "./ENetUC_ServicesAgents";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_AgentROSEInterface";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEInterface]
export interface IENetUC_AgentROSE {
	invoke_asnAgentMonitorStart(argument: ENetUC_Agent.AsnAgentMonitorStartArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Agent.AsnAgentMonitorStartResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnAgentMonitorStop(argument: ENetUC_Agent.AsnAgentMonitorStopArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Agent.AsnAgentMonitorStopResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnAgentLogin(argument: ENetUC_Agent.AsnAgentLoginArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Agent.AsnAgentLoginResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnAgentLogoff(argument: ENetUC_Agent.AsnAgentLogoffArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Agent.AsnAgentLogoffResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnAgentSetState(argument: ENetUC_Agent.AsnAgentSetStateArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Agent.AsnAgentSetStateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnAgentNotifyGroupsChanged(argument: ENetUC_Agent.AsnAgentNotifyGroupsChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnAgentNotifyStateChanged(argument: ENetUC_Agent.AsnAgentNotifyStateChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnAgentNotifyBlockedRTCChanged(argument: ENetUC_Agent.AsnAgentNotifyBlockedRTCChangedArgument, invokeContext?: ISendInvokeContextParams): void;
}

// [PrintTSROSEHandlerInterface]
// Contains all invokes of the interface (normally the server side)
export interface IENetUC_AgentROSE_Invoke_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onInvoke_asnAgentMonitorStart(argument: ENetUC_Agent.AsnAgentMonitorStartArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Agent.AsnAgentMonitorStartResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnAgentMonitorStop(argument: ENetUC_Agent.AsnAgentMonitorStopArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Agent.AsnAgentMonitorStopResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnAgentLogin(argument: ENetUC_Agent.AsnAgentLoginArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Agent.AsnAgentLoginResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnAgentLogoff(argument: ENetUC_Agent.AsnAgentLogoffArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Agent.AsnAgentLogoffResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnAgentSetState(argument: ENetUC_Agent.AsnAgentSetStateArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Agent.AsnAgentSetStateResult | ENetUC_Common.AsnRequestError | undefined>;
}

// Contains all events of the interface (normally the client side)
export interface IENetUC_AgentROSE_Event_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnAgentNotifyGroupsChanged(argument: ENetUC_Agent.AsnAgentNotifyGroupsChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnAgentNotifyStateChanged(argument: ENetUC_Agent.AsnAgentNotifyStateChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnAgentNotifyBlockedRTCChanged(argument: ENetUC_Agent.AsnAgentNotifyBlockedRTCChangedArgument, invokeContext: IReceiveInvokeContext): void;
}

// Contains all invokes and events of the interface
export type IENetUC_AgentROSE_Handler = IENetUC_AgentROSE_Invoke_Handler & IENetUC_AgentROSE_Event_Handler;

// [PrintTSROSEServerCopyPasteInterface]
/* Copy paste code for the import statement
import { IReceiveInvokeContext } from "./TSROSEBase";
import * as ENetUC_Common from "./ENetUC_Common";
import { ENetUC_Agent } from "./ENetUC_Agent";
*/

/**
 * Allows to set the log context for an invoke.
 * This method is called in advanced of methods handled inside this handler
 * The idea is to implement a async local storage based on the provided data from the argument or invokeContext
 *
 * @param argument - the snacc rose argument
 * @param invokeContext - the invoke context
 */
/*
public setLogContext(argument: unknown, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Agent Monitor Start
 *
 * This function starts monitoring for all groups of a client.
 * The individual lines (for PBX ACD groups) and the individual user and group configurations are taken into account (for business card\/contact portal).
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnAgentMonitorStartResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnAgentMonitorStart(argument: ENetUC_Agent.AsnAgentMonitorStartArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Agent.AsnAgentMonitorStartResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Agent Monitor Stop
 *
 * End monitoring for the specified CrossRefID
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnAgentMonitorStopResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnAgentMonitorStop(argument: ENetUC_Agent.AsnAgentMonitorStopArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Agent.AsnAgentMonitorStopResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Login for the agent\/ACD functionality on a line or group.
 *
 * This function ensures that the user is logged in to the agent or ACD group.
 *
 * @param argument - Parameters for Agent Login
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnAgentLoginResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnAgentLogin(argument: ENetUC_Agent.AsnAgentLoginArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Agent.AsnAgentLoginResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Logoff agent for ACD(Automatic Call Distribution)
 *
 * @param argument - Argument for agent logoff(Automatic Call Distribution)
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnAgentLogoffResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnAgentLogoff(argument: ENetUC_Agent.AsnAgentLogoffArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Agent.AsnAgentLogoffResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Agent for setting the ACD status (call distribution)
 *
 * ACD means Automatic Call Distribution and is a system for the automated control of incoming and outgoing customer interactions,
 * such as calls, faxes and e-mails
 *
 * @param argument - Set new Agent State
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnAgentSetStateResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnAgentSetState(argument: ENetUC_Agent.AsnAgentSetStateArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Agent.AsnAgentSetStateResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * The event for changes to the user's agent groups.
 *
 * The entire list of the user's agent groups is always transmitted.
 * Groups may have been removed or added, or the properties of a group may have changed.
 * This event is not used for AgentState changes
 *
 * @param argument - Argument contains the CrossRefID for which the event is sent and the list of the user's agent groups.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnAgentNotifyGroupsChanged(argument: ENetUC_Agent.AsnAgentNotifyGroupsChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event when the state of the agent in a group has changed.
 *
 * @param argument - Argument for AgentNotifyStateChanged. Included is the CrossRefID for which the event is transmitted, the AgencyURI and GroupURI (unique agent group assignment) and the new agent state.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnAgentNotifyStateChanged(argument: ENetUC_Agent.AsnAgentNotifyStateChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event dispatched if blocked state was changed for anonymous user
 * The argument contains all anonymous user URIs which are currently blocked for the notified agent
 *
 * @param argument - Argument for AgentNotifyAnonymousBlockedChanged.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnAgentNotifyBlockedRTCChanged(argument: ENetUC_Agent.AsnAgentNotifyBlockedRTCChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/
