// [PrintTSROSEInterfaceCode]
// [PrintTSROSEHeader]
/**
 * ENetUC_PresenceV2ROSE_Interface
 * "UC-Server-Access-Protocol-PresenceV2" ASN.1 interfaces.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImport]
import { IReceiveInvokeContext, AsnInvokeProblem } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_PresenceV2 from "./ENetUC_PresenceV2";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_AsnContact from "./ENetUC_Common_AsnContact";
import * as ENetUC_Common_Appointments from "./ENetUC_Common_Appointments";
import * as ENetUC_ClientCapabilities from "./ENetUC_ClientCapabilities";
import * as ENetROSEInterface from "./ENetROSEInterface";
import * as ENetUC_Common_SIPCTI from "./ENetUC_Common_SIPCTI";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_PresenceV2ROSEInterface";
export const MODULE_LASTCHANGE = "2024-09-16T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 20240916;
export const MODULE_VERSION = "8.0.20240916";

// [PrintTSROSEInterface]
export interface IENetUC_PresenceV2ROSE {
	event_asnUpdatePresenceV2(argument: ENetUC_PresenceV2.AsnUpdatePresenceV2Argument, invokeContext?: ISendInvokeContextParams): void;
	event_asnRemovePresence(argument: ENetUC_PresenceV2.AsnRemovePresenceArgument, invokeContext?: ISendInvokeContextParams): void;
	invoke_asnGetAndSubscribePresenceV2(argument: ENetUC_PresenceV2.AsnGetAndSubscribePresenceArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_PresenceV2.AsnGetAndSubscribePresenceV2Result | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnUnsubscribePresence(argument: ENetUC_PresenceV2.AsnUnsubscribePresenceArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_PresenceV2.AsnUnsubscribePresenceResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnSetDynamicRights(argument: ENetUC_PresenceV2.AsnSetDynamicRightsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_PresenceV2.AsnSetDynamicRightsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnRemoveDynamicRights(argument: ENetUC_PresenceV2.AsnRemoveDynamicRightsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_PresenceV2.AsnRemoveDynamicRightsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnRequestLargeProfileImage(argument: ENetUC_PresenceV2.AsnRequestLargeProfileImageArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_PresenceV2.AsnRequestLargeProfileImageResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnRequestContactImage(argument: ENetUC_PresenceV2.AsnRequestContactImageArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_PresenceV2.AsnRequestContactImageResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
}

// [PrintTSROSEHandlerInterface]
// Contains all invokes of the interface (normally the server side)
export interface IENetUC_PresenceV2ROSE_Invoke_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onInvoke_asnGetAndSubscribePresenceV2(argument: ENetUC_PresenceV2.AsnGetAndSubscribePresenceArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnGetAndSubscribePresenceV2Result | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnUnsubscribePresence(argument: ENetUC_PresenceV2.AsnUnsubscribePresenceArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnUnsubscribePresenceResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnSetDynamicRights(argument: ENetUC_PresenceV2.AsnSetDynamicRightsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnSetDynamicRightsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnRemoveDynamicRights(argument: ENetUC_PresenceV2.AsnRemoveDynamicRightsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnRemoveDynamicRightsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnRequestLargeProfileImage(argument: ENetUC_PresenceV2.AsnRequestLargeProfileImageArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnRequestLargeProfileImageResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnRequestContactImage(argument: ENetUC_PresenceV2.AsnRequestContactImageArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnRequestContactImageResult | ENetUC_Common.AsnRequestError | undefined>;
}

// Contains all events of the interface (normally the client side)
export interface IENetUC_PresenceV2ROSE_Event_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnUpdatePresenceV2(argument: ENetUC_PresenceV2.AsnUpdatePresenceV2Argument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnRemovePresence(argument: ENetUC_PresenceV2.AsnRemovePresenceArgument, invokeContext: IReceiveInvokeContext): void;
}

// Contains all invokes and events of the interface
export type IENetUC_PresenceV2ROSE_Handler = IENetUC_PresenceV2ROSE_Invoke_Handler & IENetUC_PresenceV2ROSE_Event_Handler;

// [PrintTSROSEServerCopyPasteInterface]
/* Copy paste code for the import statement
import { IReceiveInvokeContext } from "./TSROSEBase";
import * as ENetUC_Common from "./ENetUC_Common";
import { ENetUC_PresenceV2 } from "./ENetUC_PresenceV2";
*/

/**
 * Allows to set the log context for an invoke.
 * This method is called in advanced of methods handled inside this handler
 * The idea is to implement a async local storage based on the provided data from the argument or invokeContext
 *
 * @param argument - the snacc rose argument
 * @param invokeContext - the invoke context
 */
/*
public setLogContext(argument: unknown, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Operation to retrieve contact data and to subscribe to events when these data will change.
 *
 * If a client is interested in monitoring the presence and data of its own and other contacts, this operation
 * gives the possibility to get data about a contact, its used services (lines, appointments, chat etc.) and his calculated presence. See AsnGetAndSubscribePresenceArgument for more information.
 *
 * To unsubscribe from contacts, call asnUnsubscribePresence. This is highly recommended before closing the connection to the ucserver.
 *
 * If the operation fails it will return AsnRequestError.
 *
 * If the operation is successful at least on some given contacts, it will return AsnGetAndSubscribePresenceResult.
 *
 * @param argument - Call this operation to get information about and events of another contact.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnGetAndSubscribePresenceV2Result on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnGetAndSubscribePresenceV2(argument: ENetUC_PresenceV2.AsnGetAndSubscribePresenceArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnGetAndSubscribePresenceV2Result | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Operation to end subscriptions on contacts on the ucserver.
 *
 * To stop getting events from contacts on the ucserver this operation is called with the list contact IDs of these contacts.
 *
 * If the operation is executes successful, it will return the result AsnUnsubscribePresenceResult.
 *
 * If an error occured, AsnRequestError will be returned.
 *
 * @param argument - Argument for stopping contact subscrptions on the ucserver.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnUnsubscribePresenceResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnUnsubscribePresence(argument: ENetUC_PresenceV2.AsnUnsubscribePresenceArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnUnsubscribePresenceResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Operation to set access rights for another contact on contact data and contcat service information.
 *
 * This operation is used to grant access rights (or changing them) to other users (contacts) on contact informations and service states of this contact.
 *
 * **Note**: The access rights in the ucserver are always a sum of the global, group and personal right lists and what they grant. So removing specific rights with this
 * operation has no effect if the same rights are granted through global or group rights.
 *
 * If the operation was executed successfully the result AsnSetDynamicRightsResult is returned.
 *
 * If an error occured, AsnRequestError is returned.
 *
 * **The access rights list**&lt;br \/&gt;
 * If a client wants to receive contact data, its logged in contact (= user) has to have access rights granted by the other user to him.
 * Each user of the ucserver has a list of access rights she gives other users. If someone is in this list, he can see contact data
 * and\/or service states of the user depending on the rights level granted.
 *
 * The list can be modified by asnSetDynamicRights and asnRemoveDynamicRights.
 *
 * **Contact rights challenge**&lt;br \/&gt;
 * In conjunction with the access rights list is the mechanic of the \"contact rights challenge\".&lt;br \/&gt;
 * To get on the access list of another user, the user must request such rights from him or will get them through administrative configuration.
 * If there is no administrative configuration the other user will be \"challenged\" to grant or deny rights to the user.
 * This process is started as soon as a user (challenger) requests the ucserver by calling asnGetAndSubscribePresence on another users ContactID (challengee).
 * The ucserver checks if there are already given rights and if not, the challenged user gets a new entry in his challenge request list, which then will be
 * dispatched to all of his clients. These clients should now prompt the user to accept or deny the request and the result will be saved in his access rights list.
 * On the other side, the challenger will get data and service status after some time or not. There is no extra notification if the challenge was answered or not.
 *
 * @param argument - Argument for asnSetDynamicRights to set\/change access rights to contact data and its service informations
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnSetDynamicRightsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnSetDynamicRights(argument: ENetUC_PresenceV2.AsnSetDynamicRightsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnSetDynamicRightsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * This operation is used for removing access rights to contact data and service states between contacts.
 *
 * If a client wants to remove access rights to contact data and service states between contacts, asnRemoveDynamicRights has to be called.
 *
 * Removing access rights will remove an entry in the access rights list of the contact who grants the rights. This means, that
 * 'remote contact' (see. AsnRemoveDynamicRightsArgument) has the chance to request new rights again.
 *
 * In order to prevent the 'remote contact' to request new rights, the contact should be blocked
 * (setting user right 'blocked'). See asnSetDynamicRights for more details.
 *
 * @param argument - Argument for asnRemoveDynamicRights
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnRemoveDynamicRightsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnRemoveDynamicRights(argument: ENetUC_PresenceV2.AsnRemoveDynamicRightsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnRemoveDynamicRightsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Request an large image of a contact.
 *
 * With the operation asnRequestLargeProfileImage can request a large image of a contact. The large
 * image can be optionally configured by the administrator additionally to the 'normal' small image in order to provide a
 * higher resolution image of the contact for special purposes (like LiveChat client).
 * Like with asnRequestContactImage, this operation is used to get or check the image from the server and the server can
 * determine the need to provide a new image to the client using the given hash value.
 *
 * @param argument - Argument for asnRequestLargeProfileImage
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnRequestLargeProfileImageResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnRequestLargeProfileImage(argument: ENetUC_PresenceV2.AsnRequestLargeProfileImageArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnRequestLargeProfileImageResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Request an image of a contact
 *
 * This operation requests the normal (or 'small') Image of a contact. The caller sends
 * a known hash of an already existing image to the server, so that the server can determine
 * that the client get the stored image (the hash is not equal) or reponds to the client, that the image has not changed (hash is equal).
 * If there is no image, no image is returned.
 *
 * @param argument - Argument for asnRequestContactImage
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnRequestContactImageResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnRequestContactImage(argument: ENetUC_PresenceV2.AsnRequestContactImageArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_PresenceV2.AsnRequestContactImageResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Event from the server to the client about presence updates
 *
 * This event is fired from the server if the client has subscribed by asnGetAndSubscribePresence on a contact (=user).
 * It contains the new presence state and other data which has changed.
 *
 * @param argument - Argument of asnUpdatePresence
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnUpdatePresenceV2(argument: ENetUC_PresenceV2.AsnUpdatePresenceV2Argument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server tzhat the contact has been removed from the presence system.
 *
 * This event will be sent to clients when a contact is removed from the presence system of the ucserver.
 * Mostly by removing or deactivating the contact in the user management system.
 *
 * @param argument - Argument for the event asnRemovePresence.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnRemovePresence(argument: ENetUC_PresenceV2.AsnRemovePresenceArgument, invokeContext: IReceiveInvokeContext): void {
}
*/
