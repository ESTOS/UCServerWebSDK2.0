// [PrintTSConverterCode]
// [PrintTSConverterComments]
/*
 * ENetUC_Common_Appointments_Converter.ts
 * "UC-Server-Access-Protocol-AppointmentsCommon" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */

// [PrintTSConverterImports]
import { ConverterError, ConverterErrorType, ConverterErrors, TSConverter, IDecodeContext, IEncodeContext, INamedType } from "./TSConverterBase";
import * as ENetUC_Common_Appointments from "./ENetUC_Common_Appointments";
// [PrintTSImports]
import * as asn1ts from "@estos/asn1ts";
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_Common_Appointments_Converter";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSEncoderDecoderCode]
export class AsnAppointmentEntry_Converter {
	public static toJSON(s: ENetUC_Common_Appointments.AsnAppointmentEntry, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Common_Appointments.AsnAppointmentEntry & INamedType | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAppointmentEntry");

		const t = {} as ENetUC_Common_Appointments.AsnAppointmentEntry & INamedType;

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnAppointmentEntry";
		TSConverter.fillJSONParam(s, t, "u8sEntryID", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sOwner", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sDataSource", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "stStart", "Date", errors, newContext);
		TSConverter.fillJSONParam(s, t, "stEnd", "Date", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iDuration", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sSubject", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sText", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "bAllDay", "boolean", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iStatus", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "u8sCategory", "string", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iImportance", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iSensitivity", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "bIsValid", "boolean", errors, newContext);
		if (s.optionalParams) {
			const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toJSON(s.optionalParams, errors, newContext, "optionalParams");
			if (_optionalParams)
				t.optionalParams = _optionalParams;
		}

		if (errors.validateResult(newContext, "AsnAppointmentEntry"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Common_Appointments.AsnAppointmentEntry | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAppointmentEntry");

		let t: ENetUC_Common_Appointments.AsnAppointmentEntry | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Common_Appointments.AsnAppointmentEntry>(data, errors, newContext, optional);
		if (s) {
			t = ENetUC_Common_Appointments.AsnAppointmentEntry["initEmpty"].call(0);
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "u8sEntryID", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sOwner", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sDataSource", "string", errors, newContext, false);
			if (TSConverter.validateParam(s, "stStart", "string", errors, newContext, false))
				t.stStart = new Date(s.stStart);
			if (TSConverter.validateParam(s, "stEnd", "string", errors, newContext, false))
				t.stEnd = new Date(s.stEnd);
			TSConverter.fillJSONParam(s, t, "iDuration", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sSubject", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sText", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "bAllDay", "boolean", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iStatus", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "u8sCategory", "string", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iImportance", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "iSensitivity", "number", errors, newContext, false);
			TSConverter.fillJSONParam(s, t, "bIsValid", "boolean", errors, newContext, false);
			const _optionalparams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromJSON(s.optionalParams, errors, newContext, "optionalParams", true);
			if (_optionalparams)
				t.optionalParams = _optionalparams;
		}

		if (errors.validateResult(newContext, "AsnAppointmentEntry"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Common_Appointments.AsnAppointmentEntry | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnAppointmentEntry";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "AsnAppointmentEntry");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "u8sEntryID", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sOwner", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sDataSource", "string", errors, newContext);
		TSConverter.validateParam(s, "stStart", "Date", errors, newContext);
		TSConverter.validateParam(s, "stEnd", "Date", errors, newContext);
		TSConverter.validateParam(s, "iDuration", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sSubject", "string", errors, newContext);
		TSConverter.validateParam(s, "u8sText", "string", errors, newContext);
		TSConverter.validateParam(s, "bAllDay", "boolean", errors, newContext);
		TSConverter.validateParam(s, "iStatus", "number", errors, newContext);
		TSConverter.validateParam(s, "u8sCategory", "string", errors, newContext);
		TSConverter.validateParam(s, "iImportance", "number", errors, newContext);
		TSConverter.validateParam(s, "iSensitivity", "number", errors, newContext);
		TSConverter.validateParam(s, "bIsValid", "boolean", errors, newContext);
		const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toBER(s.optionalParams, errors, newContext, "optionalParams", true);
		if (!errors.hasNewErrors()) {
			t.push(new asn1ts.Utf8String({ value: s.u8sEntryID, name: "u8sEntryID" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sOwner, name: "u8sOwner" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sDataSource, name: "u8sDataSource" }));
			t.push(new asn1ts.Real({ value: TSConverter.getVariantTimeFromDateTime(s.stStart), name: "stStart" }));
			t.push(new asn1ts.Real({ value: TSConverter.getVariantTimeFromDateTime(s.stEnd), name: "stEnd" }));
			t.push(new asn1ts.Integer({ value: s.iDuration, name: "iDuration" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sSubject, name: "u8sSubject" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sText, name: "u8sText" }));
			t.push(new asn1ts.Boolean({ value: s.bAllDay, name: "bAllDay" }));
			t.push(new asn1ts.Integer({ value: s.iStatus, name: "iStatus" }));
			t.push(new asn1ts.Utf8String({ value: s.u8sCategory, name: "u8sCategory" }));
			t.push(new asn1ts.Integer({ value: s.iImportance, name: "iImportance" }));
			t.push(new asn1ts.Integer({ value: s.iSensitivity, name: "iSensitivity" }));
			t.push(new asn1ts.Boolean({ value: s.bIsValid, name: "bIsValid" }));
			if (_optionalParams)
				t.push(_optionalParams);
		}

		if (errors.validateResult(newContext, "AsnAppointmentEntry"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Common_Appointments.AsnAppointmentEntry | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "AsnAppointmentEntry");

		let t: ENetUC_Common_Appointments.AsnAppointmentEntry | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Common_Appointments.AsnAppointmentEntry.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Common_Appointments.AsnAppointmentEntry["initEmpty"].call(0);
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "u8sEntryID", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sOwner", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sDataSource", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "stStart", "AsnSystemTime", errors, newContext);
			TSConverter.fillASN1Param(s, t, "stEnd", "AsnSystemTime", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iDuration", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sSubject", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sText", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "bAllDay", "Boolean", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iStatus", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "u8sCategory", "Utf8String", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iImportance", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iSensitivity", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "bIsValid", "Boolean", errors, newContext);
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "optionalParams"), errors, newContext, "optionalParams", true);
		}

		if (errors.validateResult(newContext, "AsnAppointmentEntry"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class SEQAppointmentList_Converter {
	public static toJSON(s: ENetUC_Common_Appointments.SEQAppointmentList, errors?: ConverterErrors, context?: IEncodeContext, name?: string): ENetUC_Common_Appointments.SEQAppointmentList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "SEQAppointmentList");

		const t = [] as ENetUC_Common_Appointments.SEQAppointmentList;

		// [Print_JSON_EncoderSetOfDefCode]
		for (const id in s) {
			const se = s[id];
			if (se === undefined)
				continue;
			const val = AsnAppointmentEntry_Converter.toJSON(se, errors, newContext, "AsnAppointmentEntry");
			if (val)
				t.push(val);
		}

		if (errors.validateResult(newContext, "SEQAppointmentList"))
			return t;

		return undefined;
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Common_Appointments.SEQAppointmentList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "SEQAppointmentList");

		let t: ENetUC_Common_Appointments.SEQAppointmentList | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Common_Appointments.SEQAppointmentList>(data, errors, newContext, optional);
		if (s) {
			t = new ENetUC_Common_Appointments.SEQAppointmentList();
			// [Print_JSON_DecoderSetOfDefCode]
			for (const id in s) {
				const se = s[id];
				if (se === undefined)
					continue;
				const val = AsnAppointmentEntry_Converter.fromJSON(se, errors, newContext, "AsnAppointmentEntry", false);
				if (val)
					t.push(val);
			}
		}

		if (errors.validateResult(newContext, "SEQAppointmentList"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Common_Appointments.SEQAppointmentList | undefined, errors?: ConverterErrors, context?: IEncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "SEQAppointmentList";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addEncodeContext(context, name, "SEQAppointmentList");

		// [Print_BER_EncoderSetOfDefCode]
		for (const id in s) {
			const val = AsnAppointmentEntry_Converter.toBER(s[id], errors, newContext, "AsnAppointmentEntry");
			if (val)
				t.push(val);
		}


		if (errors.validateResult(newContext, "SEQAppointmentList"))
			return result;

		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: IDecodeContext, name?: string, optional?: boolean): ENetUC_Common_Appointments.SEQAppointmentList | undefined {
		errors ||= new ConverterErrors();
		errors.storeState();
		const newContext = TSConverter.addDecodeContext(context, name, "SEQAppointmentList");

		let t: ENetUC_Common_Appointments.SEQAppointmentList | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Common_Appointments.SEQAppointmentList.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = new ENetUC_Common_Appointments.SEQAppointmentList();
			// [Print_BER_DecoderSetOfDefCode]
			for (const se of s.valueBlock.value) {
				if (asn1ts.Sequence.typeGuard(se)) {
					const val = AsnAppointmentEntry_Converter.fromBER(se, errors, newContext, "AsnAppointmentEntry", optional);
					if (val)
						t.push(val);
				} else
					errors.push(new ConverterError(ConverterErrorType.PROPERTY_TYPEMISMATCH, newContext.context, "wrong type"));
			}
		}

		if (errors.validateResult(newContext, "SEQAppointmentList"))
			return t;

		return undefined;
	}
}
