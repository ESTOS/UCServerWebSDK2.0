// [PrintTSROSEInterfaceCode]
// [PrintTSROSEHeader]
/**
 * ENetUC_JournalROSE_Interface
 * "UC-Server-Access-Protocol-Journal" ASN.1 interfaces.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImport]
import { IReceiveInvokeContext, AsnInvokeProblem } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_Journal from "./ENetUC_Journal";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_SIPCTI from "./ENetUC_Common_SIPCTI";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_JournalROSEInterface";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEInterface]
export interface IENetUC_JournalROSE {
	invoke_asnGetOfflineJournal(argument: ENetUC_Journal.AsnGetOfflineJournalArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnGetOfflineJournalResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnGetJournalEntriesV2(argument: ENetUC_Journal.AsnGetJournalEntriesV2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnGetJournalEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnUpdateCallAndJournalContactAndNumber(argument: ENetUC_Journal.AsnUpdateCallAndJournalContactAndNumberArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnUpdateCallAndJournalContactAndNumberResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnUpdateCallLocalContact(argument: ENetUC_Journal.AsnUpdateCallLocalContactArgument, invokeContext?: ISendInvokeContextParams): void;
	invoke_asnUpdateJournalMemo(argument: ENetUC_Journal.AsnUpdateJournalMemoArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnUpdateJournalMemoResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnUpdateJournalProject(argument: ENetUC_Journal.AsnUpdateJournalProjectArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnUpdateJournalProjectResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnUpdateJournalReadFlag(argument: ENetUC_Journal.AsnUpdateJournalReadFlagArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnUpdateJournalReadFlagResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnUpdateJournalSubject(argument: ENetUC_Journal.AsnUpdateJournalSubjectArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnUpdateJournalSubjectResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnGetJournalEntriesCountV2(argument: ENetUC_Journal.AsnGetJournalEntriesCountV2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnGetJournalEntriesCountResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnJournalEntryGet(argument: ENetUC_Journal.AsnJournalEntryGetArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnJournalEntryGetResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnJournalEntryChanged(argument: ENetUC_Journal.AsnJournalEntryChangedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnJournalEntryListChanged(argument: ENetUC_Journal.AsnJournalEntryChangedListArgument, invokeContext?: ISendInvokeContextParams): void;
	invoke_asnJournalSubscribeEvents(argument: ENetUC_Journal.AsnJournalSubscribeEventsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnJournalSubscribeEventsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnJournalGetSettings(argument: ENetUC_Journal.AsnJournalGetSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnJournalGetSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnUpdateJournal(argument: ENetUC_Journal.AsnUpdateJournalArgument, invokeContext?: ISendInvokeContextParams): void;
	invoke_asnDeleteJournalEntries(argument: ENetUC_Journal.AsnDeleteJournalEntriesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnDeleteJournalEntriesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnMarkAllJournalEntriesAsRead(argument: ENetUC_Journal.AsnMarkAllJournalEntriesAsReadArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Journal.AsnMarkAllJournalEntriesAsReadResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
}

// [PrintTSROSEHandlerInterface]
// Contains all invokes of the interface (normally the server side)
export interface IENetUC_JournalROSE_Invoke_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onInvoke_asnGetOfflineJournal(argument: ENetUC_Journal.AsnGetOfflineJournalArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnGetOfflineJournalResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnGetJournalEntriesV2(argument: ENetUC_Journal.AsnGetJournalEntriesV2Argument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnGetJournalEntriesResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnUpdateCallAndJournalContactAndNumber(argument: ENetUC_Journal.AsnUpdateCallAndJournalContactAndNumberArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnUpdateCallAndJournalContactAndNumberResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnUpdateJournalMemo(argument: ENetUC_Journal.AsnUpdateJournalMemoArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnUpdateJournalMemoResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnUpdateJournalProject(argument: ENetUC_Journal.AsnUpdateJournalProjectArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnUpdateJournalProjectResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnUpdateJournalReadFlag(argument: ENetUC_Journal.AsnUpdateJournalReadFlagArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnUpdateJournalReadFlagResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnUpdateJournalSubject(argument: ENetUC_Journal.AsnUpdateJournalSubjectArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnUpdateJournalSubjectResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnGetJournalEntriesCountV2(argument: ENetUC_Journal.AsnGetJournalEntriesCountV2Argument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnGetJournalEntriesCountResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnJournalEntryGet(argument: ENetUC_Journal.AsnJournalEntryGetArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnJournalEntryGetResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnJournalSubscribeEvents(argument: ENetUC_Journal.AsnJournalSubscribeEventsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnJournalSubscribeEventsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnJournalGetSettings(argument: ENetUC_Journal.AsnJournalGetSettingsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnJournalGetSettingsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnDeleteJournalEntries(argument: ENetUC_Journal.AsnDeleteJournalEntriesArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnDeleteJournalEntriesResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnMarkAllJournalEntriesAsRead(argument: ENetUC_Journal.AsnMarkAllJournalEntriesAsReadArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnMarkAllJournalEntriesAsReadResult | ENetUC_Common.AsnRequestError | undefined>;
}

// Contains all events of the interface (normally the client side)
export interface IENetUC_JournalROSE_Event_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnUpdateCallLocalContact(argument: ENetUC_Journal.AsnUpdateCallLocalContactArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnJournalEntryChanged(argument: ENetUC_Journal.AsnJournalEntryChangedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnJournalEntryListChanged(argument: ENetUC_Journal.AsnJournalEntryChangedListArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnUpdateJournal(argument: ENetUC_Journal.AsnUpdateJournalArgument, invokeContext: IReceiveInvokeContext): void;
}

// Contains all invokes and events of the interface
export type IENetUC_JournalROSE_Handler = IENetUC_JournalROSE_Invoke_Handler & IENetUC_JournalROSE_Event_Handler;

// [PrintTSROSEServerCopyPasteInterface]
/* Copy paste code for the import statement
import { IReceiveInvokeContext } from "./TSROSEBase";
import * as ENetUC_Common from "./ENetUC_Common";
import { ENetUC_Journal } from "./ENetUC_Journal";
*/

/**
 * Allows to set the log context for an invoke.
 * This method is called in advanced of methods handled inside this handler
 * The idea is to implement a async local storage based on the provided data from the argument or invokeContext
 *
 * @param argument - the snacc rose argument
 * @param invokeContext - the invoke context
 */
/*
public setLogContext(argument: unknown, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Fetch and optionally delete offline journal entries.
 *
 * The UCServer saves journal entries of missed calls additionally in an offline database, if the owner of the line
 * where the call was happening was not logged into the UCServer.
 * With this function it is possible to read (and delete) such entries.
 *
 * @param argument - Argument for asnGetOfflineJournal.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnGetOfflineJournalResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnGetOfflineJournal(argument: ENetUC_Journal.AsnGetOfflineJournalArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnGetOfflineJournalResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Search for journal entries of the users conversations.
 *
 * asnGetJournalEntries makes it possible to search in the journal database of the user. The search is limited to the journal entries of the logged in user himself (public and private)
 * and to the journal entries of users where permissions are granted for the logged in user.
 *
 * With AsnGetJournalEntriesV2Argument.findOptions it is possible to give more search criterias.
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnGetJournalEntriesResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnGetJournalEntriesV2(argument: ENetUC_Journal.AsnGetJournalEntriesV2Argument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnGetJournalEntriesResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Update the contact information of a current active call or a journal entry.
 *
 * A Client can update the contact information for a call. This function updates the information is currently active or, if already disconnected, the corresponding journal entry.
 *
 * If neither the active call was found nor the journal entry, an error will be returned.
 *
 * @param argument - Argument for asnUpdateCallAndJournalContactAndNumber.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnUpdateCallAndJournalContactAndNumberResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnUpdateCallAndJournalContactAndNumber(argument: ENetUC_Journal.AsnUpdateCallAndJournalContactAndNumberArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnUpdateCallAndJournalContactAndNumberResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Update Journal memo text
 *
 * A client can update a memo text of a journal entry without transferring the whole journal entry.
 *
 * @param argument - Argument for asnUpdateJournalMemo
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnUpdateJournalMemoResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnUpdateJournalMemo(argument: ENetUC_Journal.AsnUpdateJournalMemoArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnUpdateJournalMemoResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Change the project information of a journal entry
 *
 * A client can change the project information\/rules of an journal entry independently of the other journal entry data.
 *
 * @param argument - Argument for asnUpdateJournalProject
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnUpdateJournalProjectResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnUpdateJournalProject(argument: ENetUC_Journal.AsnUpdateJournalProjectArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnUpdateJournalProjectResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Set the 'read' flag of journal entries
 *
 * A Client can change the 'read' flag of journal entries in the database independently of the other fields of the entries.
 *
 * @param argument - Argument for asnUpdateJournalReadFlag
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnUpdateJournalReadFlagResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnUpdateJournalReadFlag(argument: ENetUC_Journal.AsnUpdateJournalReadFlagArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnUpdateJournalReadFlagResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Change the subject text of a journal entry.
 *
 * A client can change the subject text of a journal entry independently of the other fields.
 *
 * @param argument - Argument for asnUpdateJournalSubject
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnUpdateJournalSubjectResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnUpdateJournalSubject(argument: ENetUC_Journal.AsnUpdateJournalSubjectArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnUpdateJournalSubjectResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Count journal entries in the database ang get the result.
 *
 * A client can get the count of journal entries from the server in the database for a given filter named 'findOptions' in the argument.
 *
 * This can be used for displaying the count of such journal entries without transferring a lot of journal data via the network.
 * Popups or pins with the count of unread entries are examples for this.
 *
 * @param argument -
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnGetJournalEntriesCountResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnGetJournalEntriesCountV2(argument: ENetUC_Journal.AsnGetJournalEntriesCountV2Argument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnGetJournalEntriesCountResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Get the journal entryof a call from the server.
 *
 * A client can retrieve a journal entry from a server by its connection id. The entry can be from the database (if the call was finished earlier), from the pending
 * write list (when the call was finished, but not yet written to the database) or if the call is still ongoing will be generated from its CallInformation data.
 *
 * @param argument - Argument for asnJournalEntryGet
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnJournalEntryGetResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnJournalEntryGet(argument: ENetUC_Journal.AsnJournalEntryGetArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnJournalEntryGetResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Subscribe for events of journal database changes
 *
 * Clients can subscribe for events from the journal database when changes occure.&lt;br \/&gt;
 * The server will then send events if there were entries added, deleted or changed.&lt;br \/&gt;
 * With the subscription, the client can set a more detailed description, which entries it is interested in the direct result
 * of the call. It is possible to set a last known transaction id to start from, the maximum number of entries to reply or if
 * the client is only interested in the users own journal entries or additional of the groups the user is in (and is allowed to see the journal entries).&lt;br \/&gt;
 * &lt;br \/&gt;
 * To unsubscribe from the jornal events, call this function with bReceiveJournalEvents set to false. This will stop the server to send events.
 *
 * @param argument - Argument for asnJournalSubscribeEvents
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnJournalSubscribeEventsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnJournalSubscribeEvents(argument: ENetUC_Journal.AsnJournalSubscribeEventsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnJournalSubscribeEventsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Get the current Journal settings from the server
 *
 * A client can get the current journal settings, in particular the privacy settings, which describes the handling of private calls on the server.
 *
 * @param argument - Argument for asnJournalGetSettings - there are no parameters needed, but the call needs an argument.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnJournalGetSettingsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnJournalGetSettings(argument: ENetUC_Journal.AsnJournalGetSettingsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnJournalGetSettingsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Delete journal entries form the database.
 *
 * Depending on the persmissions, a client can delete journal entries of the user or from the groups. If the call fails, AsnRequestError will be used instead of the result.
 *
 * @param argument - Argument for asnDeleteJournalEntries
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnDeleteJournalEntriesResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnDeleteJournalEntries(argument: ENetUC_Journal.AsnDeleteJournalEntriesArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnDeleteJournalEntriesResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Mark all journal entries opf the current user as 'read'.
 *
 * To make it a client simpler, this function marks all journal entries of the current user as 'read' in the database.
 *
 * @param argument - Argument for asnMarkAllJournalEntriesAsRead
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnMarkAllJournalEntriesAsReadResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnMarkAllJournalEntriesAsRead(argument: ENetUC_Journal.AsnMarkAllJournalEntriesAsReadArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_Journal.AsnMarkAllJournalEntriesAsReadResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Update the contact data of the local contact of a journal entry (\"Mandantenkontakt\").
 *
 * A client can search and update the called contact of a call (\"Mandanten\").
 *
 * @param argument - Argument for asnUpdateCallLocalContact event to the server
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnUpdateCallLocalContact(argument: ENetUC_Journal.AsnUpdateCallLocalContactArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Journal update event from the server.
 *
 * @param argument - Argument for the asnJournalEntryChanged event
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnJournalEntryChanged(argument: ENetUC_Journal.AsnJournalEntryChangedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event from the server if journal entries where changed (new version of asnJournalEntryChanged, which only supports a single entry)
 *
 * @param argument - Argument of asnJournalEntryListChanged from the server
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnJournalEntryListChanged(argument: ENetUC_Journal.AsnJournalEntryChangedListArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event sent to the server to update journal entries ansynchronously. The Result will be received from the server as asnJournalEntryChanged event.
 *
 * @param argument - Argument for asnUpdateJournal, event to the server.
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnUpdateJournal(argument: ENetUC_Journal.AsnUpdateJournalArgument, invokeContext: IReceiveInvokeContext): void {
}
*/
