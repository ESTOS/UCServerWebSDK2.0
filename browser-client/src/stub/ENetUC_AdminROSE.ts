// [PrintTSROSEHeader]
/**
 * ENetUC_AdminROSE
 * "UC-Server-Access-Protocol-Admin" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImports]
// Global imports
import { IENetUC_AdminROSE, IENetUC_AdminROSE_Handler } from "./ENetUC_AdminROSE_Interface";
import { ROSEError, ROSEInvoke, ROSEReject, ROSEResult } from "./SNACCROSE";
import { AsnInvokeProblem, AsnInvokeProblemEnum, createInvokeReject, IASN1Transport, IASN1LogData, IReceiveInvokeContext, IInvokeHandler, ELogSeverity, ROSEBase } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_Admin from "./ENetUC_Admin";
import * as Converter from "./ENetUC_Admin_Converter";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_AsnContact from "./ENetUC_Common_AsnContact";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";
import * as ENetUC_Common_AsnContact_Converter from "./ENetUC_Common_AsnContact_Converter";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_AdminROSE";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEOperationDefines]
export enum OperationIDs {
	OPID_asnAdminLogin = 2904,
	OPID_asnAdminGetUserProfile = 2905,
	OPID_asnAdminGetUserProfiles = 2913,
	OPID_asnAdminSetUserProfile = 2906,
	OPID_asnAdminRemoveUserProfile = 2912,
	OPID_asnAdminAddUserProfile = 2907,
	OPID_asnAdminGetComputerProfile = 2908,
	OPID_asnAdminSetComputerProfile = 2909,
	OPID_asnAdminAddComputerProfile = 2910,
	OPID_asnAdminFindUser = 2911,
	OPID_asnAdminFindGroupProfiles = 2916,
	OPID_asnAdminSetGroupProfile = 2917,
	OPID_asnAdminAddGroupProfile = 2918,
	OPID_asnAdminRemoveGroupProfile = 2919,
	OPID_asnGetDatabaseManagerSettings = 2903,
	OPID_asnGetNetworkInterfacePorts = 2900,
	OPID_asnGetAvailableLines = 2901,
	OPID_asnGetUserManagerSettings = 2902,
	OPID_asnAdminGetPhoneJournalSettings = 2920,
	OPID_asnAdminSetAnonymousUserAccessToken = 2922,
	OPID_asnAdminSetAnonymousUserContactData = 2923,
	OPID_asnAdminRemoveAnonymousUser = 2924
}

// [PrintTSROSEModuleComment]
/**
 * Administration interface (workstation setup)
 * ## Module description
 * This module defines structures and functions for administration the UCServer.
 * These structures are used by the administrative console (UCServer Administration) and the ClnInst.exe (Workstation settings) on the client.
 * These operations need an administrative login on the UCServer.
 */

// [PrintTSROSEClass]
export class ENetUC_AdminROSE extends ROSEBase implements IInvokeHandler, IENetUC_AdminROSE {
	/**
	 * Contains the attributes that have to be filtered from logging
	 * Use logfilter property;property inside the asn1 root comments to specify this list
	 */
	public readonly logFilter: string[];

	/**
	 * The Loggers getLogData callback (used in all the log methods called in this class, add the classname to every log entry)
	 *
	 * @returns - an ILogData log data object provided additional data for all the logger calls in this class
	 */
	public getLogData(): IASN1LogData {
		return {
			className: MODULE_NAME
		};
	}

	/**
	 * Returns the operationName for an operationID
	 *
	 * @param id - the id we want to have the name for
	 * @returns - the name or undefined if not found
	 */
	public getNameForOperationID(id: OperationIDs): string | undefined {
		switch (id) {
			case OperationIDs.OPID_asnAdminLogin:
				return "asnAdminLogin";
			case OperationIDs.OPID_asnAdminGetUserProfile:
				return "asnAdminGetUserProfile";
			case OperationIDs.OPID_asnAdminGetUserProfiles:
				return "asnAdminGetUserProfiles";
			case OperationIDs.OPID_asnAdminSetUserProfile:
				return "asnAdminSetUserProfile";
			case OperationIDs.OPID_asnAdminRemoveUserProfile:
				return "asnAdminRemoveUserProfile";
			case OperationIDs.OPID_asnAdminAddUserProfile:
				return "asnAdminAddUserProfile";
			case OperationIDs.OPID_asnAdminGetComputerProfile:
				return "asnAdminGetComputerProfile";
			case OperationIDs.OPID_asnAdminSetComputerProfile:
				return "asnAdminSetComputerProfile";
			case OperationIDs.OPID_asnAdminAddComputerProfile:
				return "asnAdminAddComputerProfile";
			case OperationIDs.OPID_asnAdminFindUser:
				return "asnAdminFindUser";
			case OperationIDs.OPID_asnAdminFindGroupProfiles:
				return "asnAdminFindGroupProfiles";
			case OperationIDs.OPID_asnAdminSetGroupProfile:
				return "asnAdminSetGroupProfile";
			case OperationIDs.OPID_asnAdminAddGroupProfile:
				return "asnAdminAddGroupProfile";
			case OperationIDs.OPID_asnAdminRemoveGroupProfile:
				return "asnAdminRemoveGroupProfile";
			case OperationIDs.OPID_asnGetDatabaseManagerSettings:
				return "asnGetDatabaseManagerSettings";
			case OperationIDs.OPID_asnGetNetworkInterfacePorts:
				return "asnGetNetworkInterfacePorts";
			case OperationIDs.OPID_asnGetAvailableLines:
				return "asnGetAvailableLines";
			case OperationIDs.OPID_asnGetUserManagerSettings:
				return "asnGetUserManagerSettings";
			case OperationIDs.OPID_asnAdminGetPhoneJournalSettings:
				return "asnAdminGetPhoneJournalSettings";
			case OperationIDs.OPID_asnAdminSetAnonymousUserAccessToken:
				return "asnAdminSetAnonymousUserAccessToken";
			case OperationIDs.OPID_asnAdminSetAnonymousUserContactData:
				return "asnAdminSetAnonymousUserContactData";
			case OperationIDs.OPID_asnAdminRemoveAnonymousUser:
				return "asnAdminRemoveAnonymousUser";
			default:
				return undefined;
		}
	}

	/**
	 * Returns the operationID for an operationName
	 *
	 * @param name - the name we want to have the id for
	 * @returns - the id or undefined if not found
	 */
	public getIDForOperationName(name: string): OperationIDs | undefined {
		switch (name) {
			case "asnAdminLogin":
				return OperationIDs.OPID_asnAdminLogin;
			case "asnAdminGetUserProfile":
				return OperationIDs.OPID_asnAdminGetUserProfile;
			case "asnAdminGetUserProfiles":
				return OperationIDs.OPID_asnAdminGetUserProfiles;
			case "asnAdminSetUserProfile":
				return OperationIDs.OPID_asnAdminSetUserProfile;
			case "asnAdminRemoveUserProfile":
				return OperationIDs.OPID_asnAdminRemoveUserProfile;
			case "asnAdminAddUserProfile":
				return OperationIDs.OPID_asnAdminAddUserProfile;
			case "asnAdminGetComputerProfile":
				return OperationIDs.OPID_asnAdminGetComputerProfile;
			case "asnAdminSetComputerProfile":
				return OperationIDs.OPID_asnAdminSetComputerProfile;
			case "asnAdminAddComputerProfile":
				return OperationIDs.OPID_asnAdminAddComputerProfile;
			case "asnAdminFindUser":
				return OperationIDs.OPID_asnAdminFindUser;
			case "asnAdminFindGroupProfiles":
				return OperationIDs.OPID_asnAdminFindGroupProfiles;
			case "asnAdminSetGroupProfile":
				return OperationIDs.OPID_asnAdminSetGroupProfile;
			case "asnAdminAddGroupProfile":
				return OperationIDs.OPID_asnAdminAddGroupProfile;
			case "asnAdminRemoveGroupProfile":
				return OperationIDs.OPID_asnAdminRemoveGroupProfile;
			case "asnGetDatabaseManagerSettings":
				return OperationIDs.OPID_asnGetDatabaseManagerSettings;
			case "asnGetNetworkInterfacePorts":
				return OperationIDs.OPID_asnGetNetworkInterfacePorts;
			case "asnGetAvailableLines":
				return OperationIDs.OPID_asnGetAvailableLines;
			case "asnGetUserManagerSettings":
				return OperationIDs.OPID_asnGetUserManagerSettings;
			case "asnAdminGetPhoneJournalSettings":
				return OperationIDs.OPID_asnAdminGetPhoneJournalSettings;
			case "asnAdminSetAnonymousUserAccessToken":
				return OperationIDs.OPID_asnAdminSetAnonymousUserAccessToken;
			case "asnAdminSetAnonymousUserContactData":
				return OperationIDs.OPID_asnAdminSetAnonymousUserContactData;
			case "asnAdminRemoveAnonymousUser":
				return OperationIDs.OPID_asnAdminRemoveAnonymousUser;
			default:
				return undefined;
		}
	}

	// [PrintTSROSEConstructor]
	/**
	 * Constructs the invoke and oninvoke object targeting all the ROSE related parts.
	 *
	 * @param transport - The transport is the connection to the other side. It takes care of delivering the invoke
	 * to us as well as to send invokes and events to the other side. It also holds the logger.
	 * @param handleEvents - Set this to true if you want to receive events or false if the stub should cached them
	 * until you call dispatchEvents();
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public constructor(transport: IASN1Transport, handleEvents: boolean, handler?: Partial<IENetUC_AdminROSE_Handler>) {
		super(transport, handleEvents);

		this.logFilter = [];

		if (handler)
			this.setHandler(handler);
	}

	// [PrintTSROSESetHandler]
	/**
	 * Sets the handler and registers the operations with it
	 *
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public setHandler(handler: Partial<IENetUC_AdminROSE_Handler>): void {
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminLogin, "asnAdminLogin");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminGetUserProfile, "asnAdminGetUserProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminGetUserProfiles, "asnAdminGetUserProfiles");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminSetUserProfile, "asnAdminSetUserProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminRemoveUserProfile, "asnAdminRemoveUserProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminAddUserProfile, "asnAdminAddUserProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminGetComputerProfile, "asnAdminGetComputerProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminSetComputerProfile, "asnAdminSetComputerProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminAddComputerProfile, "asnAdminAddComputerProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminFindUser, "asnAdminFindUser");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminFindGroupProfiles, "asnAdminFindGroupProfiles");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminSetGroupProfile, "asnAdminSetGroupProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminAddGroupProfile, "asnAdminAddGroupProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminRemoveGroupProfile, "asnAdminRemoveGroupProfile");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetDatabaseManagerSettings, "asnGetDatabaseManagerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetNetworkInterfacePorts, "asnGetNetworkInterfacePorts");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetAvailableLines, "asnGetAvailableLines");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetUserManagerSettings, "asnGetUserManagerSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminGetPhoneJournalSettings, "asnAdminGetPhoneJournalSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminSetAnonymousUserAccessToken, "asnAdminSetAnonymousUserAccessToken");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminSetAnonymousUserContactData, "asnAdminSetAnonymousUserContactData");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAdminRemoveAnonymousUser, "asnAdminRemoveAnonymousUser");
		this.transport.registerModuleVersion("ENetUC_Admin", 8, 0);
	}

	// [PrintTSROSEInvokeMethods]

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminLoginArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminLoginResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminLogin(argument: ENetUC_Admin.AsnAdminLoginArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminLoginResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminLoginResult, OperationIDs.OPID_asnAdminLogin, "asnAdminLogin", Converter.AsnAdminLoginArgument_Converter, Converter.AsnAdminLoginResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminGetUserProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminGetUserProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminGetUserProfile(argument: ENetUC_Admin.AsnAdminGetUserProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminGetUserProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminGetUserProfileResult, OperationIDs.OPID_asnAdminGetUserProfile, "asnAdminGetUserProfile", Converter.AsnAdminGetUserProfileArgument_Converter, Converter.AsnAdminGetUserProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminGetUserProfilesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminGetUserProfilesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminGetUserProfiles(argument: ENetUC_Admin.AsnAdminGetUserProfilesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminGetUserProfilesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminGetUserProfilesResult, OperationIDs.OPID_asnAdminGetUserProfiles, "asnAdminGetUserProfiles", Converter.AsnAdminGetUserProfilesArgument_Converter, Converter.AsnAdminGetUserProfilesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminSetUserProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminSetUserProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminSetUserProfile(argument: ENetUC_Admin.AsnAdminSetUserProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminSetUserProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminSetUserProfileResult, OperationIDs.OPID_asnAdminSetUserProfile, "asnAdminSetUserProfile", Converter.AsnAdminSetUserProfileArgument_Converter, Converter.AsnAdminSetUserProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminRemoveUserProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminRemoveUserProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminRemoveUserProfile(argument: ENetUC_Admin.AsnAdminRemoveUserProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminRemoveUserProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminRemoveUserProfileResult, OperationIDs.OPID_asnAdminRemoveUserProfile, "asnAdminRemoveUserProfile", Converter.AsnAdminRemoveUserProfileArgument_Converter, Converter.AsnAdminRemoveUserProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminAddUserProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminAddUserProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminAddUserProfile(argument: ENetUC_Admin.AsnAdminAddUserProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminAddUserProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminAddUserProfileResult, OperationIDs.OPID_asnAdminAddUserProfile, "asnAdminAddUserProfile", Converter.AsnAdminAddUserProfileArgument_Converter, Converter.AsnAdminAddUserProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminGetComputerProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminGetComputerProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminGetComputerProfile(argument: ENetUC_Admin.AsnAdminGetComputerProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminGetComputerProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminGetComputerProfileResult, OperationIDs.OPID_asnAdminGetComputerProfile, "asnAdminGetComputerProfile", Converter.AsnAdminGetComputerProfileArgument_Converter, Converter.AsnAdminGetComputerProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminSetComputerProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminSetComputerProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminSetComputerProfile(argument: ENetUC_Admin.AsnAdminSetComputerProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminSetComputerProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminSetComputerProfileResult, OperationIDs.OPID_asnAdminSetComputerProfile, "asnAdminSetComputerProfile", Converter.AsnAdminSetComputerProfileArgument_Converter, Converter.AsnAdminSetComputerProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminAddComputerProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminAddComputerProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminAddComputerProfile(argument: ENetUC_Admin.AsnAdminAddComputerProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminAddComputerProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminAddComputerProfileResult, OperationIDs.OPID_asnAdminAddComputerProfile, "asnAdminAddComputerProfile", Converter.AsnAdminAddComputerProfileArgument_Converter, Converter.AsnAdminAddComputerProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminFindUserArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminFindUserResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminFindUser(argument: ENetUC_Admin.AsnAdminFindUserArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminFindUserResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminFindUserResult, OperationIDs.OPID_asnAdminFindUser, "asnAdminFindUser", Converter.AsnAdminFindUserArgument_Converter, Converter.AsnAdminFindUserResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminFindGroupProfilesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminFindGroupProfilesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminFindGroupProfiles(argument: ENetUC_Admin.AsnAdminFindGroupProfilesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminFindGroupProfilesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminFindGroupProfilesResult, OperationIDs.OPID_asnAdminFindGroupProfiles, "asnAdminFindGroupProfiles", Converter.AsnAdminFindGroupProfilesArgument_Converter, Converter.AsnAdminFindGroupProfilesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminSetGroupProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminSetGroupProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminSetGroupProfile(argument: ENetUC_Admin.AsnAdminSetGroupProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminSetGroupProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminSetGroupProfileResult, OperationIDs.OPID_asnAdminSetGroupProfile, "asnAdminSetGroupProfile", Converter.AsnAdminSetGroupProfileArgument_Converter, Converter.AsnAdminSetGroupProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminAddGroupProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminAddGroupProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminAddGroupProfile(argument: ENetUC_Admin.AsnAdminAddGroupProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminAddGroupProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminAddGroupProfileResult, OperationIDs.OPID_asnAdminAddGroupProfile, "asnAdminAddGroupProfile", Converter.AsnAdminAddGroupProfileArgument_Converter, Converter.AsnAdminAddGroupProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminRemoveGroupProfileArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminRemoveGroupProfileResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminRemoveGroupProfile(argument: ENetUC_Admin.AsnAdminRemoveGroupProfileArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminRemoveGroupProfileResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminRemoveGroupProfileResult, OperationIDs.OPID_asnAdminRemoveGroupProfile, "asnAdminRemoveGroupProfile", Converter.AsnAdminRemoveGroupProfileArgument_Converter, Converter.AsnAdminRemoveGroupProfileResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetDatabaseManagerSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetDatabaseManagerSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetDatabaseManagerSettings(argument: ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnGetDatabaseManagerSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnGetDatabaseManagerSettingsResult, OperationIDs.OPID_asnGetDatabaseManagerSettings, "asnGetDatabaseManagerSettings", Converter.AsnGetDatabaseManagerSettingsArgument_Converter, Converter.AsnGetDatabaseManagerSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetNetworkInterfacePortsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetNetworkInterfacePortsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetNetworkInterfacePorts(argument: ENetUC_Admin.AsnGetNetworkInterfacePortsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnGetNetworkInterfacePortsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnGetNetworkInterfacePortsResult, OperationIDs.OPID_asnGetNetworkInterfacePorts, "asnGetNetworkInterfacePorts", Converter.AsnGetNetworkInterfacePortsArgument_Converter, Converter.AsnGetNetworkInterfacePortsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetAvailableLinesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetAvailableLinesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetAvailableLines(argument: ENetUC_Admin.AsnGetAvailableLinesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnGetAvailableLinesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnGetAvailableLinesResult, OperationIDs.OPID_asnGetAvailableLines, "asnGetAvailableLines", Converter.AsnGetAvailableLinesArgument_Converter, Converter.AsnGetAvailableLinesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetUserManagerSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetUserManagerSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetUserManagerSettings(argument: ENetUC_Admin.AsnGetUserManagerSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnGetUserManagerSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnGetUserManagerSettingsResult, OperationIDs.OPID_asnGetUserManagerSettings, "asnGetUserManagerSettings", Converter.AsnGetUserManagerSettingsArgument_Converter, Converter.AsnGetUserManagerSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAdminGetPhoneJournalSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminGetPhoneJournalSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminGetPhoneJournalSettings(argument: ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminGetPhoneJournalSettingsResult, OperationIDs.OPID_asnAdminGetPhoneJournalSettings, "asnAdminGetPhoneJournalSettings", Converter.AsnAdminGetPhoneJournalSettingsArgument_Converter, Converter.AsnAdminGetPhoneJournalSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Update accessToken for PublicUsers
	 *
	 * @param argument - An AsnAdminSetAnonymousUserAccessTokenArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminSetAnonymousUserAccessTokenResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminSetAnonymousUserAccessToken(argument: ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenResult, OperationIDs.OPID_asnAdminSetAnonymousUserAccessToken, "asnAdminSetAnonymousUserAccessToken", Converter.AsnAdminSetAnonymousUserAccessTokenArgument_Converter, Converter.AsnAdminSetAnonymousUserAccessTokenResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * create or update contactdata for PublicUsers
	 *
	 * @param argument - An AsnAdminSetAnonymousUserContactDataArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminSetAnonymousUserContactDataResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminSetAnonymousUserContactData(argument: ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminSetAnonymousUserContactDataResult, OperationIDs.OPID_asnAdminSetAnonymousUserContactData, "asnAdminSetAnonymousUserContactData", Converter.AsnAdminSetAnonymousUserContactDataArgument_Converter, Converter.AsnAdminSetAnonymousUserContactDataResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * remove PublicUser from userdatabase
	 *
	 * @param argument - An AsnAdminRemoveAnonymousUserArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAdminRemoveAnonymousUserResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAdminRemoveAnonymousUser(argument: ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_Admin.AsnAdminRemoveAnonymousUserResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_Admin.AsnAdminRemoveAnonymousUserResult, OperationIDs.OPID_asnAdminRemoveAnonymousUser, "asnAdminRemoveAnonymousUser", Converter.AsnAdminRemoveAnonymousUserArgument_Converter, Converter.AsnAdminRemoveAnonymousUserResult_Converter, invokeContext);
	}

	// [PrintTSROSEOnInvokeswitchCase]
	/**
	 * This is the central onInvoke method that is called whenever a method of this module is called.
	 * Based on the operationID we step into the decoding of the method argument and call the method in the handler.
	 * The result is then again encoded and send to the other side.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the metho in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled, ROSEResult for the invoke result, ROSEError for an error or undefined if an event was called
	 */
	public async onInvoke(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_AdminROSE_Handler): Promise<ROSEReject | ROSEResult | ROSEError | undefined> {
		switch (invoke.operationID) {
			case OperationIDs.OPID_asnAdminLogin:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminLogin, ENetUC_Admin.AsnAdminLoginArgument, Converter.AsnAdminLoginArgument_Converter, Converter.AsnAdminLoginResult_Converter, handler, handler.onInvoke_asnAdminLogin, invokeContext);
			case OperationIDs.OPID_asnAdminGetUserProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminGetUserProfile, ENetUC_Admin.AsnAdminGetUserProfileArgument, Converter.AsnAdminGetUserProfileArgument_Converter, Converter.AsnAdminGetUserProfileResult_Converter, handler, handler.onInvoke_asnAdminGetUserProfile, invokeContext);
			case OperationIDs.OPID_asnAdminGetUserProfiles:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminGetUserProfiles, ENetUC_Admin.AsnAdminGetUserProfilesArgument, Converter.AsnAdminGetUserProfilesArgument_Converter, Converter.AsnAdminGetUserProfilesResult_Converter, handler, handler.onInvoke_asnAdminGetUserProfiles, invokeContext);
			case OperationIDs.OPID_asnAdminSetUserProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminSetUserProfile, ENetUC_Admin.AsnAdminSetUserProfileArgument, Converter.AsnAdminSetUserProfileArgument_Converter, Converter.AsnAdminSetUserProfileResult_Converter, handler, handler.onInvoke_asnAdminSetUserProfile, invokeContext);
			case OperationIDs.OPID_asnAdminRemoveUserProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminRemoveUserProfile, ENetUC_Admin.AsnAdminRemoveUserProfileArgument, Converter.AsnAdminRemoveUserProfileArgument_Converter, Converter.AsnAdminRemoveUserProfileResult_Converter, handler, handler.onInvoke_asnAdminRemoveUserProfile, invokeContext);
			case OperationIDs.OPID_asnAdminAddUserProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminAddUserProfile, ENetUC_Admin.AsnAdminAddUserProfileArgument, Converter.AsnAdminAddUserProfileArgument_Converter, Converter.AsnAdminAddUserProfileResult_Converter, handler, handler.onInvoke_asnAdminAddUserProfile, invokeContext);
			case OperationIDs.OPID_asnAdminGetComputerProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminGetComputerProfile, ENetUC_Admin.AsnAdminGetComputerProfileArgument, Converter.AsnAdminGetComputerProfileArgument_Converter, Converter.AsnAdminGetComputerProfileResult_Converter, handler, handler.onInvoke_asnAdminGetComputerProfile, invokeContext);
			case OperationIDs.OPID_asnAdminSetComputerProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminSetComputerProfile, ENetUC_Admin.AsnAdminSetComputerProfileArgument, Converter.AsnAdminSetComputerProfileArgument_Converter, Converter.AsnAdminSetComputerProfileResult_Converter, handler, handler.onInvoke_asnAdminSetComputerProfile, invokeContext);
			case OperationIDs.OPID_asnAdminAddComputerProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminAddComputerProfile, ENetUC_Admin.AsnAdminAddComputerProfileArgument, Converter.AsnAdminAddComputerProfileArgument_Converter, Converter.AsnAdminAddComputerProfileResult_Converter, handler, handler.onInvoke_asnAdminAddComputerProfile, invokeContext);
			case OperationIDs.OPID_asnAdminFindUser:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminFindUser, ENetUC_Admin.AsnAdminFindUserArgument, Converter.AsnAdminFindUserArgument_Converter, Converter.AsnAdminFindUserResult_Converter, handler, handler.onInvoke_asnAdminFindUser, invokeContext);
			case OperationIDs.OPID_asnAdminFindGroupProfiles:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminFindGroupProfiles, ENetUC_Admin.AsnAdminFindGroupProfilesArgument, Converter.AsnAdminFindGroupProfilesArgument_Converter, Converter.AsnAdminFindGroupProfilesResult_Converter, handler, handler.onInvoke_asnAdminFindGroupProfiles, invokeContext);
			case OperationIDs.OPID_asnAdminSetGroupProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminSetGroupProfile, ENetUC_Admin.AsnAdminSetGroupProfileArgument, Converter.AsnAdminSetGroupProfileArgument_Converter, Converter.AsnAdminSetGroupProfileResult_Converter, handler, handler.onInvoke_asnAdminSetGroupProfile, invokeContext);
			case OperationIDs.OPID_asnAdminAddGroupProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminAddGroupProfile, ENetUC_Admin.AsnAdminAddGroupProfileArgument, Converter.AsnAdminAddGroupProfileArgument_Converter, Converter.AsnAdminAddGroupProfileResult_Converter, handler, handler.onInvoke_asnAdminAddGroupProfile, invokeContext);
			case OperationIDs.OPID_asnAdminRemoveGroupProfile:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminRemoveGroupProfile, ENetUC_Admin.AsnAdminRemoveGroupProfileArgument, Converter.AsnAdminRemoveGroupProfileArgument_Converter, Converter.AsnAdminRemoveGroupProfileResult_Converter, handler, handler.onInvoke_asnAdminRemoveGroupProfile, invokeContext);
			case OperationIDs.OPID_asnGetDatabaseManagerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetDatabaseManagerSettings, ENetUC_Admin.AsnGetDatabaseManagerSettingsArgument, Converter.AsnGetDatabaseManagerSettingsArgument_Converter, Converter.AsnGetDatabaseManagerSettingsResult_Converter, handler, handler.onInvoke_asnGetDatabaseManagerSettings, invokeContext);
			case OperationIDs.OPID_asnGetNetworkInterfacePorts:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetNetworkInterfacePorts, ENetUC_Admin.AsnGetNetworkInterfacePortsArgument, Converter.AsnGetNetworkInterfacePortsArgument_Converter, Converter.AsnGetNetworkInterfacePortsResult_Converter, handler, handler.onInvoke_asnGetNetworkInterfacePorts, invokeContext);
			case OperationIDs.OPID_asnGetAvailableLines:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetAvailableLines, ENetUC_Admin.AsnGetAvailableLinesArgument, Converter.AsnGetAvailableLinesArgument_Converter, Converter.AsnGetAvailableLinesResult_Converter, handler, handler.onInvoke_asnGetAvailableLines, invokeContext);
			case OperationIDs.OPID_asnGetUserManagerSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetUserManagerSettings, ENetUC_Admin.AsnGetUserManagerSettingsArgument, Converter.AsnGetUserManagerSettingsArgument_Converter, Converter.AsnGetUserManagerSettingsResult_Converter, handler, handler.onInvoke_asnGetUserManagerSettings, invokeContext);
			case OperationIDs.OPID_asnAdminGetPhoneJournalSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminGetPhoneJournalSettings, ENetUC_Admin.AsnAdminGetPhoneJournalSettingsArgument, Converter.AsnAdminGetPhoneJournalSettingsArgument_Converter, Converter.AsnAdminGetPhoneJournalSettingsResult_Converter, handler, handler.onInvoke_asnAdminGetPhoneJournalSettings, invokeContext);
			case OperationIDs.OPID_asnAdminSetAnonymousUserAccessToken:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminSetAnonymousUserAccessToken, ENetUC_Admin.AsnAdminSetAnonymousUserAccessTokenArgument, Converter.AsnAdminSetAnonymousUserAccessTokenArgument_Converter, Converter.AsnAdminSetAnonymousUserAccessTokenResult_Converter, handler, handler.onInvoke_asnAdminSetAnonymousUserAccessToken, invokeContext);
			case OperationIDs.OPID_asnAdminSetAnonymousUserContactData:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminSetAnonymousUserContactData, ENetUC_Admin.AsnAdminSetAnonymousUserContactDataArgument, Converter.AsnAdminSetAnonymousUserContactDataArgument_Converter, Converter.AsnAdminSetAnonymousUserContactDataResult_Converter, handler, handler.onInvoke_asnAdminSetAnonymousUserContactData, invokeContext);
			case OperationIDs.OPID_asnAdminRemoveAnonymousUser:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAdminRemoveAnonymousUser, ENetUC_Admin.AsnAdminRemoveAnonymousUserArgument, Converter.AsnAdminRemoveAnonymousUserArgument_Converter, Converter.AsnAdminRemoveAnonymousUserResult_Converter, handler, handler.onInvoke_asnAdminRemoveAnonymousUser, invokeContext);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_AdminROSE`);
		}
	}
}
