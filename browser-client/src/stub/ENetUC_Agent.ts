// [PrintTSCodeOne]
// [PrintTSComments]
/*
 * ENetUC_Agent.ts
 * "UC-Server-Access-Protocol-Agent" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
/**
 * Agent\/AgentGroup\/ACD interface.
 * ## Module description
 * This module describes the functions for agents for ACD and contact portal functionalities.
 *
 * A client represents a user who can be an member in any number of agent groups.&lt;br \/&gt;
 * An agent is described by the ContactURI of the user (SIP address incl. \"sip:\" before) or a LineURI (Cti line, format \"tel:xyz\@pbx text\").
 * To login to a group, for example, you usually need the AgencyURI and the GroupURI. This allows the UCServer to identify exactly which agent should be used in which group.&lt;br \/&gt;
 * The client receives the necessary values when it gets them back as a result of asnAgentMonitorStart.
 *
 * ### Requirements for using the interface
 * A user gets access to the agent interface:
 * - If the user has activated the service \"Business card for anonymous users\" via his own or global profile in the UCServer administration.
 * - If he is a member of one or more groups that have been activated in the UCServer administration as an \"agent group\".
 * - If (identified by line ID) he has a line known to be part of an ACD group at the corresponding ECSTA.
 *
 * ### Functions
 * A user can set the following status on the interface:
 * - \"login\"\/\"logout\"
 * - \"Working after call\"
 * - \"ready\"\/\"not ready\" (still a \"work in progress\")
 *
 * ProCall 5.1 supports ACD functionality only for Panasonic telephone systems.&lt;br \/&gt;
 * As of ProCall 6, the agent interface is used for the contact portal and business card. Further PBX's are in development.
 *
 * ## Simple procedure if the agent groups are to be used ##
 * 1. The user must only call asnAgentMonitorStart; this registers the agent's events and supplies the list of groups in which the user is agent.
 * 2. From this point on, the UCServer sends events if the status of the user in these groups changes.
 * 3. Change the state of the agent:
 * 3.1. asnAgentLogin - Sets the status of the user to \"login\". Note: replaces asnAgentSetState(not ready).
 * More parameters may be required for the login. These can be found in the AgentGroupInfos
 * 3.2. asnAgentLogoff - Sets the status of the user to \"logoff\". Note: replaces asAgentSetState(noagent).
 * 3.3. asnAgentSetState - With this you can set the status to \"ready\", \"not ready\" and \"working after call\". Which states can be set is provided by the server in the result of asnAgentMonitorStart. See also AsnAgentGroupInfo.
 * 4. Log off events with asnAgentMonitorStop.
 *
 * With these five functions it is possible to operate the ACD\/presence groups on the UCServer.
 *
 * ## AsnAgentGroupInfo
 * AsnAgentGroupInfo structures are usually exchanged in the analysis and results. This structure contains the description of an agent\/ACD group.&lt;br \/&gt;
 * AsnAgentGroupInfo contains the data about an agent group. The following are important:
 * - iGroupCapabilities: This shows which status changes are supported. See also AsnAgentGroupCapabilitiesEnum. If the highest bit is set (0x80000000), this group is a PBX\/ACD group. If the bit is not set, the group is managed by the UCServer.
 * - iAgentState: The current status of the agent, i.e. the user in this group.
 * - optionalParams,key \"AgentLoginRequiredParameters\": In the case of a PBX\/ACD group, this integer contains information about which parameters are required for logging on to the ACD group. The values (bit field) are described in AsnAgentLoginRequiredParametersEnum.
 *
 *
 * ## Events
 * For any changes to the agent groups and agent status, two events are sent by the UCServer to the registered clients:
 * - asnAgentNotifyGroupsChanged - There have been some changes in the user's available groups
 * - asnAgentNotifyStateChanged - The user's status in a group has changed.
 *
 * ## Comment
 * The API is user centered. This means if the server is asked for the AgentGroupInfos,
 * the server displays the information concerning its group membership in a simple list.
 * The most simple for the normal user.
 *
 * ## Supervisor Interface
 * Not implemented yet.
 *
 * ## Anonymous users
 * Anonymous users can query which groups are available, including users, and then display the corresponding presence and login\/logoff status based on the use case.
 */
// [PrintTSImports]
import * as asn1ts from "@estos/asn1ts";
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_ServicesAgents from "./ENetUC_ServicesAgents";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_Agent";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAgentLoginRequiredParametersEnum {
	/** AgentID Required (for example, the PIN) */
	eAGENTLOGINREQUIRESAGENTID = 1,
	/** GroupID Required */
	eAGENTLOGINREQUIRESGROUPID = 2,
	/** Password Required */
	eAGENTLOGINREQUIRESPASSWORD = 4,
	/** DeviceID Required */
	eAGENTLOGINREQUIRESDEVICEID = 8
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnSupportedAgentStatesEnum {
	/** \"logout\" \/ \"no agent\" */
	eAGENTSTATELOGGEDOUT = 1,
	/** \"not ready\" */
	eAGENTSTATELOGGEDINNOTREADY = 2,
	/** \"ready\" */
	eAGENTSTATELOGGEDINREADY = 4,
	/** \"busy\" */
	eAGENTSTATELOGGEDINBUSY = 8,
	/** \"working after call\" */
	eAGENTSTATELOGGEDINWORKINGAFTERCALL = 16
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAgentStateEnum {
	/** Agent logged out from group - (is set implicitly at AgentLogoff() by the server) */
	eAGENTSTATENOAGENT = 0,
	/** Agent unavailable */
	eAGENTSTATENOTREADY = 1,
	/** Agent available in group - (is initially set at AgentLogin() by the server) */
	eAGENTSTATEREADY = 2,
	/** Agent is busy */
	eAGENTSTATEBUSY = 3,
	/** Agent is working after a call */
	eAGENTSTATEWORKINGAFTERCALL = 4
}

// [PrintTSTypeDefCode]
// [PrintTSEnumDefCode]
export enum AsnAgentGroupCapabilitiesEnum {
	/** (0x01) \"login\" is supported */
	eAGENTCAPSUPPORTEDAGENTREQUESTSLOGIN = 1,
	/** (0x02) \"logout\" is supported \/ same as state eAGENTSTATENOAGENT */
	eAGENTCAPSUPPORTEDAGENTREQUESTSLOGOUT = 2,
	/** (0x04) \"not ready\" is supported */
	eAGENTCAPSUPPORTEDAGENTREQUESTSNOTREADY = 4,
	/** (0x08) \"ready\" is supported */
	eAGENTCAPSUPPORTEDAGENTREQUESTSREADY = 8,
	/** (0x10) \"busy\" is supported */
	eAGENTCAPSUPPORTEDAGENTREQUESTSBUSY = 16,
	/** (0x20) \"working after call\" is supported */
	eAGENTCAPSUPPORTEDAGENTREQUESTSWORKINGAFTERCALL = 32,
	/** (0xff) (currently not supported) */
	eAGENTCAPSUPPORTEDAGENTREQUESTSMASK = 255,
	/** (0x20000000) The group is a (Contact)Portal Group */
	eAGENTCAPISPORTALGROUP = 536870912,
	/**
	 * (0x40000000) The agents in this group can handle PUBLIC-CHATs
	 * See AsnConversationType.
	 */
	eAGENTCAPISPUBLICCHATGROUP = 1073741824
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * AsnAgentGroupInfo encapsulates the data for an agent (ACD) group from the agent's point of view.
 * An AsnAgentGroupInfo can only be uniquely identified with the combination of u8sAgentURI and u8sGroupURI.
 *
 * ## OptionalParameters - Subsequent Enhancements to the data structure ##
 * - \"PhoneNumber\" String phone number to be displayed in the client; only server to client.
 * - \"AgentLoginRequiredParameters\" DWORD bit flags that indicate which data the PBX requires for the user\/line logon. Only sent server to client. Not filled for contact portal\/business card. See AsnAgentLoginRequiredParametersEnum.
 * - \"SupportedAgentStates\" DWORD bit flags indicating which agents status values can be used in this group. Only sent server to client. See also AsnSupportedAgentStatesEnum.
 */
export class AsnAgentGroupInfo {
	public constructor(that: AsnAgentGroupInfo) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentGroupInfo {
		return new AsnAgentGroupInfo({
			u8sAgentURI: "",
			u8sGroupURI: "",
			u8sDisplayName: "",
			iGroupCapabilities: 0,
			iAgentState: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sAgentURI",
			"u8sGroupURI",
			"u8sDisplayName",
			"iGroupCapabilities",
			"iAgentState"
		];
		if (bIncludeOptionals)
			p.push("optionalParams");
		return p;
	}

	public static type = "AsnAgentGroupInfo";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentGroupInfo",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sAgentURI" }),
				new asn1ts.Utf8String({ name: "u8sGroupURI" }),
				new asn1ts.Utf8String({ name: "u8sDisplayName" }),
				new asn1ts.Integer({ name: "iGroupCapabilities" }),
				new asn1ts.Integer({ name: "iAgentState" }),
				ENetUC_Common.AsnOptionalParameters.getASN1Schema({ name: "optionalParams", idBlock: { optionalID: 0 } }),
				new asn1ts.Extension()
			]
		});
	}

	/** URI of the group agent (LineURI or ContactURI) e.g. \"tel:+4912345678;phys=678\@ECSTA for OpenScape Business\" or \"sip:test.tester\@test.de\" */
	public u8sAgentURI!: string;
	/** URI of the group (e.g. \"pbxg:601\@ECSTA for Panasonic\" or \"sip:mygroup\@estos.de\"). */
	public u8sGroupURI!: string;
	/** Display name of the group. */
	public u8sDisplayName!: string;
	/**
	 * This shows which status changes are supported. See also AsnAgentGroupCapabilitiesEnum.
	 * If the highest bit is set (0x80000000), this group is a PBX\/ACD group.
	 * If the bit is not set, the group is managed by the UCServer.
	 * See AsnAgentGroupCapabilitiesEnum.
	 */
	public iGroupCapabilities!: number;
	/**
	 * Agent status of the agent within the group as defined in AsnAgentStateEnum.
	 * See AsnAgentStateEnum.
	 */
	public iAgentState!: number;
	/**
	 * OptionalParameters - Subsequent extensions to the data structure
	 * - \"PhoneNumber\" String phone number for display in client; only server to client.
	 * - \"AgentLoginRequiredParameters\" DWORD bit flags that indicate which data the PBX requires for the user\/line logon. Only sent server to client. Not filled for contact portal\/business card. See AsnAgentLoginRequiredParametersEnum.
	 * - \"SupportedAgentStates\" DWORD bit flags indicating which agents status values can be used in this group. Only sent server to client. See AsnSupportedAgentStatesEnum.
	 */
	public optionalParams?: ENetUC_Common.AsnOptionalParameters;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAgentMonitorStartArgument {
	public constructor(that: AsnAgentMonitorStartArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentMonitorStartArgument {
		return new AsnAgentMonitorStartArgument({
			u8sAgentURI: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sAgentURI"
		];
		return p;
	}

	public static type = "AsnAgentMonitorStartArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentMonitorStartArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sAgentURI" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Agent URI e.g. \"sip:xyz\@domain.de\". An empty string is supplemented by the UCServer with the ID of the logged on user. */
	public u8sAgentURI!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * The CrossRefID that was returned by the server at asnAgentMonitorStart.
 */
export class AsnAgentMonitorStopArgument {
	public constructor(that: AsnAgentMonitorStopArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentMonitorStopArgument {
		return new AsnAgentMonitorStopArgument({
			u8sMonitorCrossRefID: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sMonitorCrossRefID"
		];
		return p;
	}

	public static type = "AsnAgentMonitorStopArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentMonitorStopArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sMonitorCrossRefID" }),
				new asn1ts.Extension()
			]
		});
	}

	public u8sMonitorCrossRefID!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * This structure is only restored if successful. If the call is unsuccessful, it will return an AsnRequestError.
 */
export class AsnAgentMonitorStopResult {
	public constructor(that?: AsnAgentMonitorStopResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentMonitorStopResult {
		return new AsnAgentMonitorStopResult();
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p: string[] = [];
		return p;
	}

	public static type = "AsnAgentMonitorStopResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentMonitorStopResult",
			...params,
			value: [
				new asn1ts.Extension()
			]
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Parameters for Agent Login
 * Parameters for logging in to the agent\/ACD functionality of the PC server (business card, contact portal) or the telephone system.
 */
export class AsnAgentLoginArgument {
	public constructor(that: AsnAgentLoginArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentLoginArgument {
		return new AsnAgentLoginArgument({
			u8sAgentURI: "",
			u8sGroupURI: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sAgentURI",
			"u8sGroupURI"
		];
		if (bIncludeOptionals)
			p.push("acdLoginData");
		return p;
	}

	public static type = "AsnAgentLoginArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentLoginArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sAgentURI" }),
				new asn1ts.Utf8String({ name: "u8sGroupURI" }),
				ENetUC_ServicesAgents.AsnAgentACDLoginData.getASN1Schema({ name: "acdLoginData", idBlock: { optionalID: 0 } }),
				new asn1ts.Extension()
			]
		});
	}

	/**
	 * Group agent URI (LineURI or ContactURI) e.g. \"tel:\" or \"sip:\".
	 * If the URI starts with \"tel:\", the login is transferred to the specified line and then to the telephone system.
	 * \"sip:\" indicates that the user is logging in for the contact portal\/business card.
	 * The information can be obtained from the AsnGroupInfo
	 */
	public u8sAgentURI!: string;
	/**
	 * Group URI (e.g. \"pbxg:601\@ECSTA for Panasonic\" or \"sip:mygroup\@estos.de\").
	 * This identifies the group to which the user is to be logged in to.
	 * The information can be obtained from the AsnGroupInfo.
	 */
	public u8sGroupURI!: string;
	/** For PBX ACD, additional data may be required for login. See AsnAgentACDLoginData for details. */
	public acdLoginData?: ENetUC_ServicesAgents.AsnAgentACDLoginData;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Result for agent login
 * If the server returns the result, the login was successful.
 * If the login fails, the AsnRequestError is returned as the result.
 * This contains more details about the error.&lt;br \/&gt;
 * This structure is only returned if successful. If the call is unsuccessful, AsnRequestError is returned.
 */
export class AsnAgentLoginResult {
	public constructor(that?: AsnAgentLoginResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentLoginResult {
		return new AsnAgentLoginResult();
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p: string[] = [];
		return p;
	}

	public static type = "AsnAgentLoginResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentLoginResult",
			...params,
			value: [
				new asn1ts.Extension()
			]
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Argument for agent logoff(Automatic Call Distribution)
 */
export class AsnAgentLogoffArgument {
	public constructor(that: AsnAgentLogoffArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentLogoffArgument {
		return new AsnAgentLogoffArgument({
			u8sAgentURI: "",
			u8sGroupURI: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sAgentURI",
			"u8sGroupURI"
		];
		return p;
	}

	public static type = "AsnAgentLogoffArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentLogoffArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sAgentURI" }),
				new asn1ts.Utf8String({ name: "u8sGroupURI" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Group agent URI (LineURI or ContactURI) e.g. \"tel:\" or \"sip:\" */
	public u8sAgentURI!: string;
	/** Group URI (e.g. \"pbxg:601\@ECSTA for Panasonic\" or \"sip:mygroup\@estos.de\"). */
	public u8sGroupURI!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Result for agent logoff
 * This structure is only returned if successful. If the call is unsuccessful, an AsnRequestError is returned.
 */
export class AsnAgentLogoffResult {
	public constructor(that?: AsnAgentLogoffResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentLogoffResult {
		return new AsnAgentLogoffResult();
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p: string[] = [];
		return p;
	}

	public static type = "AsnAgentLogoffResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentLogoffResult",
			...params,
			value: [
				new asn1ts.Extension()
			]
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Set new Agent State
 */
export class AsnAgentSetStateArgument {
	public constructor(that: AsnAgentSetStateArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentSetStateArgument {
		return new AsnAgentSetStateArgument({
			u8sAgentURI: "",
			iAgentState: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sAgentURI",
			"iAgentState"
		];
		if (bIncludeOptionals)
			p.push("u8sGroupURI");
		return p;
	}

	public static type = "AsnAgentSetStateArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentSetStateArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sAgentURI" }),
				new asn1ts.Utf8String({ name: "u8sGroupURI", idBlock: { optionalID: 0 } }),
				new asn1ts.Integer({ name: "iAgentState" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Group agent URI (LineURI or ContactURI) e.g. \"tel:\" or \"sip:\" */
	public u8sAgentURI!: string;
	/**
	 * Group URI (e.g. \"pbxg:601\@ECSTA for Panasonic\" or \"sip:mygroup\@estos.de\").
	 * The information can be obtained from the AsnGroupInfo.
	 */
	public u8sGroupURI?: string;
	/** Agent status of the agent to be set as defined in AsnAgentStateEnum. */
	public iAgentState!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Result for AsnAgentSetState
 * This structure is only returned if successful. If the call is unsuccessful, an AsnRequestError is returned.
 */
export class AsnAgentSetStateResult {
	public constructor(that?: AsnAgentSetStateResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentSetStateResult {
		return new AsnAgentSetStateResult();
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p: string[] = [];
		return p;
	}

	public static type = "AsnAgentSetStateResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentSetStateResult",
			...params,
			value: [
				new asn1ts.Extension()
			]
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Argument for AgentNotifyStateChanged. Included is the CrossRefID for which the event is transmitted, the AgencyURI and GroupURI (unique agent group assignment) and the new agent state.
 */
export class AsnAgentNotifyStateChangedArgument {
	public constructor(that: AsnAgentNotifyStateChangedArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentNotifyStateChangedArgument {
		return new AsnAgentNotifyStateChangedArgument({
			u8sMonitorCrossRefID: "",
			u8sAgentURI: "",
			u8sGroupURI: "",
			iAgentState: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sMonitorCrossRefID",
			"u8sAgentURI",
			"u8sGroupURI",
			"iAgentState"
		];
		return p;
	}

	public static type = "AsnAgentNotifyStateChangedArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentNotifyStateChangedArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sMonitorCrossRefID" }),
				new asn1ts.Utf8String({ name: "u8sAgentURI" }),
				new asn1ts.Utf8String({ name: "u8sGroupURI" }),
				new asn1ts.Integer({ name: "iAgentState" }),
				new asn1ts.Extension()
			]
		});
	}

	/** CrossrefID for associated events */
	public u8sMonitorCrossRefID!: string;
	/** Agent group URI (LineURI or ContactURI) */
	public u8sAgentURI!: string;
	/** Group URI- must be unique in the UCServer */
	public u8sGroupURI!: string;
	/** AgentState of the agent in the group */
	public iAgentState!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Argument for AgentNotifyAnonymousBlockedChanged.
 */
export class AsnAgentNotifyBlockedRTCChangedArgument {
	public constructor(that: AsnAgentNotifyBlockedRTCChangedArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentNotifyBlockedRTCChangedArgument {
		return new AsnAgentNotifyBlockedRTCChangedArgument({
			listu8sBlockedUserURIs: new ENetUC_Common.UTF8StringList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"listu8sBlockedUserURIs"
		];
		return p;
	}

	public static type = "AsnAgentNotifyBlockedRTCChangedArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentNotifyBlockedRTCChangedArgument",
			...params,
			value: [
				ENetUC_Common.UTF8StringList.getASN1Schema({ name: "listu8sBlockedUserURIs" }),
				new asn1ts.Extension()
			]
		});
	}

	/** list of all blocked users */
	public listu8sBlockedUserURIs!: ENetUC_Common.UTF8StringList;
}

// [PrintTSTypeDefCode]
// [PrintTSSetOfDefCode]
// [PrintTSListClass]
export class AsnAgentGroupInfoList extends Array<AsnAgentGroupInfo> {
	public static getASN1Schema(params?: asn1ts.SequenceOfParams): asn1ts.SequenceOf {
		return new asn1ts.SequenceOf({
			...params,
			value: AsnAgentGroupInfo.getASN1Schema()
		});
	}
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
export class AsnAgentMonitorStartResult {
	public constructor(that: AsnAgentMonitorStartResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentMonitorStartResult {
		return new AsnAgentMonitorStartResult({
			u8sMonitorCrossRefID: "",
			listGroups: new AsnAgentGroupInfoList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sMonitorCrossRefID",
			"listGroups"
		];
		return p;
	}

	public static type = "AsnAgentMonitorStartResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentMonitorStartResult",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sMonitorCrossRefID" }),
				AsnAgentGroupInfoList.getASN1Schema({ name: "listGroups" }),
				new asn1ts.Extension()
			]
		});
	}

	/** CrossrefID for the associated events */
	public u8sMonitorCrossRefID!: string;
	public listGroups!: AsnAgentGroupInfoList;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Argument contains the CrossRefID for which the event is sent and the list of the user's agent groups.
 */
export class AsnAgentNotifyGroupsChangedArgument {
	public constructor(that: AsnAgentNotifyGroupsChangedArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAgentNotifyGroupsChangedArgument {
		return new AsnAgentNotifyGroupsChangedArgument({
			u8sMonitorCrossRefID: "",
			listGroups: new AsnAgentGroupInfoList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sMonitorCrossRefID",
			"listGroups"
		];
		return p;
	}

	public static type = "AsnAgentNotifyGroupsChangedArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAgentNotifyGroupsChangedArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sMonitorCrossRefID" }),
				AsnAgentGroupInfoList.getASN1Schema({ name: "listGroups" }),
				new asn1ts.Extension()
			]
		});
	}

	public u8sMonitorCrossRefID!: string;
	/** complete List of groups */
	public listGroups!: AsnAgentGroupInfoList;
}
