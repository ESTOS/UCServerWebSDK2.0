// [PrintTSROSEHeader]
/**
 * ENetUC_ChatV2ROSE
 * "UC-Server-Access-Protocol-ChatV2" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImports]
// Global imports
import { IENetUC_ChatV2ROSE, IENetUC_ChatV2ROSE_Handler } from "./ENetUC_ChatV2ROSE_Interface";
import { ROSEError, ROSEInvoke, ROSEReject, ROSEResult } from "./SNACCROSE";
import { AsnInvokeProblem, AsnInvokeProblemEnum, createInvokeReject, IASN1Transport, IASN1LogData, IReceiveInvokeContext, IInvokeHandler, ELogSeverity, ROSEBase } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_ChatV2 from "./ENetUC_ChatV2";
import * as Converter from "./ENetUC_ChatV2_Converter";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Journal from "./ENetUC_Journal";
import * as ENetUC_BinaryTransfer from "./ENetUC_BinaryTransfer";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";
import * as ENetUC_Journal_Converter from "./ENetUC_Journal_Converter";
import * as ENetUC_BinaryTransfer_Converter from "./ENetUC_BinaryTransfer_Converter";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_ChatV2ROSE";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEOperationDefines]
export enum OperationIDs {
	OPID_asnChatSubscribeEvents = 1410,
	OPID_asnChatGetDatabaseID = 1411,
	OPID_asnChatGetDiffUpdate = 1412,
	OPID_asnChatGetConversationOverview = 1413,
	OPID_asnChatTextMessage = 1420,
	OPID_asnChatBinaryMessage = 1421,
	OPID_asnChatForwardMessage = 1422,
	OPID_asnChatUserlistModify = 1425,
	OPID_asnChatFindEvents = 1433,
	OPID_asnChatGetEventsRange = 1436,
	OPID_asnChatGetBinaryMessageEvents = 1437,
	OPID_asnChatSetMessagesStatus = 1427,
	OPID_asnChatGetConversations = 1428,
	OPID_asnChatGetConversationID = 1430,
	OPID_asnChatForward = 1429,
	OPID_asnChatIsGlobalDisabled = 1431,
	OPID_asnChatWatchConversation = 1432,
	OPID_asnChatSetUserlist = 1434,
	OPID_asnChatEvent = 1440,
	OPID_asnChatUserStatus = 1441,
	OPID_asnChatDatabaseIDChanged = 1442,
	OPID_asnChatDatabaseMaintenance = 1443,
	OPID_asnChatMuteConversation = 1438,
	OPID_asnChatUnmuteConversation = 1439,
	OPID_asnChatMuteStatusChanged = 1444,
	OPID_asnChatSetConversationAvatar = 1460,
	OPID_asnChatGetConversationAvatar = 1461,
	OPID_asnChatConversationAvatarChanged = 1445,
	OPID_asnChatSetReaction = 1474,
	OPID_asnChatClearReaction = 1475
}

// [PrintTSROSEModuleComment]
/**
 * Text chat functions
 * ## Module description
 * This module defines structures and functions for the text chat functionality of the UCServer.
 *
 * Example for sending a Chat Message from \"ProCall A\" to \"ProCall B\":
 * UML section is not exported to this file!
 */

// [PrintTSROSEClass]
export class ENetUC_ChatV2ROSE extends ROSEBase implements IInvokeHandler, IENetUC_ChatV2ROSE {
	/**
	 * Contains the attributes that have to be filtered from logging
	 * Use logfilter property;property inside the asn1 root comments to specify this list
	 */
	public readonly logFilter: string[];

	/**
	 * The Loggers getLogData callback (used in all the log methods called in this class, add the classname to every log entry)
	 *
	 * @returns - an ILogData log data object provided additional data for all the logger calls in this class
	 */
	public getLogData(): IASN1LogData {
		return {
			className: MODULE_NAME
		};
	}

	/**
	 * Returns the operationName for an operationID
	 *
	 * @param id - the id we want to have the name for
	 * @returns - the name or undefined if not found
	 */
	public getNameForOperationID(id: OperationIDs): string | undefined {
		switch (id) {
			case OperationIDs.OPID_asnChatSubscribeEvents:
				return "asnChatSubscribeEvents";
			case OperationIDs.OPID_asnChatGetDatabaseID:
				return "asnChatGetDatabaseID";
			case OperationIDs.OPID_asnChatGetDiffUpdate:
				return "asnChatGetDiffUpdate";
			case OperationIDs.OPID_asnChatGetConversationOverview:
				return "asnChatGetConversationOverview";
			case OperationIDs.OPID_asnChatTextMessage:
				return "asnChatTextMessage";
			case OperationIDs.OPID_asnChatBinaryMessage:
				return "asnChatBinaryMessage";
			case OperationIDs.OPID_asnChatForwardMessage:
				return "asnChatForwardMessage";
			case OperationIDs.OPID_asnChatUserlistModify:
				return "asnChatUserlistModify";
			case OperationIDs.OPID_asnChatFindEvents:
				return "asnChatFindEvents";
			case OperationIDs.OPID_asnChatGetEventsRange:
				return "asnChatGetEventsRange";
			case OperationIDs.OPID_asnChatGetBinaryMessageEvents:
				return "asnChatGetBinaryMessageEvents";
			case OperationIDs.OPID_asnChatSetMessagesStatus:
				return "asnChatSetMessagesStatus";
			case OperationIDs.OPID_asnChatGetConversations:
				return "asnChatGetConversations";
			case OperationIDs.OPID_asnChatGetConversationID:
				return "asnChatGetConversationID";
			case OperationIDs.OPID_asnChatForward:
				return "asnChatForward";
			case OperationIDs.OPID_asnChatIsGlobalDisabled:
				return "asnChatIsGlobalDisabled";
			case OperationIDs.OPID_asnChatWatchConversation:
				return "asnChatWatchConversation";
			case OperationIDs.OPID_asnChatSetUserlist:
				return "asnChatSetUserlist";
			case OperationIDs.OPID_asnChatEvent:
				return "asnChatEvent";
			case OperationIDs.OPID_asnChatUserStatus:
				return "asnChatUserStatus";
			case OperationIDs.OPID_asnChatDatabaseIDChanged:
				return "asnChatDatabaseIDChanged";
			case OperationIDs.OPID_asnChatDatabaseMaintenance:
				return "asnChatDatabaseMaintenance";
			case OperationIDs.OPID_asnChatMuteConversation:
				return "asnChatMuteConversation";
			case OperationIDs.OPID_asnChatUnmuteConversation:
				return "asnChatUnmuteConversation";
			case OperationIDs.OPID_asnChatMuteStatusChanged:
				return "asnChatMuteStatusChanged";
			case OperationIDs.OPID_asnChatSetConversationAvatar:
				return "asnChatSetConversationAvatar";
			case OperationIDs.OPID_asnChatGetConversationAvatar:
				return "asnChatGetConversationAvatar";
			case OperationIDs.OPID_asnChatConversationAvatarChanged:
				return "asnChatConversationAvatarChanged";
			case OperationIDs.OPID_asnChatSetReaction:
				return "asnChatSetReaction";
			case OperationIDs.OPID_asnChatClearReaction:
				return "asnChatClearReaction";
			default:
				return undefined;
		}
	}

	/**
	 * Returns the operationID for an operationName
	 *
	 * @param name - the name we want to have the id for
	 * @returns - the id or undefined if not found
	 */
	public getIDForOperationName(name: string): OperationIDs | undefined {
		switch (name) {
			case "asnChatSubscribeEvents":
				return OperationIDs.OPID_asnChatSubscribeEvents;
			case "asnChatGetDatabaseID":
				return OperationIDs.OPID_asnChatGetDatabaseID;
			case "asnChatGetDiffUpdate":
				return OperationIDs.OPID_asnChatGetDiffUpdate;
			case "asnChatGetConversationOverview":
				return OperationIDs.OPID_asnChatGetConversationOverview;
			case "asnChatTextMessage":
				return OperationIDs.OPID_asnChatTextMessage;
			case "asnChatBinaryMessage":
				return OperationIDs.OPID_asnChatBinaryMessage;
			case "asnChatForwardMessage":
				return OperationIDs.OPID_asnChatForwardMessage;
			case "asnChatUserlistModify":
				return OperationIDs.OPID_asnChatUserlistModify;
			case "asnChatFindEvents":
				return OperationIDs.OPID_asnChatFindEvents;
			case "asnChatGetEventsRange":
				return OperationIDs.OPID_asnChatGetEventsRange;
			case "asnChatGetBinaryMessageEvents":
				return OperationIDs.OPID_asnChatGetBinaryMessageEvents;
			case "asnChatSetMessagesStatus":
				return OperationIDs.OPID_asnChatSetMessagesStatus;
			case "asnChatGetConversations":
				return OperationIDs.OPID_asnChatGetConversations;
			case "asnChatGetConversationID":
				return OperationIDs.OPID_asnChatGetConversationID;
			case "asnChatForward":
				return OperationIDs.OPID_asnChatForward;
			case "asnChatIsGlobalDisabled":
				return OperationIDs.OPID_asnChatIsGlobalDisabled;
			case "asnChatWatchConversation":
				return OperationIDs.OPID_asnChatWatchConversation;
			case "asnChatSetUserlist":
				return OperationIDs.OPID_asnChatSetUserlist;
			case "asnChatEvent":
				return OperationIDs.OPID_asnChatEvent;
			case "asnChatUserStatus":
				return OperationIDs.OPID_asnChatUserStatus;
			case "asnChatDatabaseIDChanged":
				return OperationIDs.OPID_asnChatDatabaseIDChanged;
			case "asnChatDatabaseMaintenance":
				return OperationIDs.OPID_asnChatDatabaseMaintenance;
			case "asnChatMuteConversation":
				return OperationIDs.OPID_asnChatMuteConversation;
			case "asnChatUnmuteConversation":
				return OperationIDs.OPID_asnChatUnmuteConversation;
			case "asnChatMuteStatusChanged":
				return OperationIDs.OPID_asnChatMuteStatusChanged;
			case "asnChatSetConversationAvatar":
				return OperationIDs.OPID_asnChatSetConversationAvatar;
			case "asnChatGetConversationAvatar":
				return OperationIDs.OPID_asnChatGetConversationAvatar;
			case "asnChatConversationAvatarChanged":
				return OperationIDs.OPID_asnChatConversationAvatarChanged;
			case "asnChatSetReaction":
				return OperationIDs.OPID_asnChatSetReaction;
			case "asnChatClearReaction":
				return OperationIDs.OPID_asnChatClearReaction;
			default:
				return undefined;
		}
	}

	// [PrintTSROSEConstructor]
	/**
	 * Constructs the invoke and oninvoke object targeting all the ROSE related parts.
	 *
	 * @param transport - The transport is the connection to the other side. It takes care of delivering the invoke
	 * to us as well as to send invokes and events to the other side. It also holds the logger.
	 * @param handleEvents - Set this to true if you want to receive events or false if the stub should cached them
	 * until you call dispatchEvents();
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public constructor(transport: IASN1Transport, handleEvents: boolean, handler?: Partial<IENetUC_ChatV2ROSE_Handler>) {
		super(transport, handleEvents);

		this.logFilter = [];

		if (handler)
			this.setHandler(handler);
	}

	// [PrintTSROSESetHandler]
	/**
	 * Sets the handler and registers the operations with it
	 *
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public setHandler(handler: Partial<IENetUC_ChatV2ROSE_Handler>): void {
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatSubscribeEvents, "asnChatSubscribeEvents");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatGetDatabaseID, "asnChatGetDatabaseID");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatGetDiffUpdate, "asnChatGetDiffUpdate");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatGetConversationOverview, "asnChatGetConversationOverview");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatTextMessage, "asnChatTextMessage");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatBinaryMessage, "asnChatBinaryMessage");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatForwardMessage, "asnChatForwardMessage");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatUserlistModify, "asnChatUserlistModify");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatFindEvents, "asnChatFindEvents");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatGetEventsRange, "asnChatGetEventsRange");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatGetBinaryMessageEvents, "asnChatGetBinaryMessageEvents");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatSetMessagesStatus, "asnChatSetMessagesStatus");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatGetConversations, "asnChatGetConversations");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatGetConversationID, "asnChatGetConversationID");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatForward, "asnChatForward");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatIsGlobalDisabled, "asnChatIsGlobalDisabled");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatWatchConversation, "asnChatWatchConversation");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatSetUserlist, "asnChatSetUserlist");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatEvent, "asnChatEvent");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatUserStatus, "asnChatUserStatus");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatDatabaseIDChanged, "asnChatDatabaseIDChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatDatabaseMaintenance, "asnChatDatabaseMaintenance");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatMuteConversation, "asnChatMuteConversation");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatUnmuteConversation, "asnChatUnmuteConversation");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatMuteStatusChanged, "asnChatMuteStatusChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatSetConversationAvatar, "asnChatSetConversationAvatar");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatGetConversationAvatar, "asnChatGetConversationAvatar");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatConversationAvatarChanged, "asnChatConversationAvatarChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatSetReaction, "asnChatSetReaction");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnChatClearReaction, "asnChatClearReaction");
		this.transport.registerModuleVersion("ENetUC_ChatV2", 8, 0);
	}

	// [PrintTSROSEInvokeMethods]

	// [PrintTSROSEInvokeMethod]
	/**
	 * Subscribe to chat notifications, get the changes
	 * Subscribing to chat events allows you to get the div of the last known transaction ID to the current one on the server
	 *
	 * @param argument - An AsnChatSubscribeEventsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatSubscribeEventsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatSubscribeEvents(argument: ENetUC_ChatV2.AsnChatSubscribeEventsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSubscribeEventsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatSubscribeEventsResult, OperationIDs.OPID_asnChatSubscribeEvents, "asnChatSubscribeEvents", Converter.AsnChatSubscribeEventsArgument_Converter, Converter.AsnChatSubscribeEventsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Query the database ID
	 * Returns a unique ID of the database that clients can use to determine whether the server is using a new database.
	 *
	 * This can e.g. then be the case if the server database has been deleted.
	 *
	 * @param argument - An AsnChatGetDatabaseIDArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatGetDatabaseIDResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatGetDatabaseID(argument: ENetUC_ChatV2.AsnChatGetDatabaseIDArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetDatabaseIDResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatGetDatabaseIDResult, OperationIDs.OPID_asnChatGetDatabaseID, "asnChatGetDatabaseID", Converter.AsnChatGetDatabaseIDArgument_Converter, Converter.AsnChatGetDatabaseIDResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Pick up changes, even for individual conversations
	 * Differential update with the last known TransactionID and ConversationID
	 *
	 * @param argument - An AsnChatGetDiffUpdateArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatGetDiffUpdateResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatGetDiffUpdate(argument: ENetUC_ChatV2.AsnChatGetDiffUpdateArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetDiffUpdateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatGetDiffUpdateResult, OperationIDs.OPID_asnChatGetDiffUpdate, "asnChatGetDiffUpdate", Converter.AsnChatGetDiffUpdateArgument_Converter, Converter.AsnChatGetDiffUpdateResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Overview of conversations
	 * Delivers new conversations with the last or unread messages in these conversations
	 *
	 * @param argument - An AsnChatGetConversationOverviewArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatGetConversationOverviewResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatGetConversationOverview(argument: ENetUC_ChatV2.AsnChatGetConversationOverviewArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetConversationOverviewResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatGetConversationOverviewResult, OperationIDs.OPID_asnChatGetConversationOverview, "asnChatGetConversationOverview", Converter.AsnChatGetConversationOverviewArgument_Converter, Converter.AsnChatGetConversationOverviewResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Chat Text Send message
	 * Send new chat message
	 *
	 * @param argument - An AsnChatTextMessageArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatTextMessageResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatTextMessage(argument: ENetUC_ChatV2.AsnChatTextMessageArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatTextMessageResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatTextMessageResult, OperationIDs.OPID_asnChatTextMessage, "asnChatTextMessage", Converter.AsnChatTextMessageArgument_Converter, Converter.AsnChatTextMessageResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Send chat binary message
	 * Send a new binary message to the server
	 *
	 * @param argument - An AsnChatBinaryMessageArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatBinaryMessageResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatBinaryMessage(argument: ENetUC_ChatV2.AsnChatBinaryMessageArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatBinaryMessageResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatBinaryMessageResult, OperationIDs.OPID_asnChatBinaryMessage, "asnChatBinaryMessage", Converter.AsnChatBinaryMessageArgument_Converter, Converter.AsnChatBinaryMessageResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Forward a message
	 * Used to forward a single message to another user or to a chat room
	 *
	 * @param argument - An AsnChatForwardMessageArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatForwardMessageResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatForwardMessage(argument: ENetUC_ChatV2.AsnChatForwardMessageArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatForwardMessageResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatForwardMessageResult, OperationIDs.OPID_asnChatForwardMessage, "asnChatForwardMessage", Converter.AsnChatForwardMessageArgument_Converter, Converter.AsnChatForwardMessageResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Add, remove, or forward chat to users
	 * Add or remove users In one-to-one chats you can signal \"leave\" by removing yourself.
	 *
	 * Add to a one-to-one chat creates a new multi-user chat, which then remains a multi-user chat.
	 *
	 * @param argument - An AsnChatUserlistModifyArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatUserlistModifyResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatUserlistModify(argument: ENetUC_ChatV2.AsnChatUserlistModifyArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatUserlistModifyResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatUserlistModifyResult, OperationIDs.OPID_asnChatUserlistModify, "asnChatUserlistModify", Converter.AsnChatUserlistModifyArgument_Converter, Converter.AsnChatUserlistModifyResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Search chat events on server
	 * Searches for a search string in the chat text messages of the logged-in user and returns all events in which there was a match.
	 * (!) With this search, the ProCall client also receives hits that match the contact details (e.g. first name, last name or email) of the sender of a message.
	 *
	 * @param argument - An AsnChatFindEventsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatFindEventsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatFindEvents(argument: ENetUC_ChatV2.AsnChatFindEventsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatFindEventsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatFindEventsResult, OperationIDs.OPID_asnChatFindEvents, "asnChatFindEvents", Converter.AsnChatFindEventsArgument_Converter, Converter.AsnChatFindEventsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Chat Events Range vom Server holen
	 * Get messages for a ConversationID before or after a Sequence ID (paging).
	 *
	 * @param argument - An AsnChatGetEventsRangeArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatGetEventsRangeResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatGetEventsRange(argument: ENetUC_ChatV2.AsnChatGetEventsRangeArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetEventsRangeResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatGetEventsRangeResult, OperationIDs.OPID_asnChatGetEventsRange, "asnChatGetEventsRange", Converter.AsnChatGetEventsRangeArgument_Converter, Converter.AsnChatGetEventsRangeResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Query BinaryMessageEvents which were sent or received from another user or in a certain conversation
	 * The following example shows how paging works. We assume the asnConversationIDChoice is the same for both requests. The Client gets the first ten events with the first request and the remaining seven events with the second request.
	 * UML section is not exported to this file!
	 *
	 * @param argument - An AsnChatGetBinaryMessageEventsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatGetBinaryMessageEventsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatGetBinaryMessageEvents(argument: ENetUC_ChatV2.AsnChatGetBinaryMessageEventsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetBinaryMessageEventsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatGetBinaryMessageEventsResult, OperationIDs.OPID_asnChatGetBinaryMessageEvents, "asnChatGetBinaryMessageEvents", Converter.AsnChatGetBinaryMessageEventsArgument_Converter, Converter.AsnChatGetBinaryMessageEventsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Set status of chat messages in the server
	 * Set status (e.g. mark read)
	 *
	 * @param argument - An AsnChatSetMessagesStatusArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatSetMessagesStatusResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatSetMessagesStatus(argument: ENetUC_ChatV2.AsnChatSetMessagesStatusArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSetMessagesStatusResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatSetMessagesStatusResult, OperationIDs.OPID_asnChatSetMessagesStatus, "asnChatSetMessagesStatus", Converter.AsnChatSetMessagesStatusArgument_Converter, Converter.AsnChatSetMessagesStatusResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Get information about chat rooms
	 * Get information about chat rooms on the server (name, members, permissions, last message, etc.)
	 *
	 * @param argument - An AsnChatGetConversationsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatGetConversationsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatGetConversations(argument: ENetUC_ChatV2.AsnChatGetConversationsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetConversationsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatGetConversationsResult, OperationIDs.OPID_asnChatGetConversations, "asnChatGetConversations", Converter.AsnChatGetConversationsArgument_Converter, Converter.AsnChatGetConversationsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Returns the ConversationID for a one-to-one chat
	 *
	 * @param argument - An AsnChatGetConversationIDArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatGetConversationIDResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatGetConversationID(argument: ENetUC_ChatV2.AsnChatGetConversationIDArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetConversationIDResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatGetConversationIDResult, OperationIDs.OPID_asnChatGetConversationID, "asnChatGetConversationID", Converter.AsnChatGetConversationIDArgument_Converter, Converter.AsnChatGetConversationIDResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Forward a conversation
	 *
	 * @param argument - An AsnChatForwardArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatForwardResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatForward(argument: ENetUC_ChatV2.AsnChatForwardArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatForwardResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatForwardResult, OperationIDs.OPID_asnChatForward, "asnChatForward", Converter.AsnChatForwardArgument_Converter, Converter.AsnChatForwardResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Query whether chat is deactivated globally
	 *
	 * @param argument - An AsnChatIsGlobalDisabledArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatIsGlobalDisabledResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatIsGlobalDisabled(argument: ENetUC_ChatV2.AsnChatIsGlobalDisabledArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatIsGlobalDisabledResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatIsGlobalDisabledResult, OperationIDs.OPID_asnChatIsGlobalDisabled, "asnChatIsGlobalDisabled", Converter.AsnChatIsGlobalDisabledArgument_Converter, Converter.AsnChatIsGlobalDisabledResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * watching a public chat conversation room
	 * Receiving chat events for a public chat conversation room allows you to pick up the div of the last known ConvSequenceID for the current one on the server
	 *
	 * @param argument - An AsnChatWatchConversationArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatWatchConversationResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatWatchConversation(argument: ENetUC_ChatV2.AsnChatWatchConversationArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatWatchConversationResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatWatchConversationResult, OperationIDs.OPID_asnChatWatchConversation, "asnChatWatchConversation", Converter.AsnChatWatchConversationArgument_Converter, Converter.AsnChatWatchConversationResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Change the list of participants in a public chat conversation room
	 * The list of participants in a public chat conversation room is completely replaced by the UserURIs transmitted in the request
	 *
	 * @param argument - An AsnChatSetUserlistArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatSetUserlistResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatSetUserlist(argument: ENetUC_ChatV2.AsnChatSetUserlistArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSetUserlistResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatSetUserlistResult, OperationIDs.OPID_asnChatSetUserlist, "asnChatSetUserlist", Converter.AsnChatSetUserlistArgument_Converter, Converter.AsnChatSetUserlistResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * mute conversation for user - events are still dispatched, client should check on his site
	 * User wants to mute the conversation - events are still dispatched from UCServer, so client needs to adopt its logic about the stuff
	 *
	 * @param argument - An AsnChatMuteConversationArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatMuteConversationResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatMuteConversation(argument: ENetUC_ChatV2.AsnChatMuteConversationArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatMuteConversationResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatMuteConversationResult, OperationIDs.OPID_asnChatMuteConversation, "asnChatMuteConversation", Converter.AsnChatMuteConversationArgument_Converter, Converter.AsnChatMuteConversationResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * unmute conversation for user
	 * User wants to unmute the conversation
	 *
	 * @param argument - An AsnChatUnmuteConversationArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatUnmuteConversationResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatUnmuteConversation(argument: ENetUC_ChatV2.AsnChatUnmuteConversationArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatUnmuteConversationResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatUnmuteConversationResult, OperationIDs.OPID_asnChatUnmuteConversation, "asnChatUnmuteConversation", Converter.AsnChatUnmuteConversationArgument_Converter, Converter.AsnChatUnmuteConversationResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * set conversation avatar
	 * set avatar for conversationID - members will be informed by event
	 *
	 * @param argument - An AsnChatSetConversationAvatarArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatSetConversationAvatarResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatSetConversationAvatar(argument: ENetUC_ChatV2.AsnChatSetConversationAvatarArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSetConversationAvatarResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatSetConversationAvatarResult, OperationIDs.OPID_asnChatSetConversationAvatar, "asnChatSetConversationAvatar", Converter.AsnChatSetConversationAvatarArgument_Converter, Converter.AsnChatSetConversationAvatarResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * get conversation avatar
	 * get avatar for conversationID - only relevant in group-chat context
	 *
	 * @param argument - An AsnChatGetConversationAvatarArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatGetConversationAvatarResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatGetConversationAvatar(argument: ENetUC_ChatV2.AsnChatGetConversationAvatarArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatGetConversationAvatarResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatGetConversationAvatarResult, OperationIDs.OPID_asnChatGetConversationAvatar, "asnChatGetConversationAvatar", Converter.AsnChatGetConversationAvatarArgument_Converter, Converter.AsnChatGetConversationAvatarResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Set the reaction to a chat message for the calling user
	 * Set the reaction to a chat message for the calling user
	 *
	 * @param argument - An AsnChatSetReactionArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatSetReactionResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatSetReaction(argument: ENetUC_ChatV2.AsnChatSetReactionArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSetReactionResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatSetReactionResult, OperationIDs.OPID_asnChatSetReaction, "asnChatSetReaction", Converter.AsnChatSetReactionArgument_Converter, Converter.AsnChatSetReactionResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnChatSetReactionArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnChatSetReactionResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnChatClearReaction(argument: ENetUC_ChatV2.AsnChatSetReactionArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ChatV2.AsnChatSetReactionResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_ChatV2.AsnChatSetReactionResult, OperationIDs.OPID_asnChatClearReaction, "asnChatClearReaction", Converter.AsnChatSetReactionArgument_Converter, Converter.AsnChatSetReactionResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * New events in a chat
	 * Notification to a client that a new event has taken place in a chat.
	 *
	 * @param argument - An AsnChatEventArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnChatEvent(argument: ENetUC_ChatV2.AsnChatEventArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnChatEvent, "asnChatEvent", Converter.AsnChatEventArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * New user status in a chat
	 * New user status in a chat (typing notification)
	 *
	 * @param argument - An AsnChatUserStatusArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnChatUserStatus(argument: ENetUC_ChatV2.AsnChatUserStatusArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnChatUserStatus, "asnChatUserStatus", Converter.AsnChatUserStatusArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Change of database ID
	 * Event is sent from the server to the client if the database ID changes at runtime.
	 * This currently happens when the use of a database for chat in the server is switched off. Then one
	 * In-memory database is used, but is deleted once a day to prevent it from being in memory
	 * Accumulate conversations.
	 *
	 * @param argument - An AsnChatDatabaseIDChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnChatDatabaseIDChanged(argument: ENetUC_ChatV2.AsnChatDatabaseIDChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnChatDatabaseIDChanged, "asnChatDatabaseIDChanged", Converter.AsnChatDatabaseIDChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Change to the database through automatic maintenance (e.g. \"delete chats after X days\")
	 * Event is sent from the server to the clients if chat messages in the server database due to the function
	 * \"Delete chat messages after X days\" will be deleted. The event contains a sequence ID up to which the deletion was carried out.
	 * Clients can adapt existing caches accordingly. I.e. TextMessages that have a Sequence ID less than or equal to
	 * have the ID specified in the event, must be deleted. The event is also sent to the client during the initial subscription.
	 * The event is only sent to clients who subscribe to it with the optional parameter \"bSubscribeDBMaintenance\" = true
	 * have requested.
	 *
	 * @param argument - An AsnChatDatabaseMaintenanceArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnChatDatabaseMaintenance(argument: ENetUC_ChatV2.AsnChatDatabaseMaintenanceArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnChatDatabaseMaintenance, "asnChatDatabaseMaintenance", Converter.AsnChatDatabaseMaintenanceArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * mute status of specific conversationid was changed
	 * Notification to a client that a mute state was changed
	 *
	 * @param argument - An AsnChatMuteStatusChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnChatMuteStatusChanged(argument: ENetUC_ChatV2.AsnChatMuteStatusChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnChatMuteStatusChanged, "asnChatMuteStatusChanged", Converter.AsnChatMuteStatusChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * events when conversation avatar was changed
	 * Notification to a client that a new (group-chat) avatar was changed - client might check his local hash or request new image via asnChatGetConversationAvatar
	 *
	 * @param argument - An AsnChatConversationAvatarChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnChatConversationAvatarChanged(argument: ENetUC_ChatV2.AsnChatConversationAvatarChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnChatConversationAvatarChanged, "asnChatConversationAvatarChanged", Converter.AsnChatConversationAvatarChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEOnInvokeswitchCase]
	/**
	 * This is the central onInvoke method that is called whenever a method of this module is called.
	 * Based on the operationID we step into the decoding of the method argument and call the method in the handler.
	 * The result is then again encoded and send to the other side.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the metho in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled, ROSEResult for the invoke result, ROSEError for an error or undefined if an event was called
	 */
	public async onInvoke(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_ChatV2ROSE_Handler): Promise<ROSEReject | ROSEResult | ROSEError | undefined> {
		switch (invoke.operationID) {
			case OperationIDs.OPID_asnChatSubscribeEvents:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatSubscribeEvents, ENetUC_ChatV2.AsnChatSubscribeEventsArgument, Converter.AsnChatSubscribeEventsArgument_Converter, Converter.AsnChatSubscribeEventsResult_Converter, handler, handler.onInvoke_asnChatSubscribeEvents, invokeContext);
			case OperationIDs.OPID_asnChatGetDatabaseID:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatGetDatabaseID, ENetUC_ChatV2.AsnChatGetDatabaseIDArgument, Converter.AsnChatGetDatabaseIDArgument_Converter, Converter.AsnChatGetDatabaseIDResult_Converter, handler, handler.onInvoke_asnChatGetDatabaseID, invokeContext);
			case OperationIDs.OPID_asnChatGetDiffUpdate:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatGetDiffUpdate, ENetUC_ChatV2.AsnChatGetDiffUpdateArgument, Converter.AsnChatGetDiffUpdateArgument_Converter, Converter.AsnChatGetDiffUpdateResult_Converter, handler, handler.onInvoke_asnChatGetDiffUpdate, invokeContext);
			case OperationIDs.OPID_asnChatGetConversationOverview:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatGetConversationOverview, ENetUC_ChatV2.AsnChatGetConversationOverviewArgument, Converter.AsnChatGetConversationOverviewArgument_Converter, Converter.AsnChatGetConversationOverviewResult_Converter, handler, handler.onInvoke_asnChatGetConversationOverview, invokeContext);
			case OperationIDs.OPID_asnChatTextMessage:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatTextMessage, ENetUC_ChatV2.AsnChatTextMessageArgument, Converter.AsnChatTextMessageArgument_Converter, Converter.AsnChatTextMessageResult_Converter, handler, handler.onInvoke_asnChatTextMessage, invokeContext);
			case OperationIDs.OPID_asnChatBinaryMessage:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatBinaryMessage, ENetUC_ChatV2.AsnChatBinaryMessageArgument, Converter.AsnChatBinaryMessageArgument_Converter, Converter.AsnChatBinaryMessageResult_Converter, handler, handler.onInvoke_asnChatBinaryMessage, invokeContext);
			case OperationIDs.OPID_asnChatForwardMessage:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatForwardMessage, ENetUC_ChatV2.AsnChatForwardMessageArgument, Converter.AsnChatForwardMessageArgument_Converter, Converter.AsnChatForwardMessageResult_Converter, handler, handler.onInvoke_asnChatForwardMessage, invokeContext);
			case OperationIDs.OPID_asnChatUserlistModify:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatUserlistModify, ENetUC_ChatV2.AsnChatUserlistModifyArgument, Converter.AsnChatUserlistModifyArgument_Converter, Converter.AsnChatUserlistModifyResult_Converter, handler, handler.onInvoke_asnChatUserlistModify, invokeContext);
			case OperationIDs.OPID_asnChatFindEvents:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatFindEvents, ENetUC_ChatV2.AsnChatFindEventsArgument, Converter.AsnChatFindEventsArgument_Converter, Converter.AsnChatFindEventsResult_Converter, handler, handler.onInvoke_asnChatFindEvents, invokeContext);
			case OperationIDs.OPID_asnChatGetEventsRange:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatGetEventsRange, ENetUC_ChatV2.AsnChatGetEventsRangeArgument, Converter.AsnChatGetEventsRangeArgument_Converter, Converter.AsnChatGetEventsRangeResult_Converter, handler, handler.onInvoke_asnChatGetEventsRange, invokeContext);
			case OperationIDs.OPID_asnChatGetBinaryMessageEvents:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatGetBinaryMessageEvents, ENetUC_ChatV2.AsnChatGetBinaryMessageEventsArgument, Converter.AsnChatGetBinaryMessageEventsArgument_Converter, Converter.AsnChatGetBinaryMessageEventsResult_Converter, handler, handler.onInvoke_asnChatGetBinaryMessageEvents, invokeContext);
			case OperationIDs.OPID_asnChatSetMessagesStatus:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatSetMessagesStatus, ENetUC_ChatV2.AsnChatSetMessagesStatusArgument, Converter.AsnChatSetMessagesStatusArgument_Converter, Converter.AsnChatSetMessagesStatusResult_Converter, handler, handler.onInvoke_asnChatSetMessagesStatus, invokeContext);
			case OperationIDs.OPID_asnChatGetConversations:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatGetConversations, ENetUC_ChatV2.AsnChatGetConversationsArgument, Converter.AsnChatGetConversationsArgument_Converter, Converter.AsnChatGetConversationsResult_Converter, handler, handler.onInvoke_asnChatGetConversations, invokeContext);
			case OperationIDs.OPID_asnChatGetConversationID:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatGetConversationID, ENetUC_ChatV2.AsnChatGetConversationIDArgument, Converter.AsnChatGetConversationIDArgument_Converter, Converter.AsnChatGetConversationIDResult_Converter, handler, handler.onInvoke_asnChatGetConversationID, invokeContext);
			case OperationIDs.OPID_asnChatForward:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatForward, ENetUC_ChatV2.AsnChatForwardArgument, Converter.AsnChatForwardArgument_Converter, Converter.AsnChatForwardResult_Converter, handler, handler.onInvoke_asnChatForward, invokeContext);
			case OperationIDs.OPID_asnChatIsGlobalDisabled:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatIsGlobalDisabled, ENetUC_ChatV2.AsnChatIsGlobalDisabledArgument, Converter.AsnChatIsGlobalDisabledArgument_Converter, Converter.AsnChatIsGlobalDisabledResult_Converter, handler, handler.onInvoke_asnChatIsGlobalDisabled, invokeContext);
			case OperationIDs.OPID_asnChatWatchConversation:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatWatchConversation, ENetUC_ChatV2.AsnChatWatchConversationArgument, Converter.AsnChatWatchConversationArgument_Converter, Converter.AsnChatWatchConversationResult_Converter, handler, handler.onInvoke_asnChatWatchConversation, invokeContext);
			case OperationIDs.OPID_asnChatSetUserlist:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatSetUserlist, ENetUC_ChatV2.AsnChatSetUserlistArgument, Converter.AsnChatSetUserlistArgument_Converter, Converter.AsnChatSetUserlistResult_Converter, handler, handler.onInvoke_asnChatSetUserlist, invokeContext);
			case OperationIDs.OPID_asnChatMuteConversation:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatMuteConversation, ENetUC_ChatV2.AsnChatMuteConversationArgument, Converter.AsnChatMuteConversationArgument_Converter, Converter.AsnChatMuteConversationResult_Converter, handler, handler.onInvoke_asnChatMuteConversation, invokeContext);
			case OperationIDs.OPID_asnChatUnmuteConversation:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatUnmuteConversation, ENetUC_ChatV2.AsnChatUnmuteConversationArgument, Converter.AsnChatUnmuteConversationArgument_Converter, Converter.AsnChatUnmuteConversationResult_Converter, handler, handler.onInvoke_asnChatUnmuteConversation, invokeContext);
			case OperationIDs.OPID_asnChatSetConversationAvatar:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatSetConversationAvatar, ENetUC_ChatV2.AsnChatSetConversationAvatarArgument, Converter.AsnChatSetConversationAvatarArgument_Converter, Converter.AsnChatSetConversationAvatarResult_Converter, handler, handler.onInvoke_asnChatSetConversationAvatar, invokeContext);
			case OperationIDs.OPID_asnChatGetConversationAvatar:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatGetConversationAvatar, ENetUC_ChatV2.AsnChatGetConversationAvatarArgument, Converter.AsnChatGetConversationAvatarArgument_Converter, Converter.AsnChatGetConversationAvatarResult_Converter, handler, handler.onInvoke_asnChatGetConversationAvatar, invokeContext);
			case OperationIDs.OPID_asnChatSetReaction:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatSetReaction, ENetUC_ChatV2.AsnChatSetReactionArgument, Converter.AsnChatSetReactionArgument_Converter, Converter.AsnChatSetReactionResult_Converter, handler, handler.onInvoke_asnChatSetReaction, invokeContext);
			case OperationIDs.OPID_asnChatClearReaction:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnChatClearReaction, ENetUC_ChatV2.AsnChatSetReactionArgument, Converter.AsnChatSetReactionArgument_Converter, Converter.AsnChatSetReactionResult_Converter, handler, handler.onInvoke_asnChatClearReaction, invokeContext);
			case OperationIDs.OPID_asnChatEvent:
			case OperationIDs.OPID_asnChatUserStatus:
			case OperationIDs.OPID_asnChatDatabaseIDChanged:
			case OperationIDs.OPID_asnChatDatabaseMaintenance:
			case OperationIDs.OPID_asnChatMuteStatusChanged:
			case OperationIDs.OPID_asnChatConversationAvatarChanged:
				return this.onEvent(invoke, invokeContext, handler);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_ChatV2ROSE`);
		}
	}

	// [PrintTSROSEOnEventSwitchCase]
	/**
	 * This is the onEvent method that is called whenever an event is called in this module.
	 * It is called from the onInvoke in case of an event is being called.
	 * Depending on the handleEvents flag the event is either handled or cached.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the method in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled or undefined
	 */
	private async onEvent(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_ChatV2ROSE_Handler): Promise<ROSEReject | undefined> {
		// If the class says do not handle events and the override flag in the invokeContext has not been set, add the event to the que, otherwise we dispatch it
		if (!this.handleEvents && !invokeContext?.handleEvent) {
			this.transport.log(ELogSeverity.debug, "Adding event to queue", "onEvent", this, { operationName: invoke.operationName, operationID: invoke.operationID });
			this.cachedEvents.push({ invoke, invokeContext, handler });
			return;
		}

		switch (invoke.operationID) {
			case OperationIDs.OPID_asnChatEvent:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnChatEvent, ENetUC_ChatV2.AsnChatEventArgument, Converter.AsnChatEventArgument_Converter, handler, handler.onEvent_asnChatEvent, invokeContext);
			case OperationIDs.OPID_asnChatUserStatus:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnChatUserStatus, ENetUC_ChatV2.AsnChatUserStatusArgument, Converter.AsnChatUserStatusArgument_Converter, handler, handler.onEvent_asnChatUserStatus, invokeContext);
			case OperationIDs.OPID_asnChatDatabaseIDChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnChatDatabaseIDChanged, ENetUC_ChatV2.AsnChatDatabaseIDChangedArgument, Converter.AsnChatDatabaseIDChangedArgument_Converter, handler, handler.onEvent_asnChatDatabaseIDChanged, invokeContext);
			case OperationIDs.OPID_asnChatDatabaseMaintenance:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnChatDatabaseMaintenance, ENetUC_ChatV2.AsnChatDatabaseMaintenanceArgument, Converter.AsnChatDatabaseMaintenanceArgument_Converter, handler, handler.onEvent_asnChatDatabaseMaintenance, invokeContext);
			case OperationIDs.OPID_asnChatMuteStatusChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnChatMuteStatusChanged, ENetUC_ChatV2.AsnChatMuteStatusChangedArgument, Converter.AsnChatMuteStatusChangedArgument_Converter, handler, handler.onEvent_asnChatMuteStatusChanged, invokeContext);
			case OperationIDs.OPID_asnChatConversationAvatarChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnChatConversationAvatarChanged, ENetUC_ChatV2.AsnChatConversationAvatarChangedArgument, Converter.AsnChatConversationAvatarChangedArgument_Converter, handler, handler.onEvent_asnChatConversationAvatarChanged, invokeContext);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_ChatV2ROSE`);
		}
	}
}
