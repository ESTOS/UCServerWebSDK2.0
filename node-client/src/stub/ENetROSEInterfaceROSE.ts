// [PrintTSROSEHeader]
/**
 * ENetROSEInterfaceROSE
 * "UC-Server-Access-Protocol-Main" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImports]
// Global imports
import { IENetROSEInterfaceROSE, IENetROSEInterfaceROSE_Handler } from "./ENetROSEInterfaceROSE_Interface";
import { ROSEError, ROSEInvoke, ROSEReject, ROSEResult } from "./SNACCROSE";
import { AsnInvokeProblem, AsnInvokeProblemEnum, createInvokeReject, IASN1Transport, IASN1LogData, IReceiveInvokeContext, IInvokeHandler, ELogSeverity, ROSEBase } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetROSEInterface from "./ENetROSEInterface";
import * as Converter from "./ENetROSEInterface_Converter";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_SIPCTI from "./ENetUC_Common_SIPCTI";
import * as ENetUC_Common_AsnContact from "./ENetUC_Common_AsnContact";
import * as ENetUC_Common_Appointments from "./ENetUC_Common_Appointments";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";
import * as ENetUC_Common_SIPCTI_Converter from "./ENetUC_Common_SIPCTI_Converter";
import * as ENetUC_Common_AsnContact_Converter from "./ENetUC_Common_AsnContact_Converter";
import * as ENetUC_Common_Appointments_Converter from "./ENetUC_Common_Appointments_Converter";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetROSEInterfaceROSE";
export const MODULE_LASTCHANGE = "2024-08-22T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 20240822;
export const MODULE_VERSION = "8.0.20240822";

// [PrintTSROSEOperationDefines]
export enum OperationIDs {
	OPID_asnKeepAlive = 100,
	OPID_asnGetLocationInformation2 = 1119,
	OPID_asnSetLocationInformation2 = 1127,
	OPID_asnGetLocationIDs = 1120,
	OPID_asnLocationInformationChanged = 1117,
	OPID_asnUpdateMyContactConfigurationV2 = 1309,
	OPID_asnSetUserAbsentState = 1128,
	OPID_asnGetUserAbsentState = 1129,
	OPID_asnResetUserAbsentState = 1130,
	OPID_asnUpdateMyAbsentStateV2 = 1313,
	OPID_asnCustomNoteSet = 1510,
	OPID_asnUpdateMyCustomNote = 1511,
	OPID_asnGetMetaSettings = 2100,
	OPID_asnGetMetaPhoneBooksSettings = 2101,
	OPID_asnSetMetaSettings = 2026,
	OPID_asnSetMetaPhoneBooksSettings = 2027,
	OPID_asnSubscribeServices = 703
}

// [PrintTSROSEModuleComment]
/**
 * General interface
 * ## Module description
 * General interfacefunctions not included in any other module.
 */

// [PrintTSROSEClass]
export class ENetROSEInterfaceROSE extends ROSEBase implements IInvokeHandler, IENetROSEInterfaceROSE {
	/**
	 * Contains the attributes that have to be filtered from logging
	 * Use logfilter property;property inside the asn1 root comments to specify this list
	 */
	public readonly logFilter: string[];

	/**
	 * The Loggers getLogData callback (used in all the log methods called in this class, add the classname to every log entry)
	 *
	 * @returns - an ILogData log data object provided additional data for all the logger calls in this class
	 */
	public getLogData(): IASN1LogData {
		return {
			className: MODULE_NAME
		};
	}

	/**
	 * Returns the operationName for an operationID
	 *
	 * @param id - the id we want to have the name for
	 * @returns - the name or undefined if not found
	 */
	public getNameForOperationID(id: OperationIDs): string | undefined {
		switch (id) {
			case OperationIDs.OPID_asnKeepAlive:
				return "asnKeepAlive";
			case OperationIDs.OPID_asnGetLocationInformation2:
				return "asnGetLocationInformation2";
			case OperationIDs.OPID_asnSetLocationInformation2:
				return "asnSetLocationInformation2";
			case OperationIDs.OPID_asnGetLocationIDs:
				return "asnGetLocationIDs";
			case OperationIDs.OPID_asnLocationInformationChanged:
				return "asnLocationInformationChanged";
			case OperationIDs.OPID_asnUpdateMyContactConfigurationV2:
				return "asnUpdateMyContactConfigurationV2";
			case OperationIDs.OPID_asnSetUserAbsentState:
				return "asnSetUserAbsentState";
			case OperationIDs.OPID_asnGetUserAbsentState:
				return "asnGetUserAbsentState";
			case OperationIDs.OPID_asnResetUserAbsentState:
				return "asnResetUserAbsentState";
			case OperationIDs.OPID_asnUpdateMyAbsentStateV2:
				return "asnUpdateMyAbsentStateV2";
			case OperationIDs.OPID_asnCustomNoteSet:
				return "asnCustomNoteSet";
			case OperationIDs.OPID_asnUpdateMyCustomNote:
				return "asnUpdateMyCustomNote";
			case OperationIDs.OPID_asnGetMetaSettings:
				return "asnGetMetaSettings";
			case OperationIDs.OPID_asnGetMetaPhoneBooksSettings:
				return "asnGetMetaPhoneBooksSettings";
			case OperationIDs.OPID_asnSetMetaSettings:
				return "asnSetMetaSettings";
			case OperationIDs.OPID_asnSetMetaPhoneBooksSettings:
				return "asnSetMetaPhoneBooksSettings";
			case OperationIDs.OPID_asnSubscribeServices:
				return "asnSubscribeServices";
			default:
				return undefined;
		}
	}

	/**
	 * Returns the operationID for an operationName
	 *
	 * @param name - the name we want to have the id for
	 * @returns - the id or undefined if not found
	 */
	public getIDForOperationName(name: string): OperationIDs | undefined {
		switch (name) {
			case "asnKeepAlive":
				return OperationIDs.OPID_asnKeepAlive;
			case "asnGetLocationInformation2":
				return OperationIDs.OPID_asnGetLocationInformation2;
			case "asnSetLocationInformation2":
				return OperationIDs.OPID_asnSetLocationInformation2;
			case "asnGetLocationIDs":
				return OperationIDs.OPID_asnGetLocationIDs;
			case "asnLocationInformationChanged":
				return OperationIDs.OPID_asnLocationInformationChanged;
			case "asnUpdateMyContactConfigurationV2":
				return OperationIDs.OPID_asnUpdateMyContactConfigurationV2;
			case "asnSetUserAbsentState":
				return OperationIDs.OPID_asnSetUserAbsentState;
			case "asnGetUserAbsentState":
				return OperationIDs.OPID_asnGetUserAbsentState;
			case "asnResetUserAbsentState":
				return OperationIDs.OPID_asnResetUserAbsentState;
			case "asnUpdateMyAbsentStateV2":
				return OperationIDs.OPID_asnUpdateMyAbsentStateV2;
			case "asnCustomNoteSet":
				return OperationIDs.OPID_asnCustomNoteSet;
			case "asnUpdateMyCustomNote":
				return OperationIDs.OPID_asnUpdateMyCustomNote;
			case "asnGetMetaSettings":
				return OperationIDs.OPID_asnGetMetaSettings;
			case "asnGetMetaPhoneBooksSettings":
				return OperationIDs.OPID_asnGetMetaPhoneBooksSettings;
			case "asnSetMetaSettings":
				return OperationIDs.OPID_asnSetMetaSettings;
			case "asnSetMetaPhoneBooksSettings":
				return OperationIDs.OPID_asnSetMetaPhoneBooksSettings;
			case "asnSubscribeServices":
				return OperationIDs.OPID_asnSubscribeServices;
			default:
				return undefined;
		}
	}

	// [PrintTSROSEConstructor]
	/**
	 * Constructs the invoke and oninvoke object targeting all the ROSE related parts.
	 *
	 * @param transport - The transport is the connection to the other side. It takes care of delivering the invoke
	 * to us as well as to send invokes and events to the other side. It also holds the logger.
	 * @param handleEvents - Set this to true if you want to receive events or false if the stub should cached them
	 * until you call dispatchEvents();
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public constructor(transport: IASN1Transport, handleEvents: boolean, handler?: Partial<IENetROSEInterfaceROSE_Handler>) {
		super(transport, handleEvents);

		this.logFilter = [];

		if (handler)
			this.setHandler(handler);
	}

	// [PrintTSROSESetHandler]
	/**
	 * Sets the handler and registers the operations with it
	 *
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public setHandler(handler: Partial<IENetROSEInterfaceROSE_Handler>): void {
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnKeepAlive, "asnKeepAlive");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetLocationInformation2, "asnGetLocationInformation2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnSetLocationInformation2, "asnSetLocationInformation2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetLocationIDs, "asnGetLocationIDs");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnLocationInformationChanged, "asnLocationInformationChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnUpdateMyContactConfigurationV2, "asnUpdateMyContactConfigurationV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnSetUserAbsentState, "asnSetUserAbsentState");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetUserAbsentState, "asnGetUserAbsentState");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnResetUserAbsentState, "asnResetUserAbsentState");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnUpdateMyAbsentStateV2, "asnUpdateMyAbsentStateV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnCustomNoteSet, "asnCustomNoteSet");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnUpdateMyCustomNote, "asnUpdateMyCustomNote");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetMetaSettings, "asnGetMetaSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetMetaPhoneBooksSettings, "asnGetMetaPhoneBooksSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnSetMetaSettings, "asnSetMetaSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnSetMetaPhoneBooksSettings, "asnSetMetaPhoneBooksSettings");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnSubscribeServices, "asnSubscribeServices");
		this.transport.registerModuleVersion("ENetROSEInterface", 8, 1724284800);
	}

	// [PrintTSROSEInvokeMethods]

	// [PrintTSROSEInvokeMethod]
	/**
	 * Get a specific location information (AsnLocationInformation2).
	 * This function is replaces asnGetLocationInformation and delivers the new AsnLocationInformation2 for the given location id.
	 *
	 * @param argument - An AsnGetLocationInformationArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetLocationInformation2Result, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetLocationInformation2(argument: ENetROSEInterface.AsnGetLocationInformationArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnGetLocationInformation2Result | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnGetLocationInformation2Result, OperationIDs.OPID_asnGetLocationInformation2, "asnGetLocationInformation2", Converter.AsnGetLocationInformationArgument_Converter, Converter.AsnGetLocationInformation2Result_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnSetLocationInformation2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnSetLocationInformation2Result, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnSetLocationInformation2(argument: ENetROSEInterface.AsnSetLocationInformation2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnSetLocationInformation2Result | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnSetLocationInformation2Result, OperationIDs.OPID_asnSetLocationInformation2, "asnSetLocationInformation2", Converter.AsnSetLocationInformation2Argument_Converter, Converter.AsnSetLocationInformation2Result_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetLocationIDsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetLocationIDsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetLocationIDs(argument: ENetROSEInterface.AsnGetLocationIDsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnGetLocationIDsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnGetLocationIDsResult, OperationIDs.OPID_asnGetLocationIDs, "asnGetLocationIDs", Converter.AsnGetLocationIDsArgument_Converter, Converter.AsnGetLocationIDsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Operation to set the manual presence state of a user.
	 * This operation is used to set the manual presence state of a user. This ist mostly used for the logged in contact, but can be used to set it for others user too.
	 * In order to do that, access rights have to be granted by the other contact to the current user of the calling client.
	 *
	 * If the operation was successful, AsnAbsentStateSetUserResult is returned.
	 *
	 * If an error occured, AsnRequestError is returned.
	 *
	 * @param argument - An AsnSetUserAbsentStateArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnSetUserAbsentStateResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnSetUserAbsentState(argument: ENetROSEInterface.AsnSetUserAbsentStateArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnSetUserAbsentStateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnSetUserAbsentStateResult, OperationIDs.OPID_asnSetUserAbsentState, "asnSetUserAbsentState", Converter.AsnSetUserAbsentStateArgument_Converter, Converter.AsnSetUserAbsentStateResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @added 21.08.2024
	 *
	 * @param argument - An AsnGetUserAbsentStateArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetUserAbsentStateResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetUserAbsentState(argument: ENetROSEInterface.AsnGetUserAbsentStateArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnGetUserAbsentStateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnGetUserAbsentStateResult, OperationIDs.OPID_asnGetUserAbsentState, "asnGetUserAbsentState", Converter.AsnGetUserAbsentStateArgument_Converter, Converter.AsnGetUserAbsentStateResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * This operation set the manual presence state of a user back, so the system calculated presence will not be affected by it.
	 * The manual presence of a user is a special input to the presence system.
	 * To set it back to the pure system calculated presence this operation has to be called.
	 *
	 * If the operation was successful, AsnAbsentStateResetResult is returned.
	 *
	 * If the operation fails, AsnRequestError is returned.
	 *
	 * @added 22.08.2024
	 *
	 * @param argument - An AsnResetUserAbsentStateArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnResetUserAbsentStateResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnResetUserAbsentState(argument: ENetROSEInterface.AsnResetUserAbsentStateArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnResetUserAbsentStateResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnResetUserAbsentStateResult, OperationIDs.OPID_asnResetUserAbsentState, "asnResetUserAbsentState", Converter.AsnResetUserAbsentStateArgument_Converter, Converter.AsnResetUserAbsentStateResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnCustomNoteSetArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnCustomNoteSetResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnCustomNoteSet(argument: ENetROSEInterface.AsnCustomNoteSetArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnCustomNoteSetResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnCustomNoteSetResult, OperationIDs.OPID_asnCustomNoteSet, "asnCustomNoteSet", Converter.AsnCustomNoteSetArgument_Converter, Converter.AsnCustomNoteSetResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetMetaSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetMetaSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetMetaSettings(argument: ENetROSEInterface.AsnGetMetaSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnGetMetaSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnGetMetaSettingsResult, OperationIDs.OPID_asnGetMetaSettings, "asnGetMetaSettings", Converter.AsnGetMetaSettingsArgument_Converter, Converter.AsnGetMetaSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnGetMetaSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetMetaSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetMetaPhoneBooksSettings(argument: ENetROSEInterface.AsnGetMetaSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnGetMetaSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnGetMetaSettingsResult, OperationIDs.OPID_asnGetMetaPhoneBooksSettings, "asnGetMetaPhoneBooksSettings", Converter.AsnGetMetaSettingsArgument_Converter, Converter.AsnGetMetaSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnSetMetaSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnSetMetaSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnSetMetaSettings(argument: ENetROSEInterface.AsnSetMetaSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnSetMetaSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnSetMetaSettingsResult, OperationIDs.OPID_asnSetMetaSettings, "asnSetMetaSettings", Converter.AsnSetMetaSettingsArgument_Converter, Converter.AsnSetMetaSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnSetMetaSettingsArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnSetMetaSettingsResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnSetMetaPhoneBooksSettings(argument: ENetROSEInterface.AsnSetMetaSettingsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnSetMetaSettingsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnSetMetaSettingsResult, OperationIDs.OPID_asnSetMetaPhoneBooksSettings, "asnSetMetaPhoneBooksSettings", Converter.AsnSetMetaSettingsArgument_Converter, Converter.AsnSetMetaSettingsResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * This is an temporary function we use to separate Login from the implicit logic the server is doing with the login
	 * This function exists while we rework the interface from asnLogon to asnLoginV2
	 * In the future every service will have it´s own login function telling the server that a client is interested in that service
	 * Please be aware that we will remove this function any time as it is just a temporary solution to decouple login from subscribing to services
	 *
	 * @param argument - An AsnSubscribeServicesArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnSubscribeServicesResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnSubscribeServices(argument: ENetROSEInterface.AsnSubscribeServicesArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetROSEInterface.AsnSubscribeServicesResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetROSEInterface.AsnSubscribeServicesResult, OperationIDs.OPID_asnSubscribeServices, "asnSubscribeServices", Converter.AsnSubscribeServicesArgument_Converter, Converter.AsnSubscribeServicesResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Event which can be send to the UCServer regularily to detect connection loss faster.
	 *
	 * @param argument - An AsnKeepAliveArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnKeepAlive(argument: ENetROSEInterface.AsnKeepAliveArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnKeepAlive, "asnKeepAlive", Converter.AsnKeepAliveArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnLocationInformationChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnLocationInformationChanged(argument: ENetROSEInterface.AsnLocationInformationChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnLocationInformationChanged, "asnLocationInformationChanged", Converter.AsnLocationInformationChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Event that my contact configuration has changed
	 *
	 * @param argument - An AsnUpdateMyContactConfigurationV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnUpdateMyContactConfigurationV2(argument: ENetROSEInterface.AsnUpdateMyContactConfigurationV2Argument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnUpdateMyContactConfigurationV2, "asnUpdateMyContactConfigurationV2", Converter.AsnUpdateMyContactConfigurationV2Argument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnUpdateMyAbsentStateV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnUpdateMyAbsentStateV2(argument: ENetROSEInterface.AsnUpdateMyAbsentStateV2Argument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnUpdateMyAbsentStateV2, "asnUpdateMyAbsentStateV2", Converter.AsnUpdateMyAbsentStateV2Argument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnUpdateMyCustomNoteArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnUpdateMyCustomNote(argument: ENetROSEInterface.AsnUpdateMyCustomNoteArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnUpdateMyCustomNote, "asnUpdateMyCustomNote", Converter.AsnUpdateMyCustomNoteArgument_Converter, invokeContext);
	}

	// [PrintTSROSEOnInvokeswitchCase]
	/**
	 * This is the central onInvoke method that is called whenever a method of this module is called.
	 * Based on the operationID we step into the decoding of the method argument and call the method in the handler.
	 * The result is then again encoded and send to the other side.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the metho in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled, ROSEResult for the invoke result, ROSEError for an error or undefined if an event was called
	 */
	public async onInvoke(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetROSEInterfaceROSE_Handler): Promise<ROSEReject | ROSEResult | ROSEError | undefined> {
		switch (invoke.operationID) {
			case OperationIDs.OPID_asnGetLocationInformation2:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetLocationInformation2, ENetROSEInterface.AsnGetLocationInformationArgument, Converter.AsnGetLocationInformationArgument_Converter, Converter.AsnGetLocationInformation2Result_Converter, handler, handler.onInvoke_asnGetLocationInformation2, invokeContext);
			case OperationIDs.OPID_asnSetLocationInformation2:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnSetLocationInformation2, ENetROSEInterface.AsnSetLocationInformation2Argument, Converter.AsnSetLocationInformation2Argument_Converter, Converter.AsnSetLocationInformation2Result_Converter, handler, handler.onInvoke_asnSetLocationInformation2, invokeContext);
			case OperationIDs.OPID_asnGetLocationIDs:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetLocationIDs, ENetROSEInterface.AsnGetLocationIDsArgument, Converter.AsnGetLocationIDsArgument_Converter, Converter.AsnGetLocationIDsResult_Converter, handler, handler.onInvoke_asnGetLocationIDs, invokeContext);
			case OperationIDs.OPID_asnSetUserAbsentState:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnSetUserAbsentState, ENetROSEInterface.AsnSetUserAbsentStateArgument, Converter.AsnSetUserAbsentStateArgument_Converter, Converter.AsnSetUserAbsentStateResult_Converter, handler, handler.onInvoke_asnSetUserAbsentState, invokeContext);
			case OperationIDs.OPID_asnGetUserAbsentState:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetUserAbsentState, ENetROSEInterface.AsnGetUserAbsentStateArgument, Converter.AsnGetUserAbsentStateArgument_Converter, Converter.AsnGetUserAbsentStateResult_Converter, handler, handler.onInvoke_asnGetUserAbsentState, invokeContext);
			case OperationIDs.OPID_asnResetUserAbsentState:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnResetUserAbsentState, ENetROSEInterface.AsnResetUserAbsentStateArgument, Converter.AsnResetUserAbsentStateArgument_Converter, Converter.AsnResetUserAbsentStateResult_Converter, handler, handler.onInvoke_asnResetUserAbsentState, invokeContext);
			case OperationIDs.OPID_asnCustomNoteSet:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnCustomNoteSet, ENetROSEInterface.AsnCustomNoteSetArgument, Converter.AsnCustomNoteSetArgument_Converter, Converter.AsnCustomNoteSetResult_Converter, handler, handler.onInvoke_asnCustomNoteSet, invokeContext);
			case OperationIDs.OPID_asnGetMetaSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetMetaSettings, ENetROSEInterface.AsnGetMetaSettingsArgument, Converter.AsnGetMetaSettingsArgument_Converter, Converter.AsnGetMetaSettingsResult_Converter, handler, handler.onInvoke_asnGetMetaSettings, invokeContext);
			case OperationIDs.OPID_asnGetMetaPhoneBooksSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetMetaPhoneBooksSettings, ENetROSEInterface.AsnGetMetaSettingsArgument, Converter.AsnGetMetaSettingsArgument_Converter, Converter.AsnGetMetaSettingsResult_Converter, handler, handler.onInvoke_asnGetMetaPhoneBooksSettings, invokeContext);
			case OperationIDs.OPID_asnSetMetaSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnSetMetaSettings, ENetROSEInterface.AsnSetMetaSettingsArgument, Converter.AsnSetMetaSettingsArgument_Converter, Converter.AsnSetMetaSettingsResult_Converter, handler, handler.onInvoke_asnSetMetaSettings, invokeContext);
			case OperationIDs.OPID_asnSetMetaPhoneBooksSettings:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnSetMetaPhoneBooksSettings, ENetROSEInterface.AsnSetMetaSettingsArgument, Converter.AsnSetMetaSettingsArgument_Converter, Converter.AsnSetMetaSettingsResult_Converter, handler, handler.onInvoke_asnSetMetaPhoneBooksSettings, invokeContext);
			case OperationIDs.OPID_asnSubscribeServices:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnSubscribeServices, ENetROSEInterface.AsnSubscribeServicesArgument, Converter.AsnSubscribeServicesArgument_Converter, Converter.AsnSubscribeServicesResult_Converter, handler, handler.onInvoke_asnSubscribeServices, invokeContext);
			case OperationIDs.OPID_asnKeepAlive:
			case OperationIDs.OPID_asnLocationInformationChanged:
			case OperationIDs.OPID_asnUpdateMyContactConfigurationV2:
			case OperationIDs.OPID_asnUpdateMyAbsentStateV2:
			case OperationIDs.OPID_asnUpdateMyCustomNote:
				return this.onEvent(invoke, invokeContext, handler);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetROSEInterfaceROSE`);
		}
	}

	// [PrintTSROSEOnEventSwitchCase]
	/**
	 * This is the onEvent method that is called whenever an event is called in this module.
	 * It is called from the onInvoke in case of an event is being called.
	 * Depending on the handleEvents flag the event is either handled or cached.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the method in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled or undefined
	 */
	private async onEvent(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetROSEInterfaceROSE_Handler): Promise<ROSEReject | undefined> {
		// If the class says do not handle events and the override flag in the invokeContext has not been set, add the event to the que, otherwise we dispatch it
		if (!this.handleEvents && !invokeContext?.handleEvent) {
			this.transport.log(ELogSeverity.debug, "Adding event to queue", "onEvent", this, { operationName: invoke.operationName, operationID: invoke.operationID });
			this.cachedEvents.push({ invoke, invokeContext, handler });
			return;
		}

		switch (invoke.operationID) {
			case OperationIDs.OPID_asnKeepAlive:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnKeepAlive, ENetROSEInterface.AsnKeepAliveArgument, Converter.AsnKeepAliveArgument_Converter, handler, handler.onEvent_asnKeepAlive, invokeContext);
			case OperationIDs.OPID_asnLocationInformationChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnLocationInformationChanged, ENetROSEInterface.AsnLocationInformationChangedArgument, Converter.AsnLocationInformationChangedArgument_Converter, handler, handler.onEvent_asnLocationInformationChanged, invokeContext);
			case OperationIDs.OPID_asnUpdateMyContactConfigurationV2:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnUpdateMyContactConfigurationV2, ENetROSEInterface.AsnUpdateMyContactConfigurationV2Argument, Converter.AsnUpdateMyContactConfigurationV2Argument_Converter, handler, handler.onEvent_asnUpdateMyContactConfigurationV2, invokeContext);
			case OperationIDs.OPID_asnUpdateMyAbsentStateV2:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnUpdateMyAbsentStateV2, ENetROSEInterface.AsnUpdateMyAbsentStateV2Argument, Converter.AsnUpdateMyAbsentStateV2Argument_Converter, handler, handler.onEvent_asnUpdateMyAbsentStateV2, invokeContext);
			case OperationIDs.OPID_asnUpdateMyCustomNote:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnUpdateMyCustomNote, ENetROSEInterface.AsnUpdateMyCustomNoteArgument, Converter.AsnUpdateMyCustomNoteArgument_Converter, handler, handler.onEvent_asnUpdateMyCustomNote, invokeContext);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetROSEInterfaceROSE`);
		}
	}
}
