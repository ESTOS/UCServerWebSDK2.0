// [PrintTSCodeOne]
// [PrintTSComments]
/*
 * ENetUC_Appointments.ts
 * "UC-Server-Access-Protocol-Appointments" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
/**
 * Appointment interface.
 * ##        Appointments Modul                                        ##
 *
 *
 * ##            Module description                            ##
 * This module contains all operations and structures used for transferring appointments
 * from and to the appointment database in the UCServer.
 */
// [PrintTSImports]
import * as asn1ts from "@estos/asn1ts";
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_Appointments from "./ENetUC_Common_Appointments";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_Appointments";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Argument for asnAppointmentSetEntryList
 */
export class AsnAppointmentSetEntryListArgument {
	public constructor(that: AsnAppointmentSetEntryListArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentSetEntryListArgument {
		return new AsnAppointmentSetEntryListArgument({
			u8sOwner: "",
			u8sDataSource: "",
			appointments: new ENetUC_Common_Appointments.SEQAppointmentList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sOwner",
			"u8sDataSource",
			"appointments"
		];
		return p;
	}

	public static type = "AsnAppointmentSetEntryListArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentSetEntryListArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sOwner" }),
				new asn1ts.Utf8String({ name: "u8sDataSource" }),
				ENetUC_Common_Appointments.SEQAppointmentList.getASN1Schema({ name: "appointments" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Username of the user (NOT the identity\/sip address). The server will use the logged in user's name. The parameter is only used, if a user with admin rights will set appointments for other users (e.g. EWS Calendar Replicator). */
	public u8sOwner!: string;
	/**
	 * A String to indicate the source of the appointments. Following strings are used by now:
	 *
	 * - **MAPI** - MAPI Connector to Microsoft Outlook
	 * - **EWS** - EWS Calendar Replicator to a Microsoft Exchange Server
	 * - **LOTUSNOTES** - IBM Notes
	 * - **Exchange Web Services** - UCClient EWS Connector
	 * - **Windows Contacts** - Appointment data from the Windows 10 \"Calendar\"
	 * - **Google** - Google GSUITE (or other Google online Calendar)
	 * - **TOBIT** - (depricated) Tobit David
	 *
	 * Name of the Source Database (e.g. MAPI, NOTES, TOBIT etc.)..
	 */
	public u8sDataSource!: string;
	/** List of AsnAppointmentEntry objects. */
	public appointments!: ENetUC_Common_Appointments.SEQAppointmentList;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * The result of asnAppointmentSetEntryList.
 */
export class AsnAppointmentSetEntryListResult {
	public constructor(that: AsnAppointmentSetEntryListResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentSetEntryListResult {
		return new AsnAppointmentSetEntryListResult({
			iResult: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iResult"
		];
		return p;
	}

	public static type = "AsnAppointmentSetEntryListResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentSetEntryListResult",
			...params,
			value: [
				new asn1ts.Integer({ name: "iResult" }),
				new asn1ts.Extension()
			]
		});
	}

	/**
	 * Result of the operation.
	 *
	 * 0: No error, the list was saved successfully.
	 *
	 * Other values: An error occured in the businesslogic [TBD: more details].
	 */
	public iResult!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Argument for asnAppointmentSetSeriesEntriesList.
 */
export class AsnAppointmentSetSeriesEntriesListArgument {
	public constructor(that: AsnAppointmentSetSeriesEntriesListArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentSetSeriesEntriesListArgument {
		return new AsnAppointmentSetSeriesEntriesListArgument({
			u8sOwner: "",
			u8sDataSource: "",
			appointments: new ENetUC_Common_Appointments.SEQAppointmentList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sOwner",
			"u8sDataSource",
			"appointments"
		];
		return p;
	}

	public static type = "AsnAppointmentSetSeriesEntriesListArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentSetSeriesEntriesListArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sOwner" }),
				new asn1ts.Utf8String({ name: "u8sDataSource" }),
				ENetUC_Common_Appointments.SEQAppointmentList.getASN1Schema({ name: "appointments" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Name of the owner of the appointments. It is only neccessary if the appointments were set for another user (as admin). For user logins, the server will get the username from the logged in user profile. */
	public u8sOwner!: string;
	/** Name of the data source. See AsnAppointmentSetEntryListArgument for possible strings. */
	public u8sDataSource!: string;
	/** List of AsnAppointmentEntry. In this case the u8sEntryID should alle be the same. */
	public appointments!: ENetUC_Common_Appointments.SEQAppointmentList;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Resul of asnAppointmentSetSeriesEntriesList.
 */
export class AsnAppointmentSetSeriesEntriesListResult {
	public constructor(that: AsnAppointmentSetSeriesEntriesListResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentSetSeriesEntriesListResult {
		return new AsnAppointmentSetSeriesEntriesListResult({
			iResult: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iResult"
		];
		return p;
	}

	public static type = "AsnAppointmentSetSeriesEntriesListResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentSetSeriesEntriesListResult",
			...params,
			value: [
				new asn1ts.Integer({ name: "iResult" }),
				new asn1ts.Extension()
			]
		});
	}

	/** 0: The call went well, other values indicates, that the database could not be updated. If the call to the server fails, an AsnRequestError will be returned instead of AsnAppointmentSetSeriesEntriesListResult. */
	public iResult!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Argument for asnAppointmentRemoveEntry.
 */
export class AsnAppointmentRemoveEntryArgument {
	public constructor(that: AsnAppointmentRemoveEntryArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentRemoveEntryArgument {
		return new AsnAppointmentRemoveEntryArgument({
			u8sEntryID: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sEntryID"
		];
		return p;
	}

	public static type = "AsnAppointmentRemoveEntryArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentRemoveEntryArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sEntryID" }),
				new asn1ts.Extension()
			]
		});
	}

	/** The EntryID of the appointment database entry which should be removed. */
	public u8sEntryID!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * The result of asnAppointmentRemoveEntry.
 */
export class AsnAppointmentRemoveEntryResult {
	public constructor(that: AsnAppointmentRemoveEntryResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentRemoveEntryResult {
		return new AsnAppointmentRemoveEntryResult({
			iResult: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iResult"
		];
		return p;
	}

	public static type = "AsnAppointmentRemoveEntryResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentRemoveEntryResult",
			...params,
			value: [
				new asn1ts.Integer({ name: "iResult" }),
				new asn1ts.Extension()
			]
		});
	}

	/** 0: The call went well and the entry has been removed; all other values indicates, that removing the entzry failed on database level. */
	public iResult!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Argument for asnAppointmentSetEntry.
 */
export class AsnAppointmentSetEntryArgument {
	public constructor(that: AsnAppointmentSetEntryArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentSetEntryArgument {
		return new AsnAppointmentSetEntryArgument({
			appointment: ENetUC_Common_Appointments.AsnAppointmentEntry["initEmpty"].call(0)
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"appointment"
		];
		return p;
	}

	public static type = "AsnAppointmentSetEntryArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentSetEntryArgument",
			...params,
			value: [
				ENetUC_Common_Appointments.AsnAppointmentEntry.getASN1Schema({ name: "appointment" }),
				new asn1ts.Extension()
			]
		});
	}

	/** The filled AsnAppointmentEntry structure to save to the database. */
	public appointment!: ENetUC_Common_Appointments.AsnAppointmentEntry;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Result of asnAppointmentSetEntry.
 */
export class AsnAppointmentSetEntryResult {
	public constructor(that: AsnAppointmentSetEntryResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentSetEntryResult {
		return new AsnAppointmentSetEntryResult({
			iResult: 0
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iResult"
		];
		return p;
	}

	public static type = "AsnAppointmentSetEntryResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentSetEntryResult",
			...params,
			value: [
				new asn1ts.Integer({ name: "iResult" }),
				new asn1ts.Extension()
			]
		});
	}

	/** 0: The database operation went well; all other values indicates, that the call fails on database level. */
	public iResult!: number;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Argument for asnAppointmentGetAllEntriesForUser.
 */
export class AsnAppointmentGetAllEntriesForUserArgument {
	public constructor(that: AsnAppointmentGetAllEntriesForUserArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentGetAllEntriesForUserArgument {
		return new AsnAppointmentGetAllEntriesForUserArgument({
			u8sOwner: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sOwner"
		];
		return p;
	}

	public static type = "AsnAppointmentGetAllEntriesForUserArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentGetAllEntriesForUserArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sOwner" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Should be the username of the current user. Currently the UCServer ignores this parameter and uses the username of the logged in user instead. */
	public u8sOwner!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Result of asnAppointmentGetAllEntriesForUser.
 */
export class AsnAppointmentGetAllEntriesForUserResult {
	public constructor(that: AsnAppointmentGetAllEntriesForUserResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentGetAllEntriesForUserResult {
		return new AsnAppointmentGetAllEntriesForUserResult({
			iResult: 0,
			listAppointments: new ENetUC_Common_Appointments.SEQAppointmentList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iResult",
			"listAppointments"
		];
		return p;
	}

	public static type = "AsnAppointmentGetAllEntriesForUserResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentGetAllEntriesForUserResult",
			...params,
			value: [
				new asn1ts.Integer({ name: "iResult" }),
				ENetUC_Common_Appointments.SEQAppointmentList.getASN1Schema({ name: "listAppointments" }),
				new asn1ts.Extension()
			]
		});
	}

	/** 0: The call went well and the listAppointments field contains the appointments found for the user. */
	public iResult!: number;
	/** List of AsnAppointmentEntry. */
	public listAppointments!: ENetUC_Common_Appointments.SEQAppointmentList;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Argument for asnAppointmentGetActualEntrysForUser
 */
export class AsnAppointmentGetActualEntryForUserArgument {
	public constructor(that: AsnAppointmentGetActualEntryForUserArgument) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentGetActualEntryForUserArgument {
		return new AsnAppointmentGetActualEntryForUserArgument({
			u8sOwner: ""
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"u8sOwner"
		];
		return p;
	}

	public static type = "AsnAppointmentGetActualEntryForUserArgument";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentGetActualEntryForUserArgument",
			...params,
			value: [
				new asn1ts.Utf8String({ name: "u8sOwner" }),
				new asn1ts.Extension()
			]
		});
	}

	/** Should be the username of the current user. Currently the UCServer ignores this parameter and uses the username of the logged in user instead. */
	public u8sOwner!: string;
}

// [PrintTSTypeDefCode]
// [PrintTSSeqDefCode]
/**
 * Result of asnAppointmentGetActualEntrysForUser.
 */
export class AsnAppointmentGetActualEntryForUserResult {
	public constructor(that: AsnAppointmentGetActualEntryForUserResult) {
		Object.assign(this, that);
	}

	private static initEmpty(): AsnAppointmentGetActualEntryForUserResult {
		return new AsnAppointmentGetActualEntryForUserResult({
			iResult: 0,
			listAppointments: new ENetUC_Common_Appointments.SEQAppointmentList()
		});
	}

	public static getOwnPropertyNames(bIncludeOptionals: boolean = true): string[] {
		const p = [
			"iResult",
			"listAppointments"
		];
		return p;
	}

	public static type = "AsnAppointmentGetActualEntryForUserResult";

	public static getASN1Schema(params?: asn1ts.ConstructedParams): asn1ts.Sequence {
		return new asn1ts.Sequence({
			name: "AsnAppointmentGetActualEntryForUserResult",
			...params,
			value: [
				new asn1ts.Integer({ name: "iResult" }),
				ENetUC_Common_Appointments.SEQAppointmentList.getASN1Schema({ name: "listAppointments" }),
				new asn1ts.Extension()
			]
		});
	}

	/** 0: Indicates a successful call and the listAppointments should contain all currently \"active\" appointments of the user. */
	public iResult!: number;
	/** List of AsnAppointmentEntry. */
	public listAppointments!: ENetUC_Common_Appointments.SEQAppointmentList;
}
