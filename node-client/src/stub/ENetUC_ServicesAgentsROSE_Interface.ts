// [PrintTSROSEInterfaceCode]
// [PrintTSROSEHeader]
/**
 * ENetUC_ServicesAgentsROSE_Interface
 * "UC-Server-Access-Protocol-AgentServices" ASN.1 interfaces.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImport]
import { IReceiveInvokeContext, AsnInvokeProblem } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_ServicesAgents from "./ENetUC_ServicesAgents";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_ServicesAgentsROSEInterface";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEInterface]
export interface IENetUC_ServicesAgentsROSE {
	invoke_asnRegisterServiceAgents(argument: ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	invoke_asnUnregisterServiceAgents(argument: ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem>;
	event_asnSetServiceAgentStates(argument: ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnResponseSetServiceAgentStatesFailed(argument: ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnRequestServiceAgentStateChange(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnRequestServiceAgentLogin(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnRequestServiceAgentLogout(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument, invokeContext?: ISendInvokeContextParams): void;
	event_asnRequestServiceAgentsStatusUpdate(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument, invokeContext?: ISendInvokeContextParams): void;
}

// [PrintTSROSEHandlerInterface]
// Contains all invokes of the interface (normally the server side)
export interface IENetUC_ServicesAgentsROSE_Invoke_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onInvoke_asnRegisterServiceAgents(argument: ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult | ENetUC_Common.AsnRequestError | undefined>;
	onInvoke_asnUnregisterServiceAgents(argument: ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult | ENetUC_Common.AsnRequestError | undefined>;
}

// Contains all events of the interface (normally the client side)
export interface IENetUC_ServicesAgentsROSE_Event_Handler {
	// Allows the implementer to (globally) implement an async local storage (thread local storage) for calls inside the called environment)
	setLogContext?(argument: unknown, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnSetServiceAgentStates(argument: ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnResponseSetServiceAgentStatesFailed(argument: ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnRequestServiceAgentStateChange(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnRequestServiceAgentLogin(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnRequestServiceAgentLogout(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument, invokeContext: IReceiveInvokeContext): void;
	onEvent_asnRequestServiceAgentsStatusUpdate(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument, invokeContext: IReceiveInvokeContext): void;
}

// Contains all invokes and events of the interface
export type IENetUC_ServicesAgentsROSE_Handler = IENetUC_ServicesAgentsROSE_Invoke_Handler & IENetUC_ServicesAgentsROSE_Event_Handler;

// [PrintTSROSEServerCopyPasteInterface]
/* Copy paste code for the import statement
import { IReceiveInvokeContext } from "./TSROSEBase";
import * as ENetUC_Common from "./ENetUC_Common";
import { ENetUC_ServicesAgents } from "./ENetUC_ServicesAgents";
*/

/**
 * Allows to set the log context for an invoke.
 * This method is called in advanced of methods handled inside this handler
 * The idea is to implement a async local storage based on the provided data from the argument or invokeContext
 *
 * @param argument - the snacc rose argument
 * @param invokeContext - the invoke context
 */
/*
public setLogContext(argument: unknown, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * register agents to the service
 *
 * UML section is not exported to this file!
 *
 * @param argument - Argument for asnRegisterServiceAgents
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnRegisterServiceAgentsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnRegisterServiceAgents(argument: ENetUC_ServicesAgents.AsnRegisterServiceAgentsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ServicesAgents.AsnRegisterServiceAgentsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * unregister agents from the service
 *
 * UML section is not exported to this file!
 *
 * @param argument - Argument for asnUnregisterServiceAgents
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 * @returns - AsnUnregisterServiceAgentsResult on success, AsnRequestError on error or undefined if the function is not implemented
 */
/*
public async onInvoke_asnUnregisterServiceAgents(argument: ENetUC_ServicesAgents.AsnUnregisterServiceAgentsArgument, invokeContext: IReceiveInvokeContext): Promise<ENetUC_ServicesAgents.AsnUnregisterServiceAgentsResult | ENetUC_Common.AsnRequestError | undefined> {
	return undefined;
}
*/

/**
 * Event to set the state of agent(s). There is no answer to this event.
 *
 * UML section is not exported to this file!
 *
 * @param argument - Argument for asnSetAgentStates
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnSetServiceAgentStates(argument: ENetUC_ServicesAgents.AsnSetServiceAgentStatesArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * Event to for agent states that the UCServer was unable to set
 *
 * If the UCServer was unable to set agent states while processing asnSetServiceAgentStates, it will
 * send back this event with the failed agent states.
 *
 * @param argument - Argument for AsnResponseSetServiceAgentStatesFailed
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnResponseSetServiceAgentStatesFailed(argument: ENetUC_ServicesAgents.AsnResponseSetServiceAgentStatesFailedArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * The state of a agent should be changed
 *
 * This event will be sent by the UCServer when the user wants to change his agent state (button in the UI).
 * The connected service should change the agents satte accordingliy and send an update of the resulting agent state back to the UCServer.
 *
 * The UCServer by itself will not cache or predict the agent state resulting, so it will only change the internal state only the service
 * send the update.
 *
 *
 * UML section is not exported to this file!
 *
 * @param argument - Argument for asnEventServiceAgentStateChanged
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnRequestServiceAgentStateChange(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentStateChangeArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * The agent should be logged in
 *
 * This event will be sent by the UCServer when the user wants to login.
 * The connected service should change the agents satte accordingliy and send an update of the resulting agent state back to the UCServer.
 *
 * The UCServer by itself will not cache or predict the agent state resulting, so it will only change the internal state only the service
 * send the update.
 *
 * @param argument - Argument for asnEventServiceAgentStateChanged
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnRequestServiceAgentLogin(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentLoginArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * The agent request a logout
 *
 * This event will be sent by the UCServer when the user wants to logout.
 * The connected service should change the agents state accordingliy and send an update of the resulting agent state () back to the UCServer.
 *
 * The UCServer by itself will not cache or predict the agent state resulting, so it will only change the internal state only the service
 * send the update.
 *
 * @param argument - Argument for asnEventServiceAgentStateChanged
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnRequestServiceAgentLogout(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentLogoutArgument, invokeContext: IReceiveInvokeContext): void {
}
*/

/**
 * The connected service should update the state of the given agents or all agents
 *
 * @param argument - Argument for asnRequestServiceAgentsStatusUpdate
 * @param invokeContext - Invokecontext from the asn.1 lib (containing invoke related data)
 */
/*
public onEvent_asnRequestServiceAgentsStatusUpdate(argument: ENetUC_ServicesAgents.AsnRequestServiceAgentsStatusUpdateArgument, invokeContext: IReceiveInvokeContext): void {
}
*/
