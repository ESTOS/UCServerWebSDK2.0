// [PrintTSROSEHeader]
/**
 * ENetUC_AVROSE
 * "UC-Server-Access-Protocol-AV" ASN.1 stubs.
 * This file was generated by estos esnacc (V6.0.19, 20.09.2024)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable */
// [PrintTSROSEImports]
// Global imports
import { IENetUC_AVROSE, IENetUC_AVROSE_Handler } from "./ENetUC_AVROSE_Interface";
import { ROSEError, ROSEInvoke, ROSEReject, ROSEResult } from "./SNACCROSE";
import { AsnInvokeProblem, AsnInvokeProblemEnum, createInvokeReject, IASN1Transport, IASN1LogData, IReceiveInvokeContext, IInvokeHandler, ELogSeverity, ROSEBase } from "./TSROSEBase";
import { ISendInvokeContextParams } from "./TSInvokeContext";
// Local imports
import * as ENetUC_AV from "./ENetUC_AV";
import * as Converter from "./ENetUC_AV_Converter";
// [PrintTSImports]
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_SIPCTI from "./ENetUC_Common_SIPCTI";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";
import * as ENetUC_Common_SIPCTI_Converter from "./ENetUC_Common_SIPCTI_Converter";
// [PrintTSRootTypes]
export const MODULE_NAME = "ENetUC_AVROSE";
export const MODULE_LASTCHANGE = "1970-01-01T00:00:00Z";
export const MODULE_MAJOR_VERSION = 8;
export const MODULE_MINOR_VERSION = 0;
export const MODULE_VERSION = "8.0.0";

// [PrintTSROSEOperationDefines]
export enum OperationIDs {
	OPID_asnAVDropCall = 1501,
	OPID_asnAVMakeCallV2 = 1505,
	OPID_asnAVNewCallV2 = 1572,
	OPID_asnAVCallStateChanged = 1551,
	OPID_asnAVCallMessageV2 = 1573,
	OPID_asnAVConnectV2 = 1574,
	OPID_asnAVAlertV2 = 1575,
	OPID_asnRequestSTUNandTURN = 1555,
	OPID_asnGetSTUNandTURN = 1557,
	OPID_asnSTUNandTURNConfigChanged = 1556,
	OPID_asnAVGetIceServers = 1558,
	OPID_asnAVMakeMedia = 1559,
	OPID_asnAVNewMedia = 1560,
	OPID_asnAVConnectMedia = 1561,
	OPID_asnAVAlertMedia = 1562,
	OPID_asnAVDropMedia = 1563,
	OPID_asnAVCallHoldV2 = 1576,
	OPID_asnAVCallHoldAckV2 = 1577,
	OPID_asnAVCallRetrieveV2 = 1578,
	OPID_asnAVCallRetrieveAckV2 = 1579,
	OPID_asnAVTransferGetID = 1568,
	OPID_asnAVTransferGetIDResult = 1569,
	OPID_asnAVTransferStart = 1570,
	OPID_asnAVTransferStartResult = 1571
}

// [PrintTSROSEModuleComment]
/**
 * Audio\/Video interface.
 * ## Audio \/ Video Conversation Modul
 * UML section is not exported to this file!
 * ## Moduledescription
 * This module defines structures and operations related to audio\/video communication controlling.
 */

// [PrintTSROSEClass]
export class ENetUC_AVROSE extends ROSEBase implements IInvokeHandler, IENetUC_AVROSE {
	/**
	 * Contains the attributes that have to be filtered from logging
	 * Use logfilter property;property inside the asn1 root comments to specify this list
	 */
	public readonly logFilter: string[];

	/**
	 * The Loggers getLogData callback (used in all the log methods called in this class, add the classname to every log entry)
	 *
	 * @returns - an ILogData log data object provided additional data for all the logger calls in this class
	 */
	public getLogData(): IASN1LogData {
		return {
			className: MODULE_NAME
		};
	}

	/**
	 * Returns the operationName for an operationID
	 *
	 * @param id - the id we want to have the name for
	 * @returns - the name or undefined if not found
	 */
	public getNameForOperationID(id: OperationIDs): string | undefined {
		switch (id) {
			case OperationIDs.OPID_asnAVDropCall:
				return "asnAVDropCall";
			case OperationIDs.OPID_asnAVMakeCallV2:
				return "asnAVMakeCallV2";
			case OperationIDs.OPID_asnAVNewCallV2:
				return "asnAVNewCallV2";
			case OperationIDs.OPID_asnAVCallStateChanged:
				return "asnAVCallStateChanged";
			case OperationIDs.OPID_asnAVCallMessageV2:
				return "asnAVCallMessageV2";
			case OperationIDs.OPID_asnAVConnectV2:
				return "asnAVConnectV2";
			case OperationIDs.OPID_asnAVAlertV2:
				return "asnAVAlertV2";
			case OperationIDs.OPID_asnRequestSTUNandTURN:
				return "asnRequestSTUNandTURN";
			case OperationIDs.OPID_asnGetSTUNandTURN:
				return "asnGetSTUNandTURN";
			case OperationIDs.OPID_asnSTUNandTURNConfigChanged:
				return "asnSTUNandTURNConfigChanged";
			case OperationIDs.OPID_asnAVGetIceServers:
				return "asnAVGetIceServers";
			case OperationIDs.OPID_asnAVMakeMedia:
				return "asnAVMakeMedia";
			case OperationIDs.OPID_asnAVNewMedia:
				return "asnAVNewMedia";
			case OperationIDs.OPID_asnAVConnectMedia:
				return "asnAVConnectMedia";
			case OperationIDs.OPID_asnAVAlertMedia:
				return "asnAVAlertMedia";
			case OperationIDs.OPID_asnAVDropMedia:
				return "asnAVDropMedia";
			case OperationIDs.OPID_asnAVCallHoldV2:
				return "asnAVCallHoldV2";
			case OperationIDs.OPID_asnAVCallHoldAckV2:
				return "asnAVCallHoldAckV2";
			case OperationIDs.OPID_asnAVCallRetrieveV2:
				return "asnAVCallRetrieveV2";
			case OperationIDs.OPID_asnAVCallRetrieveAckV2:
				return "asnAVCallRetrieveAckV2";
			case OperationIDs.OPID_asnAVTransferGetID:
				return "asnAVTransferGetID";
			case OperationIDs.OPID_asnAVTransferGetIDResult:
				return "asnAVTransferGetIDResult";
			case OperationIDs.OPID_asnAVTransferStart:
				return "asnAVTransferStart";
			case OperationIDs.OPID_asnAVTransferStartResult:
				return "asnAVTransferStartResult";
			default:
				return undefined;
		}
	}

	/**
	 * Returns the operationID for an operationName
	 *
	 * @param name - the name we want to have the id for
	 * @returns - the id or undefined if not found
	 */
	public getIDForOperationName(name: string): OperationIDs | undefined {
		switch (name) {
			case "asnAVDropCall":
				return OperationIDs.OPID_asnAVDropCall;
			case "asnAVMakeCallV2":
				return OperationIDs.OPID_asnAVMakeCallV2;
			case "asnAVNewCallV2":
				return OperationIDs.OPID_asnAVNewCallV2;
			case "asnAVCallStateChanged":
				return OperationIDs.OPID_asnAVCallStateChanged;
			case "asnAVCallMessageV2":
				return OperationIDs.OPID_asnAVCallMessageV2;
			case "asnAVConnectV2":
				return OperationIDs.OPID_asnAVConnectV2;
			case "asnAVAlertV2":
				return OperationIDs.OPID_asnAVAlertV2;
			case "asnRequestSTUNandTURN":
				return OperationIDs.OPID_asnRequestSTUNandTURN;
			case "asnGetSTUNandTURN":
				return OperationIDs.OPID_asnGetSTUNandTURN;
			case "asnSTUNandTURNConfigChanged":
				return OperationIDs.OPID_asnSTUNandTURNConfigChanged;
			case "asnAVGetIceServers":
				return OperationIDs.OPID_asnAVGetIceServers;
			case "asnAVMakeMedia":
				return OperationIDs.OPID_asnAVMakeMedia;
			case "asnAVNewMedia":
				return OperationIDs.OPID_asnAVNewMedia;
			case "asnAVConnectMedia":
				return OperationIDs.OPID_asnAVConnectMedia;
			case "asnAVAlertMedia":
				return OperationIDs.OPID_asnAVAlertMedia;
			case "asnAVDropMedia":
				return OperationIDs.OPID_asnAVDropMedia;
			case "asnAVCallHoldV2":
				return OperationIDs.OPID_asnAVCallHoldV2;
			case "asnAVCallHoldAckV2":
				return OperationIDs.OPID_asnAVCallHoldAckV2;
			case "asnAVCallRetrieveV2":
				return OperationIDs.OPID_asnAVCallRetrieveV2;
			case "asnAVCallRetrieveAckV2":
				return OperationIDs.OPID_asnAVCallRetrieveAckV2;
			case "asnAVTransferGetID":
				return OperationIDs.OPID_asnAVTransferGetID;
			case "asnAVTransferGetIDResult":
				return OperationIDs.OPID_asnAVTransferGetIDResult;
			case "asnAVTransferStart":
				return OperationIDs.OPID_asnAVTransferStart;
			case "asnAVTransferStartResult":
				return OperationIDs.OPID_asnAVTransferStartResult;
			default:
				return undefined;
		}
	}

	// [PrintTSROSEConstructor]
	/**
	 * Constructs the invoke and oninvoke object targeting all the ROSE related parts.
	 *
	 * @param transport - The transport is the connection to the other side. It takes care of delivering the invoke
	 * to us as well as to send invokes and events to the other side. It also holds the logger.
	 * @param handleEvents - Set this to true if you want to receive events or false if the stub should cached them
	 * until you call dispatchEvents();
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public constructor(transport: IASN1Transport, handleEvents: boolean, handler?: Partial<IENetUC_AVROSE_Handler>) {
		super(transport, handleEvents);

		this.logFilter = [];

		if (handler)
			this.setHandler(handler);
	}

	// [PrintTSROSESetHandler]
	/**
	 * Sets the handler and registers the operations with it
	 *
	 * @param handler - The handler takes care of handling methods that are exposed through the ASN1 file
	 * The outer ROSE envelop specifies the function that is called. The server looks for an appropriate handler
	 * and calls the handler for the operation. Inside the operation the argument is decoded. Once the handling of the
	 * operation is done the result (error) is encoded and handed back to the callee, embedded in the ROSE envelop and send
	 * back to the other side. If a certain function is not register the function call will fail with not function not implemented
	 */
	public setHandler(handler: Partial<IENetUC_AVROSE_Handler>): void {
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVDropCall, "asnAVDropCall");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVMakeCallV2, "asnAVMakeCallV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVNewCallV2, "asnAVNewCallV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVCallStateChanged, "asnAVCallStateChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVCallMessageV2, "asnAVCallMessageV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVConnectV2, "asnAVConnectV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVAlertV2, "asnAVAlertV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnRequestSTUNandTURN, "asnRequestSTUNandTURN");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnGetSTUNandTURN, "asnGetSTUNandTURN");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnSTUNandTURNConfigChanged, "asnSTUNandTURNConfigChanged");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVGetIceServers, "asnAVGetIceServers");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVMakeMedia, "asnAVMakeMedia");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVNewMedia, "asnAVNewMedia");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVConnectMedia, "asnAVConnectMedia");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVAlertMedia, "asnAVAlertMedia");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVDropMedia, "asnAVDropMedia");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVCallHoldV2, "asnAVCallHoldV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVCallHoldAckV2, "asnAVCallHoldAckV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVCallRetrieveV2, "asnAVCallRetrieveV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVCallRetrieveAckV2, "asnAVCallRetrieveAckV2");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVTransferGetID, "asnAVTransferGetID");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVTransferGetIDResult, "asnAVTransferGetIDResult");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVTransferStart, "asnAVTransferStart");
		this.transport.registerOperation(this, handler, OperationIDs.OPID_asnAVTransferStartResult, "asnAVTransferStartResult");
		this.transport.registerModuleVersion("ENetUC_AV", 8, 0);
	}

	// [PrintTSROSEInvokeMethods]

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAVMakeCallV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAVMakeCallResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAVMakeCallV2(argument: ENetUC_AV.AsnAVMakeCallV2Argument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_AV.AsnAVMakeCallResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_AV.AsnAVMakeCallResult, OperationIDs.OPID_asnAVMakeCallV2, "asnAVMakeCallV2", Converter.AsnAVMakeCallV2Argument_Converter, Converter.AsnAVMakeCallResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Konfiguration von STUN und TURN abholen (als operation)
	 *
	 * @param argument - An AsnGetSTUNandTURNArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnGetSTUNandTURNResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnGetSTUNandTURN(argument: ENetUC_AV.AsnGetSTUNandTURNArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_AV.AsnGetSTUNandTURNResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_AV.AsnGetSTUNandTURNResult, OperationIDs.OPID_asnGetSTUNandTURN, "asnGetSTUNandTURN", Converter.AsnGetSTUNandTURNArgument_Converter, Converter.AsnGetSTUNandTURNResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Konfiguration von STUN und TURN abholen (als operation) - Result browser kompatibel
	 *
	 * @param argument - An AsnAVGetIceServersArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns a Promise resolving into AsnAVGetIceServersResult, an AsnRequestError or AsnInvokeProblem object
	 */
	public async invoke_asnAVGetIceServers(argument: ENetUC_AV.AsnAVGetIceServersArgument, invokeContext?: ISendInvokeContextParams): Promise<ENetUC_AV.AsnAVGetIceServersResult | ENetUC_Common.AsnRequestError | AsnInvokeProblem> {
		return this.handleInvoke(argument, ENetUC_AV.AsnAVGetIceServersResult, OperationIDs.OPID_asnAVGetIceServers, "asnAVGetIceServers", Converter.AsnAVGetIceServersArgument_Converter, Converter.AsnAVGetIceServersResult_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAVDropCallArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVDropCall(argument: ENetUC_AV.AsnAVDropCallArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVDropCall, "asnAVDropCall", Converter.AsnAVDropCallArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAVNewCallV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVNewCallV2(argument: ENetUC_AV.AsnAVNewCallV2Argument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVNewCallV2, "asnAVNewCallV2", Converter.AsnAVNewCallV2Argument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Invoked (Event) if CallState \/ Information has changed
	 *
	 * @param argument - An AsnAVCallStateChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVCallStateChanged(argument: ENetUC_AV.AsnAVCallStateChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVCallStateChanged, "asnAVCallStateChanged", Converter.AsnAVCallStateChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Invoked (Event) if CallState \/ Information has changed
	 *
	 * @param argument - An AsnAVCallMessageV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVCallMessageV2(argument: ENetUC_AV.AsnAVCallMessageV2Argument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVCallMessageV2, "asnAVCallMessageV2", Converter.AsnAVCallMessageV2Argument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAVConnectV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVConnectV2(argument: ENetUC_AV.AsnAVConnectV2Argument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVConnectV2, "asnAVConnectV2", Converter.AsnAVConnectV2Argument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAVAlertV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVAlertV2(argument: ENetUC_AV.AsnAVAlertV2Argument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVAlertV2, "asnAVAlertV2", Converter.AsnAVAlertV2Argument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Event von Client zum Server um die Konfiguration von STUN und TURN zu bekommen
	 *
	 * @param argument - An AsnRequestSTUNandTURNArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnRequestSTUNandTURN(argument: ENetUC_AV.AsnRequestSTUNandTURNArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnRequestSTUNandTURN, "asnRequestSTUNandTURN", Converter.AsnRequestSTUNandTURNArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * Event von Server zum Client wenn entweder vom Client angefordert durch
	 * asnRequestSTUNandTURN oder wenn Konfiguration am Server geändert wurde.
	 *
	 * @param argument - An AsnSTUNandTURNConfigChangedArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnSTUNandTURNConfigChanged(argument: ENetUC_AV.AsnSTUNandTURNConfigChangedArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnSTUNandTURNConfigChanged, "asnSTUNandTURNConfigChanged", Converter.AsnSTUNandTURNConfigChangedArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAVMediaChangeArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVMakeMedia(argument: ENetUC_AV.AsnAVMediaChangeArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVMakeMedia, "asnAVMakeMedia", Converter.AsnAVMediaChangeArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAVMediaChangeArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVNewMedia(argument: ENetUC_AV.AsnAVMediaChangeArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVNewMedia, "asnAVNewMedia", Converter.AsnAVMediaChangeArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAVMediaChangeArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVConnectMedia(argument: ENetUC_AV.AsnAVMediaChangeArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVConnectMedia, "asnAVConnectMedia", Converter.AsnAVMediaChangeArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAVMediaChangeArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVAlertMedia(argument: ENetUC_AV.AsnAVMediaChangeArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVAlertMedia, "asnAVAlertMedia", Converter.AsnAVMediaChangeArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * @param argument - An AsnAVMediaChangeArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVDropMedia(argument: ENetUC_AV.AsnAVMediaChangeArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVDropMedia, "asnAVDropMedia", Converter.AsnAVMediaChangeArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * ** AV Call Hold Request
	 * \@addded 22.08.2024
	 *
	 * @param argument - An AsnAVCallMessageV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVCallHoldV2(argument: ENetUC_AV.AsnAVCallMessageV2Argument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVCallHoldV2, "asnAVCallHoldV2", Converter.AsnAVCallMessageV2Argument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * ** AV Call Hold Request Acknowledgement
	 * \@addded 22.08.2024
	 *
	 * @param argument - An AsnAVCallMessageV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVCallHoldAckV2(argument: ENetUC_AV.AsnAVCallMessageV2Argument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVCallHoldAckV2, "asnAVCallHoldAckV2", Converter.AsnAVCallMessageV2Argument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * ** AV Call Retrieve Request
	 * \@addded 22.08.2024
	 *
	 * @param argument - An AsnAVCallMessageV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVCallRetrieveV2(argument: ENetUC_AV.AsnAVCallMessageV2Argument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVCallRetrieveV2, "asnAVCallRetrieveV2", Converter.AsnAVCallMessageV2Argument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * ** AV Call Retrieve Request Acknowledgement
	 * \@addded 22.08.2024
	 *
	 * @param argument - An AsnAVCallMessageV2Argument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVCallRetrieveAckV2(argument: ENetUC_AV.AsnAVCallMessageV2Argument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVCallRetrieveAckV2, "asnAVCallRetrieveAckV2", Converter.AsnAVCallMessageV2Argument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * ** AV Transfer Get ID Request
	 *
	 * @param argument - An AsnAVTransferArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVTransferGetID(argument: ENetUC_AV.AsnAVTransferArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVTransferGetID, "asnAVTransferGetID", Converter.AsnAVTransferArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * ** AV Transfer Get ID Acknowledgement
	 *
	 * @param argument - An AsnAVTransferArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVTransferGetIDResult(argument: ENetUC_AV.AsnAVTransferArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVTransferGetIDResult, "asnAVTransferGetIDResult", Converter.AsnAVTransferArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * ** AV Transfer Start Request
	 *
	 * @param argument - An AsnAVTransferArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVTransferStart(argument: ENetUC_AV.AsnAVTransferArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVTransferStart, "asnAVTransferStart", Converter.AsnAVTransferArgument_Converter, invokeContext);
	}

	// [PrintTSROSEInvokeMethod]
	/**
	 * ** AV Transfer Start Acknowledgement
	 *
	 * @param argument - An AsnAVTransferArgument object containing all the relevant parameters for the call
	 * @param invokeContext - Invoke related contextual data (e.g. a clientConnectionID)
	 * @returns undefined or, if bSendEventSynchronous has been set true when the event was sent
	 */
	public event_asnAVTransferStartResult(argument: ENetUC_AV.AsnAVTransferArgument, invokeContext?: ISendInvokeContextParams): undefined | boolean {
		return this.handleEvent(argument, OperationIDs.OPID_asnAVTransferStartResult, "asnAVTransferStartResult", Converter.AsnAVTransferArgument_Converter, invokeContext);
	}

	// [PrintTSROSEOnInvokeswitchCase]
	/**
	 * This is the central onInvoke method that is called whenever a method of this module is called.
	 * Based on the operationID we step into the decoding of the method argument and call the method in the handler.
	 * The result is then again encoded and send to the other side.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the metho in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled, ROSEResult for the invoke result, ROSEError for an error or undefined if an event was called
	 */
	public async onInvoke(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_AVROSE_Handler): Promise<ROSEReject | ROSEResult | ROSEError | undefined> {
		switch (invoke.operationID) {
			case OperationIDs.OPID_asnAVMakeCallV2:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAVMakeCallV2, ENetUC_AV.AsnAVMakeCallV2Argument, Converter.AsnAVMakeCallV2Argument_Converter, Converter.AsnAVMakeCallResult_Converter, handler, handler.onInvoke_asnAVMakeCallV2, invokeContext);
			case OperationIDs.OPID_asnGetSTUNandTURN:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnGetSTUNandTURN, ENetUC_AV.AsnGetSTUNandTURNArgument, Converter.AsnGetSTUNandTURNArgument_Converter, Converter.AsnGetSTUNandTURNResult_Converter, handler, handler.onInvoke_asnGetSTUNandTURN, invokeContext);
			case OperationIDs.OPID_asnAVGetIceServers:
				return await this.handleOnInvoke(invoke, OperationIDs.OPID_asnAVGetIceServers, ENetUC_AV.AsnAVGetIceServersArgument, Converter.AsnAVGetIceServersArgument_Converter, Converter.AsnAVGetIceServersResult_Converter, handler, handler.onInvoke_asnAVGetIceServers, invokeContext);
			case OperationIDs.OPID_asnAVDropCall:
			case OperationIDs.OPID_asnAVNewCallV2:
			case OperationIDs.OPID_asnAVCallStateChanged:
			case OperationIDs.OPID_asnAVCallMessageV2:
			case OperationIDs.OPID_asnAVConnectV2:
			case OperationIDs.OPID_asnAVAlertV2:
			case OperationIDs.OPID_asnRequestSTUNandTURN:
			case OperationIDs.OPID_asnSTUNandTURNConfigChanged:
			case OperationIDs.OPID_asnAVMakeMedia:
			case OperationIDs.OPID_asnAVNewMedia:
			case OperationIDs.OPID_asnAVConnectMedia:
			case OperationIDs.OPID_asnAVAlertMedia:
			case OperationIDs.OPID_asnAVDropMedia:
			case OperationIDs.OPID_asnAVCallHoldV2:
			case OperationIDs.OPID_asnAVCallHoldAckV2:
			case OperationIDs.OPID_asnAVCallRetrieveV2:
			case OperationIDs.OPID_asnAVCallRetrieveAckV2:
			case OperationIDs.OPID_asnAVTransferGetID:
			case OperationIDs.OPID_asnAVTransferGetIDResult:
			case OperationIDs.OPID_asnAVTransferStart:
			case OperationIDs.OPID_asnAVTransferStartResult:
				return this.onEvent(invoke, invokeContext, handler);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_AVROSE`);
		}
	}

	// [PrintTSROSEOnEventSwitchCase]
	/**
	 * This is the onEvent method that is called whenever an event is called in this module.
	 * It is called from the onInvoke in case of an event is being called.
	 * Depending on the handleEvents flag the event is either handled or cached.
	 *
	 * @param invoke - The (ROSE) decoded invoke which also contains the function argument (not yet decoded). The
	 * operationID is the one that defines which function we call. In the switch case we decode the methods argument
	 * and call the method in the handler.
	 * @param invokeContext - The invoke related contextual data (see IReceiveInvokeContext)
	 * @param handler - This object is handling the invoke after having successfully decoded the argument.
	 * it contains the methods as defined in the asn.1 files.
	 * @returns ROSEReject if the request was not handled or undefined
	 */
	private async onEvent(invoke: ROSEInvoke, invokeContext: IReceiveInvokeContext, handler: IENetUC_AVROSE_Handler): Promise<ROSEReject | undefined> {
		// If the class says do not handle events and the override flag in the invokeContext has not been set, add the event to the que, otherwise we dispatch it
		if (!this.handleEvents && !invokeContext?.handleEvent) {
			this.transport.log(ELogSeverity.debug, "Adding event to queue", "onEvent", this, { operationName: invoke.operationName, operationID: invoke.operationID });
			this.cachedEvents.push({ invoke, invokeContext, handler });
			return;
		}

		switch (invoke.operationID) {
			case OperationIDs.OPID_asnAVDropCall:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVDropCall, ENetUC_AV.AsnAVDropCallArgument, Converter.AsnAVDropCallArgument_Converter, handler, handler.onEvent_asnAVDropCall, invokeContext);
			case OperationIDs.OPID_asnAVNewCallV2:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVNewCallV2, ENetUC_AV.AsnAVNewCallV2Argument, Converter.AsnAVNewCallV2Argument_Converter, handler, handler.onEvent_asnAVNewCallV2, invokeContext);
			case OperationIDs.OPID_asnAVCallStateChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVCallStateChanged, ENetUC_AV.AsnAVCallStateChangedArgument, Converter.AsnAVCallStateChangedArgument_Converter, handler, handler.onEvent_asnAVCallStateChanged, invokeContext);
			case OperationIDs.OPID_asnAVCallMessageV2:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVCallMessageV2, ENetUC_AV.AsnAVCallMessageV2Argument, Converter.AsnAVCallMessageV2Argument_Converter, handler, handler.onEvent_asnAVCallMessageV2, invokeContext);
			case OperationIDs.OPID_asnAVConnectV2:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVConnectV2, ENetUC_AV.AsnAVConnectV2Argument, Converter.AsnAVConnectV2Argument_Converter, handler, handler.onEvent_asnAVConnectV2, invokeContext);
			case OperationIDs.OPID_asnAVAlertV2:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVAlertV2, ENetUC_AV.AsnAVAlertV2Argument, Converter.AsnAVAlertV2Argument_Converter, handler, handler.onEvent_asnAVAlertV2, invokeContext);
			case OperationIDs.OPID_asnRequestSTUNandTURN:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnRequestSTUNandTURN, ENetUC_AV.AsnRequestSTUNandTURNArgument, Converter.AsnRequestSTUNandTURNArgument_Converter, handler, handler.onEvent_asnRequestSTUNandTURN, invokeContext);
			case OperationIDs.OPID_asnSTUNandTURNConfigChanged:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnSTUNandTURNConfigChanged, ENetUC_AV.AsnSTUNandTURNConfigChangedArgument, Converter.AsnSTUNandTURNConfigChangedArgument_Converter, handler, handler.onEvent_asnSTUNandTURNConfigChanged, invokeContext);
			case OperationIDs.OPID_asnAVMakeMedia:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVMakeMedia, ENetUC_AV.AsnAVMediaChangeArgument, Converter.AsnAVMediaChangeArgument_Converter, handler, handler.onEvent_asnAVMakeMedia, invokeContext);
			case OperationIDs.OPID_asnAVNewMedia:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVNewMedia, ENetUC_AV.AsnAVMediaChangeArgument, Converter.AsnAVMediaChangeArgument_Converter, handler, handler.onEvent_asnAVNewMedia, invokeContext);
			case OperationIDs.OPID_asnAVConnectMedia:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVConnectMedia, ENetUC_AV.AsnAVMediaChangeArgument, Converter.AsnAVMediaChangeArgument_Converter, handler, handler.onEvent_asnAVConnectMedia, invokeContext);
			case OperationIDs.OPID_asnAVAlertMedia:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVAlertMedia, ENetUC_AV.AsnAVMediaChangeArgument, Converter.AsnAVMediaChangeArgument_Converter, handler, handler.onEvent_asnAVAlertMedia, invokeContext);
			case OperationIDs.OPID_asnAVDropMedia:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVDropMedia, ENetUC_AV.AsnAVMediaChangeArgument, Converter.AsnAVMediaChangeArgument_Converter, handler, handler.onEvent_asnAVDropMedia, invokeContext);
			case OperationIDs.OPID_asnAVCallHoldV2:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVCallHoldV2, ENetUC_AV.AsnAVCallMessageV2Argument, Converter.AsnAVCallMessageV2Argument_Converter, handler, handler.onEvent_asnAVCallHoldV2, invokeContext);
			case OperationIDs.OPID_asnAVCallHoldAckV2:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVCallHoldAckV2, ENetUC_AV.AsnAVCallMessageV2Argument, Converter.AsnAVCallMessageV2Argument_Converter, handler, handler.onEvent_asnAVCallHoldAckV2, invokeContext);
			case OperationIDs.OPID_asnAVCallRetrieveV2:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVCallRetrieveV2, ENetUC_AV.AsnAVCallMessageV2Argument, Converter.AsnAVCallMessageV2Argument_Converter, handler, handler.onEvent_asnAVCallRetrieveV2, invokeContext);
			case OperationIDs.OPID_asnAVCallRetrieveAckV2:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVCallRetrieveAckV2, ENetUC_AV.AsnAVCallMessageV2Argument, Converter.AsnAVCallMessageV2Argument_Converter, handler, handler.onEvent_asnAVCallRetrieveAckV2, invokeContext);
			case OperationIDs.OPID_asnAVTransferGetID:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVTransferGetID, ENetUC_AV.AsnAVTransferArgument, Converter.AsnAVTransferArgument_Converter, handler, handler.onEvent_asnAVTransferGetID, invokeContext);
			case OperationIDs.OPID_asnAVTransferGetIDResult:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVTransferGetIDResult, ENetUC_AV.AsnAVTransferArgument, Converter.AsnAVTransferArgument_Converter, handler, handler.onEvent_asnAVTransferGetIDResult, invokeContext);
			case OperationIDs.OPID_asnAVTransferStart:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVTransferStart, ENetUC_AV.AsnAVTransferArgument, Converter.AsnAVTransferArgument_Converter, handler, handler.onEvent_asnAVTransferStart, invokeContext);
			case OperationIDs.OPID_asnAVTransferStartResult:
				return await this.handleOnEvent(invoke, OperationIDs.OPID_asnAVTransferStartResult, ENetUC_AV.AsnAVTransferArgument, Converter.AsnAVTransferArgument_Converter, handler, handler.onEvent_asnAVTransferStartResult, invokeContext);
			default:
				// If you land here stub of client and server are incompatible...
				debugger;
				return createInvokeReject(invoke, AsnInvokeProblemEnum.unrecognisedOperation, `${invoke.operationID} ("${invoke.operationName}") is not a function of ENetUC_AVROSE`);
		}
	}
}
